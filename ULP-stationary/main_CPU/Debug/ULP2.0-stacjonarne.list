
ULP2.0-stacjonarne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b78  08007b78  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b80  08007b80  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b84  08007b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033c4  20000018  08007ba0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200033dc  08007ba0  000233dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013388  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b90  00000000  00000000  000333c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b39  00000000  00000000  00037da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014462  00000000  00000000  000508d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d690  00000000  00000000  00064d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001023cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a0  00000000  00000000  0010241c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007a84 	.word	0x08007a84

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08007a84 	.word	0x08007a84

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <startup_effect_init>:

#include "ULP_Effects.h"


void startup_effect_init(struct startup_veriables *data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	data->counter_1=0;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	801a      	strh	r2, [r3, #0]
	data->counter_2 = 0;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	805a      	strh	r2, [r3, #2]
	data->semaphore = 0;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	715a      	strb	r2, [r3, #5]
	data->brightness = 100;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2264      	movs	r2, #100	; 0x64
 800063a:	711a      	strb	r2, [r3, #4]
	data->save_timer = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}

0800064a <startup_effect_first>:

// return 1 - finish effect
uint8_t startup_effect_first(struct startup_veriables *data, uint8_t led_array[][3], uint16_t led_length)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af02      	add	r7, sp, #8
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	801a      	strh	r2, [r3, #0]

	// clear led
	if (data->counter_1 >= 1)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00a      	beq.n	8000676 <startup_effect_first+0x2c>
		set_color(led_array, data->counter_1-1, 0, 0, 0);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	3b01      	subs	r3, #1
 8000666:	b299      	uxth	r1, r3
 8000668:	68b8      	ldr	r0, [r7, #8]
 800066a:	2300      	movs	r3, #0
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2200      	movs	r2, #0
 8000672:	f000 fd20 	bl	80010b6 <set_color>

	if (data->counter_1 >= 2)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d90a      	bls.n	8000694 <startup_effect_first+0x4a>
		set_color(led_array, data->counter_1-2, 0, 0, 0);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	3b02      	subs	r3, #2
 8000684:	b299      	uxth	r1, r3
 8000686:	68b8      	ldr	r0, [r7, #8]
 8000688:	2300      	movs	r3, #0
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2200      	movs	r2, #0
 8000690:	f000 fd11 	bl	80010b6 <set_color>

	// show wave
	set_color(led_array, data->counter_1, 255, 255, 255);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	8819      	ldrh	r1, [r3, #0]
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	23ff      	movs	r3, #255	; 0xff
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	23ff      	movs	r3, #255	; 0xff
 80006a0:	22ff      	movs	r2, #255	; 0xff
 80006a2:	f000 fd08 	bl	80010b6 <set_color>
	set_color(led_array, data->counter_1+1, 255, 255, 255);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	b299      	uxth	r1, r3
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	23ff      	movs	r3, #255	; 0xff
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	23ff      	movs	r3, #255	; 0xff
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	f000 fcfd 	bl	80010b6 <set_color>

	// clear led
	if (led_length-1- (data->counter_1)+1 < led_length)
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	da0c      	bge.n	80006ec <startup_effect_first+0xa2>
		set_color(led_array, led_length-1-(data->counter_1)+1, 0, 0, 0);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	1dba      	adds	r2, r7, #6
 80006d8:	8812      	ldrh	r2, [r2, #0]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	b299      	uxth	r1, r3
 80006de:	68b8      	ldr	r0, [r7, #8]
 80006e0:	2300      	movs	r3, #0
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	2200      	movs	r2, #0
 80006e8:	f000 fce5 	bl	80010b6 <set_color>

	if (led_length-1-(data->counter_1)-1+1 < led_length)
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	8812      	ldrh	r2, [r2, #0]
 80006f6:	1a9a      	subs	r2, r3, r2
 80006f8:	1dbb      	adds	r3, r7, #6
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	da0e      	bge.n	800071e <startup_effect_first+0xd4>
		set_color(led_array, led_length-1-(data->counter_1)-1+1, 0, 0, 0);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	1dba      	adds	r2, r7, #6
 8000706:	8812      	ldrh	r2, [r2, #0]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	b29b      	uxth	r3, r3
 800070c:	3b01      	subs	r3, #1
 800070e:	b299      	uxth	r1, r3
 8000710:	68b8      	ldr	r0, [r7, #8]
 8000712:	2300      	movs	r3, #0
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2300      	movs	r3, #0
 8000718:	2200      	movs	r2, #0
 800071a:	f000 fccc 	bl	80010b6 <set_color>

	// show wave
	set_color(led_array, led_length-1-(data->counter_1), 255, 255, 255);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	1dba      	adds	r2, r7, #6
 8000724:	8812      	ldrh	r2, [r2, #0]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b29b      	uxth	r3, r3
 800072a:	3b01      	subs	r3, #1
 800072c:	b299      	uxth	r1, r3
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	23ff      	movs	r3, #255	; 0xff
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	23ff      	movs	r3, #255	; 0xff
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	f000 fcbd 	bl	80010b6 <set_color>
	set_color(led_array, led_length-1-(data->counter_1)-1, 255, 255, 255);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	1dba      	adds	r2, r7, #6
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b29b      	uxth	r3, r3
 8000748:	3b02      	subs	r3, #2
 800074a:	b299      	uxth	r1, r3
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	23ff      	movs	r3, #255	; 0xff
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	23ff      	movs	r3, #255	; 0xff
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	f000 fcae 	bl	80010b6 <set_color>

	data->counter_1 += 1;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	b29a      	uxth	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	801a      	strh	r2, [r3, #0]

	if (data->counter_1 > led_length/2)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	1dbb      	adds	r3, r7, #6
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	085b      	lsrs	r3, r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	429a      	cmp	r2, r3
 8000774:	d908      	bls.n	8000788 <startup_effect_first+0x13e>
	{
		clear_led_strip(led_array, led_length);
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	881a      	ldrh	r2, [r3, #0]
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fc85 	bl	800108e <clear_led_strip>
		return 1;
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <startup_effect_first+0x140>
	}
	else
		return 0;
 8000788:	2300      	movs	r3, #0
}
 800078a:	0018      	movs	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	b004      	add	sp, #16
 8000790:	bd80      	pop	{r7, pc}

08000792 <startup_effect_second>:

// return 1 - finish effect
uint8_t startup_effect_second(struct startup_veriables *data, uint8_t led_array[][3], uint16_t led_length)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af02      	add	r7, sp, #8
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	1dbb      	adds	r3, r7, #6
 800079e:	801a      	strh	r2, [r3, #0]
	if ((led_length/2) + (data->counter_2) < led_length)
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	001a      	movs	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	885b      	ldrh	r3, [r3, #2]
 80007ae:	18d2      	adds	r2, r2, r3
 80007b0:	1dbb      	adds	r3, r7, #6
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	da0e      	bge.n	80007d6 <startup_effect_second+0x44>
		set_color(led_array, (led_length/2) + (data->counter_2), 66, 135, 245);
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	b29a      	uxth	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	885b      	ldrh	r3, [r3, #2]
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	b299      	uxth	r1, r3
 80007c8:	68b8      	ldr	r0, [r7, #8]
 80007ca:	23f5      	movs	r3, #245	; 0xf5
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2387      	movs	r3, #135	; 0x87
 80007d0:	2242      	movs	r2, #66	; 0x42
 80007d2:	f000 fc70 	bl	80010b6 <set_color>

	if ((led_length/2) - (data->counter_2)-1 >= 0)
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	085b      	lsrs	r3, r3, #1
 80007dc:	b29b      	uxth	r3, r3
 80007de:	001a      	movs	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	885b      	ldrh	r3, [r3, #2]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dd10      	ble.n	800080c <startup_effect_second+0x7a>
		set_color(led_array, (led_length/2) - (data->counter_2)-1, 66, 135, 245);
 80007ea:	1dbb      	adds	r3, r7, #6
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	085b      	lsrs	r3, r3, #1
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	885b      	ldrh	r3, [r3, #2]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	3b01      	subs	r3, #1
 80007fc:	b299      	uxth	r1, r3
 80007fe:	68b8      	ldr	r0, [r7, #8]
 8000800:	23f5      	movs	r3, #245	; 0xf5
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2387      	movs	r3, #135	; 0x87
 8000806:	2242      	movs	r2, #66	; 0x42
 8000808:	f000 fc55 	bl	80010b6 <set_color>

	(data->counter_2) += 1;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	885b      	ldrh	r3, [r3, #2]
 8000810:	3301      	adds	r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	805a      	strh	r2, [r3, #2]

	if ((data->counter_2) == led_length/2)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	885a      	ldrh	r2, [r3, #2]
 800081c:	1dbb      	adds	r3, r7, #6
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	b29b      	uxth	r3, r3
 8000824:	429a      	cmp	r2, r3
 8000826:	d101      	bne.n	800082c <startup_effect_second+0x9a>
		return 1;
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <startup_effect_second+0x9c>
	else
		return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bd80      	pop	{r7, pc}

08000836 <startup_effect_third>:

// return 1 - finish effect
uint8_t startup_effect_third(struct startup_veriables *data, uint8_t led_array[][3], uint16_t led_length)
{
 8000836:	b5b0      	push	{r4, r5, r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af02      	add	r7, sp, #8
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	801a      	strh	r2, [r3, #0]
	set_color_strip(led_array, map(66, data->brightness), map(135, data->brightness), map(245, data->brightness), led_length);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	0019      	movs	r1, r3
 800084e:	2042      	movs	r0, #66	; 0x42
 8000850:	f000 fa4e 	bl	8000cf0 <map>
 8000854:	0003      	movs	r3, r0
 8000856:	001c      	movs	r4, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	b25b      	sxtb	r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	0019      	movs	r1, r3
 8000862:	2087      	movs	r0, #135	; 0x87
 8000864:	f000 fa44 	bl	8000cf0 <map>
 8000868:	0003      	movs	r3, r0
 800086a:	001d      	movs	r5, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	b25b      	sxtb	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	0019      	movs	r1, r3
 8000876:	20f5      	movs	r0, #245	; 0xf5
 8000878:	f000 fa3a 	bl	8000cf0 <map>
 800087c:	0003      	movs	r3, r0
 800087e:	001a      	movs	r2, r3
 8000880:	68b8      	ldr	r0, [r7, #8]
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	0013      	movs	r3, r2
 800088a:	002a      	movs	r2, r5
 800088c:	0021      	movs	r1, r4
 800088e:	f000 fbb8 	bl	8001002 <set_color_strip>
	(data->brightness) -= 3;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	3b03      	subs	r3, #3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	b25a      	sxtb	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	711a      	strb	r2, [r3, #4]

	if (data->brightness <= 0)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	791b      	ldrb	r3, [r3, #4]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	dc08      	bgt.n	80008c0 <startup_effect_third+0x8a>
	{
		clear_led_strip(led_array, led_length);
 80008ae:	1dbb      	adds	r3, r7, #6
 80008b0:	881a      	ldrh	r2, [r3, #0]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fbe9 	bl	800108e <clear_led_strip>
		return 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	e000      	b.n	80008c2 <startup_effect_third+0x8c>
	}
	else
		return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b004      	add	sp, #16
 80008c8:	bdb0      	pop	{r4, r5, r7, pc}

080008ca <startup_effect>:

// return 1 - finish effect
uint8_t startup_effect(uint8_t led_array[][3], struct startup_veriables *data, uint32_t timer, uint16_t led_length)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	001a      	movs	r2, r3
 80008d8:	1cbb      	adds	r3, r7, #2
 80008da:	801a      	strh	r2, [r3, #0]
	switch(data->semaphore)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d031      	beq.n	8000948 <startup_effect+0x7e>
 80008e4:	dc40      	bgt.n	8000968 <startup_effect+0x9e>
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <startup_effect+0x26>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d01c      	beq.n	8000928 <startup_effect+0x5e>
 80008ee:	e03b      	b.n	8000968 <startup_effect+0x9e>
	{
	case 0: {
		if (timer - (data->save_timer) >= 15) // delay
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	2b0e      	cmp	r3, #14
 80008fa:	d937      	bls.n	800096c <startup_effect+0xa2>
		{
			data->semaphore += startup_effect_first(data, led_array, led_length);
 80008fc:	1cbb      	adds	r3, r7, #2
 80008fe:	881a      	ldrh	r2, [r3, #0]
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff fea0 	bl	800064a <startup_effect_first>
 800090a:	0003      	movs	r3, r0
 800090c:	001a      	movs	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	795b      	ldrb	r3, [r3, #5]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	715a      	strb	r2, [r3, #5]
			data->save_timer = timer;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	609a      	str	r2, [r3, #8]
			(data->save_timer) = timer;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	609a      	str	r2, [r3, #8]
		}
		break;
 8000926:	e021      	b.n	800096c <startup_effect+0xa2>
	}
	case 1: {data->semaphore += startup_effect_second(data, led_array, led_length); break;}
 8000928:	1cbb      	adds	r3, r7, #2
 800092a:	881a      	ldrh	r2, [r3, #0]
 800092c:	68f9      	ldr	r1, [r7, #12]
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff ff2e 	bl	8000792 <startup_effect_second>
 8000936:	0003      	movs	r3, r0
 8000938:	001a      	movs	r2, r3
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	795b      	ldrb	r3, [r3, #5]
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	b2da      	uxtb	r2, r3
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	715a      	strb	r2, [r3, #5]
 8000946:	e012      	b.n	800096e <startup_effect+0xa4>
	case 2: {data->semaphore += startup_effect_third(data, led_array, led_length); break;}
 8000948:	1cbb      	adds	r3, r7, #2
 800094a:	881a      	ldrh	r2, [r3, #0]
 800094c:	68f9      	ldr	r1, [r7, #12]
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ff70 	bl	8000836 <startup_effect_third>
 8000956:	0003      	movs	r3, r0
 8000958:	001a      	movs	r2, r3
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	795b      	ldrb	r3, [r3, #5]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	e002      	b.n	800096e <startup_effect+0xa4>
	default: return 1;
 8000968:	2301      	movs	r3, #1
 800096a:	e001      	b.n	8000970 <startup_effect+0xa6>
		break;
 800096c:	46c0      	nop			; (mov r8, r8)
	}
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b004      	add	sp, #16
 8000976:	bd80      	pop	{r7, pc}

08000978 <vu_effect>:

void vu_effect(uint8_t led_array[][3], uint8_t data, uint8_t r_a, uint8_t g_a, uint8_t b_a, uint8_t r_b, uint8_t g_b, uint8_t b_b, uint16_t led_length)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	000c      	movs	r4, r1
 8000982:	0010      	movs	r0, r2
 8000984:	0019      	movs	r1, r3
 8000986:	1cfb      	adds	r3, r7, #3
 8000988:	1c22      	adds	r2, r4, #0
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	1cbb      	adds	r3, r7, #2
 800098e:	1c02      	adds	r2, r0, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	1c7b      	adds	r3, r7, #1
 8000994:	1c0a      	adds	r2, r1, #0
 8000996:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i < led_length; i++)
 8000998:	230f      	movs	r3, #15
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e04e      	b.n	8000a40 <vu_effect+0xc8>
	{
		if (i < data)
 80009a2:	210f      	movs	r1, #15
 80009a4:	187a      	adds	r2, r7, r1
 80009a6:	1cfb      	adds	r3, r7, #3
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d21f      	bcs.n	80009f0 <vu_effect+0x78>
		{
			led_array[i][0] = r_a;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	0013      	movs	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	189b      	adds	r3, r3, r2
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	1cba      	adds	r2, r7, #2
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	701a      	strb	r2, [r3, #0]
			led_array[i][1] = g_a;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	0013      	movs	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	189b      	adds	r3, r3, r2
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	18d3      	adds	r3, r2, r3
 80009d2:	1c7a      	adds	r2, r7, #1
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	705a      	strb	r2, [r3, #1]
			led_array[i][2] = b_a;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	0013      	movs	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	189b      	adds	r3, r3, r2
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	18d2      	adds	r2, r2, r3
 80009e6:	2320      	movs	r3, #32
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	7093      	strb	r3, [r2, #2]
 80009ee:	e021      	b.n	8000a34 <vu_effect+0xbc>
		}
		else
		{
			led_array[i][0] = r_b;
 80009f0:	210f      	movs	r1, #15
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	0013      	movs	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	189b      	adds	r3, r3, r2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	18d3      	adds	r3, r2, r3
 8000a00:	2224      	movs	r2, #36	; 0x24
 8000a02:	18ba      	adds	r2, r7, r2
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	701a      	strb	r2, [r3, #0]
			led_array[i][1] = g_b;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	189b      	adds	r3, r3, r2
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	2228      	movs	r2, #40	; 0x28
 8000a18:	18ba      	adds	r2, r7, r2
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	705a      	strb	r2, [r3, #1]
			led_array[i][2] = b_b;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	0013      	movs	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	189b      	adds	r3, r3, r2
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	222c      	movs	r2, #44	; 0x2c
 8000a2e:	18ba      	adds	r2, r7, r2
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	709a      	strb	r2, [r3, #2]
	for (uint8_t i=0; i < led_length; i++)
 8000a34:	210f      	movs	r1, #15
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	3201      	adds	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	230f      	movs	r3, #15
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	2230      	movs	r2, #48	; 0x30
 8000a4a:	18ba      	adds	r2, r7, r2
 8000a4c:	8812      	ldrh	r2, [r2, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d8a7      	bhi.n	80009a2 <vu_effect+0x2a>
		}
	}
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b005      	add	sp, #20
 8000a5a:	bd90      	pop	{r4, r7, pc}

08000a5c <linear_a>:


// generate linear function, non float (divide by 100)
int32_t linear_a(uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	0005      	movs	r5, r0
 8000a64:	000c      	movs	r4, r1
 8000a66:	0010      	movs	r0, r2
 8000a68:	0019      	movs	r1, r3
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	1c2a      	adds	r2, r5, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	1c22      	adds	r2, r4, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	1d7b      	adds	r3, r7, #5
 8000a78:	1c02      	adds	r2, r0, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	1c0a      	adds	r2, r1, #0
 8000a80:	701a      	strb	r2, [r3, #0]
	int32_t val1 = y2;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]
	val1 -= y1;
 8000a88:	1d7b      	adds	r3, r7, #5
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	60fb      	str	r3, [r7, #12]

	int32_t val2 = x2;
 8000a92:	1dbb      	adds	r3, r7, #6
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	60bb      	str	r3, [r7, #8]
	x2 -= x1;
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	1db9      	adds	r1, r7, #6
 8000a9c:	1dfa      	adds	r2, r7, #7
 8000a9e:	7809      	ldrb	r1, [r1, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	1a8a      	subs	r2, r1, r2
 8000aa4:	701a      	strb	r2, [r3, #0]

	return (val1 * 100) / val2;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2264      	movs	r2, #100	; 0x64
 8000aaa:	4353      	muls	r3, r2
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f7ff fbb2 	bl	8000218 <__divsi3>
 8000ab4:	0003      	movs	r3, r0
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bdb0      	pop	{r4, r5, r7, pc}

08000abe <linear_b>:

// non float divide by 100
int32_t linear_b(int32_t a, uint8_t y1, uint8_t x1)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	0008      	movs	r0, r1
 8000ac8:	0011      	movs	r1, r2
 8000aca:	1cfb      	adds	r3, r7, #3
 8000acc:	1c02      	adds	r2, r0, #0
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	1cbb      	adds	r3, r7, #2
 8000ad2:	1c0a      	adds	r2, r1, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
	int32_t val1 = y1;
 8000ad6:	1cfb      	adds	r3, r7, #3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	60fb      	str	r3, [r7, #12]
	val1 *= 100;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2264      	movs	r2, #100	; 0x64
 8000ae0:	4353      	muls	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

	return val1 - (a*x1);
 8000ae4:	1cbb      	adds	r3, r7, #2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4353      	muls	r3, r2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	1ad3      	subs	r3, r2, r3
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b004      	add	sp, #16
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <eq_effect>:

void eq_effect(uint8_t led_array[][3], uint8_t r_a, uint8_t g_a, uint8_t b_a, uint8_t r_b, uint8_t g_b, uint8_t b_b,uint8_t data[7], uint8_t cut, uint16_t sensetive, uint16_t led_length)
{
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	000c      	movs	r4, r1
 8000b02:	0010      	movs	r0, r2
 8000b04:	0019      	movs	r1, r3
 8000b06:	1cfb      	adds	r3, r7, #3
 8000b08:	1c22      	adds	r2, r4, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	1cbb      	adds	r3, r7, #2
 8000b0e:	1c02      	adds	r2, r0, #0
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	1c7b      	adds	r3, r7, #1
 8000b14:	1c0a      	adds	r2, r1, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	uint8_t data_index = 0;
 8000b18:	2317      	movs	r3, #23
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i < led_length; )
 8000b20:	2316      	movs	r3, #22
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e0cf      	b.n	8000cca <eq_effect+0x1d2>
	{
		int32_t a = linear_a(i, i + 25, data[data_index], data[data_index+1]);
 8000b2a:	2016      	movs	r0, #22
 8000b2c:	183b      	adds	r3, r7, r0
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3319      	adds	r3, #25
 8000b32:	b2d9      	uxtb	r1, r3
 8000b34:	2517      	movs	r5, #23
 8000b36:	197b      	adds	r3, r7, r5
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b3c:	18d3      	adds	r3, r2, r3
 8000b3e:	781c      	ldrb	r4, [r3, #0]
 8000b40:	197b      	adds	r3, r7, r5
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	0006      	movs	r6, r0
 8000b4e:	183b      	adds	r3, r7, r0
 8000b50:	7818      	ldrb	r0, [r3, #0]
 8000b52:	0013      	movs	r3, r2
 8000b54:	0022      	movs	r2, r4
 8000b56:	f7ff ff81 	bl	8000a5c <linear_a>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	60fb      	str	r3, [r7, #12]
		int32_t b = linear_b(a, data[data_index], i);
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	7819      	ldrb	r1, [r3, #0]
 8000b68:	19bb      	adds	r3, r7, r6
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff ffa5 	bl	8000abe <linear_b>
 8000b74:	0003      	movs	r3, r0
 8000b76:	60bb      	str	r3, [r7, #8]
		data_index++;
 8000b78:	197b      	adds	r3, r7, r5
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	197b      	adds	r3, r7, r5
 8000b7e:	3201      	adds	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]

		if (data_index >= 6)
 8000b82:	197b      	adds	r3, r7, r5
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b05      	cmp	r3, #5
 8000b88:	d902      	bls.n	8000b90 <eq_effect+0x98>
			data_index = 0;
 8000b8a:	197b      	adds	r3, r7, r5
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

		for (uint8_t j=0; j < 25; j++)
 8000b90:	2315      	movs	r3, #21
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e091      	b.n	8000cbe <eq_effect+0x1c6>
		{
			if (((a*i + b) / 100) > cut)
 8000b9a:	2416      	movs	r4, #22
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	435a      	muls	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	18d3      	adds	r3, r2, r3
 8000ba8:	2164      	movs	r1, #100	; 0x64
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fb34 	bl	8000218 <__divsi3>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2338      	movs	r3, #56	; 0x38
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	185b      	adds	r3, r3, r1
 8000bba:	19db      	adds	r3, r3, r7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	dd4b      	ble.n	8000c5a <eq_effect+0x162>
			{
				uint32_t d = (a*i + b);
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	435a      	muls	r2, r3
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	18d3      	adds	r3, r2, r3
 8000bce:	613b      	str	r3, [r7, #16]
				d *= sensetive;
 8000bd0:	233c      	movs	r3, #60	; 0x3c
 8000bd2:	185b      	adds	r3, r3, r1
 8000bd4:	19db      	adds	r3, r3, r7
 8000bd6:	881a      	ldrh	r2, [r3, #0]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4353      	muls	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
				d /= 10000; // int to "float"
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4942      	ldr	r1, [pc, #264]	; (8000cec <eq_effect+0x1f4>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fa8e 	bl	8000104 <__udivsi3>
 8000be8:	0003      	movs	r3, r0
 8000bea:	613b      	str	r3, [r7, #16]

				if (d > 255)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d901      	bls.n	8000bf6 <eq_effect+0xfe>
					d = 255;
 8000bf2:	23ff      	movs	r3, #255	; 0xff
 8000bf4:	613b      	str	r3, [r7, #16]

				led_array[i][0] = map_color(d, r_a);
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	b2d8      	uxtb	r0, r3
 8000bfa:	2516      	movs	r5, #22
 8000bfc:	197b      	adds	r3, r7, r5
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	0013      	movs	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	189b      	adds	r3, r3, r2
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	18d4      	adds	r4, r2, r3
 8000c0a:	1cfb      	adds	r3, r7, #3
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0019      	movs	r1, r3
 8000c10:	f000 f886 	bl	8000d20 <map_color>
 8000c14:	0003      	movs	r3, r0
 8000c16:	7023      	strb	r3, [r4, #0]
				led_array[i][1] = map_color(d, g_a);;
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	b2d8      	uxtb	r0, r3
 8000c1c:	197b      	adds	r3, r7, r5
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	0013      	movs	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	189b      	adds	r3, r3, r2
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	18d4      	adds	r4, r2, r3
 8000c2a:	1cbb      	adds	r3, r7, #2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	0019      	movs	r1, r3
 8000c30:	f000 f876 	bl	8000d20 <map_color>
 8000c34:	0003      	movs	r3, r0
 8000c36:	7063      	strb	r3, [r4, #1]
				led_array[i][2] = map_color(d, b_a);;
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	0013      	movs	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	189b      	adds	r3, r3, r2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	18d4      	adds	r4, r2, r3
 8000c4a:	1c7b      	adds	r3, r7, #1
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0019      	movs	r1, r3
 8000c50:	f000 f866 	bl	8000d20 <map_color>
 8000c54:	0003      	movs	r3, r0
 8000c56:	70a3      	strb	r3, [r4, #2]
 8000c58:	e025      	b.n	8000ca6 <eq_effect+0x1ae>
			} else
			{
				led_array[i][0] = r_b;
 8000c5a:	2116      	movs	r1, #22
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	0013      	movs	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	189b      	adds	r3, r3, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	18d2      	adds	r2, r2, r3
 8000c6a:	2328      	movs	r3, #40	; 0x28
 8000c6c:	2008      	movs	r0, #8
 8000c6e:	181b      	adds	r3, r3, r0
 8000c70:	19db      	adds	r3, r3, r7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	7013      	strb	r3, [r2, #0]
				led_array[i][1] = g_b;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	189b      	adds	r3, r3, r2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	18d3      	adds	r3, r2, r3
 8000c84:	222c      	movs	r2, #44	; 0x2c
 8000c86:	1812      	adds	r2, r2, r0
 8000c88:	19d2      	adds	r2, r2, r7
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	705a      	strb	r2, [r3, #1]
				led_array[i][2] = b_b;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	0013      	movs	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	189b      	adds	r3, r3, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	2230      	movs	r2, #48	; 0x30
 8000c9e:	1812      	adds	r2, r2, r0
 8000ca0:	19d2      	adds	r2, r2, r7
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	709a      	strb	r2, [r3, #2]
			}

			i++;
 8000ca6:	2116      	movs	r1, #22
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	3201      	adds	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
		for (uint8_t j=0; j < 25; j++)
 8000cb2:	2115      	movs	r1, #21
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	3201      	adds	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	2315      	movs	r3, #21
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b18      	cmp	r3, #24
 8000cc6:	d800      	bhi.n	8000cca <eq_effect+0x1d2>
 8000cc8:	e767      	b.n	8000b9a <eq_effect+0xa2>
	for (uint8_t i=0; i < led_length; )
 8000cca:	2316      	movs	r3, #22
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	2240      	movs	r2, #64	; 0x40
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	1852      	adds	r2, r2, r1
 8000cd8:	19d2      	adds	r2, r2, r7
 8000cda:	8812      	ldrh	r2, [r2, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d900      	bls.n	8000ce2 <eq_effect+0x1ea>
 8000ce0:	e723      	b.n	8000b2a <eq_effect+0x32>
		}

	}
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b007      	add	sp, #28
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	00002710 	.word	0x00002710

08000cf0 <map>:
/**
 * x - oryginal value
 * y - 0 - 100 - brightness percentage
 */
uint8_t map(uint8_t x, uint8_t y)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	1dbb      	adds	r3, r7, #6
 8000cfe:	1c0a      	adds	r2, r1, #0
 8000d00:	701a      	strb	r2, [r3, #0]
	return (x * y) / 100;
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	1dba      	adds	r2, r7, #6
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	4353      	muls	r3, r2
 8000d0c:	2164      	movs	r1, #100	; 0x64
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff fa82 	bl	8000218 <__divsi3>
 8000d14:	0003      	movs	r3, r0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <map_color>:
/**
 * x - oryginal value
 * y 0 - 255 - color value
 */
uint8_t map_color(uint8_t x, uint8_t y)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	1dbb      	adds	r3, r7, #6
 8000d2e:	1c0a      	adds	r2, r1, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	return (x * y) / 255;
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	1dba      	adds	r2, r7, #6
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	4353      	muls	r3, r2
 8000d3c:	21ff      	movs	r1, #255	; 0xff
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff fa6a 	bl	8000218 <__divsi3>
 8000d44:	0003      	movs	r3, r0
 8000d46:	b2db      	uxtb	r3, r3
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <colorPixel>:
#include "ULP_ws2812b.h"

uint16_t colorPixel(uint8_t r, uint8_t g, uint8_t b, uint8_t buffer[], uint16_t offset)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	0004      	movs	r4, r0
 8000d58:	0008      	movs	r0, r1
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	1c22      	adds	r2, r4, #0
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	1c02      	adds	r2, r0, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	1d7b      	adds	r3, r7, #5
 8000d6c:	1c0a      	adds	r2, r1, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	uint8_t j;

	// green color
	j = 7;
 8000d70:	230f      	movs	r3, #15
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2207      	movs	r2, #7
 8000d76:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 128; i >= 1; i /= 2)
 8000d78:	230e      	movs	r3, #14
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	e027      	b.n	8000dd2 <colorPixel+0x82>
	{
		buffer[offset++] = (((g & i) >> j) == 1 ? MAX_LED_VALUE : MIN_LED_VALUE);
 8000d82:	1dbb      	adds	r3, r7, #6
 8000d84:	220e      	movs	r2, #14
 8000d86:	18ba      	adds	r2, r7, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	001a      	movs	r2, r3
 8000d92:	230f      	movs	r3, #15
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	411a      	asrs	r2, r3
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d101      	bne.n	8000da4 <colorPixel+0x54>
 8000da0:	2135      	movs	r1, #53	; 0x35
 8000da2:	e000      	b.n	8000da6 <colorPixel+0x56>
 8000da4:	211b      	movs	r1, #27
 8000da6:	2020      	movs	r0, #32
 8000da8:	183b      	adds	r3, r7, r0
 8000daa:	881a      	ldrh	r2, [r3, #0]
 8000dac:	183b      	adds	r3, r7, r0
 8000dae:	1c50      	adds	r0, r2, #1
 8000db0:	8018      	strh	r0, [r3, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	189b      	adds	r3, r3, r2
 8000db6:	1c0a      	adds	r2, r1, #0
 8000db8:	701a      	strb	r2, [r3, #0]
	    j -= 1;
 8000dba:	220f      	movs	r2, #15
 8000dbc:	18bb      	adds	r3, r7, r2
 8000dbe:	18ba      	adds	r2, r7, r2
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 128; i >= 1; i /= 2)
 8000dc6:	220e      	movs	r2, #14
 8000dc8:	18bb      	adds	r3, r7, r2
 8000dca:	18ba      	adds	r2, r7, r2
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	0852      	lsrs	r2, r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	230e      	movs	r3, #14
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1d2      	bne.n	8000d82 <colorPixel+0x32>
	}

	// red color
	j = 7;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2207      	movs	r2, #7
 8000de2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 128; i >= 1; i /= 2)
 8000de4:	230d      	movs	r3, #13
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e027      	b.n	8000e3e <colorPixel+0xee>
	{
		buffer[offset++] = (((r & i) >> j) == 1 ? MAX_LED_VALUE : MIN_LED_VALUE);
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	220d      	movs	r2, #13
 8000df2:	18ba      	adds	r2, r7, r2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	230f      	movs	r3, #15
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	411a      	asrs	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <colorPixel+0xc0>
 8000e0c:	2135      	movs	r1, #53	; 0x35
 8000e0e:	e000      	b.n	8000e12 <colorPixel+0xc2>
 8000e10:	211b      	movs	r1, #27
 8000e12:	2020      	movs	r0, #32
 8000e14:	183b      	adds	r3, r7, r0
 8000e16:	881a      	ldrh	r2, [r3, #0]
 8000e18:	183b      	adds	r3, r7, r0
 8000e1a:	1c50      	adds	r0, r2, #1
 8000e1c:	8018      	strh	r0, [r3, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	189b      	adds	r3, r3, r2
 8000e22:	1c0a      	adds	r2, r1, #0
 8000e24:	701a      	strb	r2, [r3, #0]
		j -= 1;
 8000e26:	220f      	movs	r2, #15
 8000e28:	18bb      	adds	r3, r7, r2
 8000e2a:	18ba      	adds	r2, r7, r2
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	3a01      	subs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 128; i >= 1; i /= 2)
 8000e32:	220d      	movs	r2, #13
 8000e34:	18bb      	adds	r3, r7, r2
 8000e36:	18ba      	adds	r2, r7, r2
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	0852      	lsrs	r2, r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	230d      	movs	r3, #13
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1d2      	bne.n	8000dee <colorPixel+0x9e>
	}

	// blue color
	j = 7;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 128; i >= 1; i /= 2)
 8000e50:	230c      	movs	r3, #12
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	e027      	b.n	8000eaa <colorPixel+0x15a>
	{
		buffer[offset++] = (((b & i) >> j) == 1 ? MAX_LED_VALUE : MIN_LED_VALUE);
 8000e5a:	1d7b      	adds	r3, r7, #5
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	18ba      	adds	r2, r7, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	4013      	ands	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	001a      	movs	r2, r3
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	411a      	asrs	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <colorPixel+0x12c>
 8000e78:	2135      	movs	r1, #53	; 0x35
 8000e7a:	e000      	b.n	8000e7e <colorPixel+0x12e>
 8000e7c:	211b      	movs	r1, #27
 8000e7e:	2020      	movs	r0, #32
 8000e80:	183b      	adds	r3, r7, r0
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	183b      	adds	r3, r7, r0
 8000e86:	1c50      	adds	r0, r2, #1
 8000e88:	8018      	strh	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	1c0a      	adds	r2, r1, #0
 8000e90:	701a      	strb	r2, [r3, #0]
		j -= 1;
 8000e92:	220f      	movs	r2, #15
 8000e94:	18bb      	adds	r3, r7, r2
 8000e96:	18ba      	adds	r2, r7, r2
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	3a01      	subs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 128; i >= 1; i /= 2)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	18bb      	adds	r3, r7, r2
 8000ea2:	18ba      	adds	r2, r7, r2
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	0852      	lsrs	r2, r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	230c      	movs	r3, #12
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1d2      	bne.n	8000e5a <colorPixel+0x10a>
	}

	// return first index value for next pixel
	return offset;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	881b      	ldrh	r3, [r3, #0]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b005      	add	sp, #20
 8000ec0:	bd90      	pop	{r4, r7, pc}

08000ec2 <convert_brightness>:

uint8_t convert_brightness(uint8_t color, uint8_t b) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	0002      	movs	r2, r0
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	1dbb      	adds	r3, r7, #6
 8000ed0:	1c0a      	adds	r2, r1, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
	uint16_t temp = color * b;
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	1dbb      	adds	r3, r7, #6
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b299      	uxth	r1, r3
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	183b      	adds	r3, r7, r0
 8000ee4:	434a      	muls	r2, r1
 8000ee6:	801a      	strh	r2, [r3, #0]
	return (uint8_t)(temp / 255);
 8000ee8:	183b      	adds	r3, r7, r0
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	21ff      	movs	r1, #255	; 0xff
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff f908 	bl	8000104 <__udivsi3>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <color_array_to_pixels>:
 * color_arr[number pixel][r, g, b] - color array
 * pixel_array[] - pixel buffer to send. Length array: (24 * length strip + 44 (reset time) + 1(stop flag))
 * brightness 0 to 255
 */
void color_array_to_pixels(uint8_t color_arr[][3], uint8_t pixel_buffer[], uint16_t led_length, uint8_t brightness)
{
 8000f02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f04:	b089      	sub	sp, #36	; 0x24
 8000f06:	af02      	add	r7, sp, #8
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	1dbb      	adds	r3, r7, #6
 8000f10:	801a      	strh	r2, [r3, #0]
 8000f12:	1d7b      	adds	r3, r7, #5
 8000f14:	1c0a      	adds	r2, r1, #0
 8000f16:	701a      	strb	r2, [r3, #0]
	uint16_t indx_pixel_array = 0;
 8000f18:	2316      	movs	r3, #22
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	801a      	strh	r2, [r3, #0]

	for (uint16_t i=0; i < led_length; i++)
 8000f20:	2314      	movs	r3, #20
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	e044      	b.n	8000fb4 <color_array_to_pixels+0xb2>
		indx_pixel_array = colorPixel(convert_brightness(color_arr[i][0], brightness), convert_brightness(color_arr[i][1], brightness), convert_brightness(color_arr[i][2], brightness), pixel_buffer, indx_pixel_array);
 8000f2a:	2414      	movs	r4, #20
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	881a      	ldrh	r2, [r3, #0]
 8000f30:	0013      	movs	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	189b      	adds	r3, r3, r2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	1d7b      	adds	r3, r7, #5
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	0019      	movs	r1, r3
 8000f42:	0010      	movs	r0, r2
 8000f44:	f7ff ffbd 	bl	8000ec2 <convert_brightness>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	001d      	movs	r5, r3
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	0013      	movs	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	189b      	adds	r3, r3, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	18d3      	adds	r3, r2, r3
 8000f5a:	785a      	ldrb	r2, [r3, #1]
 8000f5c:	1d7b      	adds	r3, r7, #5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	0019      	movs	r1, r3
 8000f62:	0010      	movs	r0, r2
 8000f64:	f7ff ffad 	bl	8000ec2 <convert_brightness>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001e      	movs	r6, r3
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	881a      	ldrh	r2, [r3, #0]
 8000f70:	0013      	movs	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	189b      	adds	r3, r3, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	789a      	ldrb	r2, [r3, #2]
 8000f7c:	1d7b      	adds	r3, r7, #5
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	0019      	movs	r1, r3
 8000f82:	0010      	movs	r0, r2
 8000f84:	f7ff ff9d 	bl	8000ec2 <convert_brightness>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	2316      	movs	r3, #22
 8000f8e:	18fc      	adds	r4, r7, r3
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	0013      	movs	r3, r2
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	0031      	movs	r1, r6
 8000f9e:	0028      	movs	r0, r5
 8000fa0:	f7ff fed6 	bl	8000d50 <colorPixel>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	8023      	strh	r3, [r4, #0]
	for (uint16_t i=0; i < led_length; i++)
 8000fa8:	2414      	movs	r4, #20
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	3201      	adds	r2, #1
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	2314      	movs	r3, #20
 8000fb6:	18fa      	adds	r2, r7, r3
 8000fb8:	1dbb      	adds	r3, r7, #6
 8000fba:	8812      	ldrh	r2, [r2, #0]
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3b3      	bcc.n	8000f2a <color_array_to_pixels+0x28>

	for (uint8_t i=0; i < 45; i++)
 8000fc2:	2313      	movs	r3, #19
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e010      	b.n	8000fee <color_array_to_pixels+0xec>
		pixel_buffer[indx_pixel_array++] = 0;
 8000fcc:	2216      	movs	r2, #22
 8000fce:	18bb      	adds	r3, r7, r2
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	18ba      	adds	r2, r7, r2
 8000fd4:	1c59      	adds	r1, r3, #1
 8000fd6:	8011      	strh	r1, [r2, #0]
 8000fd8:	001a      	movs	r2, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	189b      	adds	r3, r3, r2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i < 45; i++)
 8000fe2:	2113      	movs	r1, #19
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	3201      	adds	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	2313      	movs	r3, #19
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b2c      	cmp	r3, #44	; 0x2c
 8000ff6:	d9e9      	bls.n	8000fcc <color_array_to_pixels+0xca>
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b007      	add	sp, #28
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001002 <set_color_strip>:

/**
 * set one color on strip
 */
void set_color_strip(uint8_t color_arr[][3], uint8_t r, uint8_t g, uint8_t b, uint16_t length)
{
 8001002:	b590      	push	{r4, r7, lr}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	000c      	movs	r4, r1
 800100c:	0010      	movs	r0, r2
 800100e:	0019      	movs	r1, r3
 8001010:	1cfb      	adds	r3, r7, #3
 8001012:	1c22      	adds	r2, r4, #0
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	1cbb      	adds	r3, r7, #2
 8001018:	1c02      	adds	r2, r0, #0
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	1c7b      	adds	r3, r7, #1
 800101e:	1c0a      	adds	r2, r1, #0
 8001020:	701a      	strb	r2, [r3, #0]
	for (uint16_t i=0; i < length; i++)
 8001022:	230e      	movs	r3, #14
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	e023      	b.n	8001074 <set_color_strip+0x72>
	{
		color_arr[i][0] = r;
 800102c:	210e      	movs	r1, #14
 800102e:	187b      	adds	r3, r7, r1
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	0013      	movs	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	189b      	adds	r3, r3, r2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	1cfa      	adds	r2, r7, #3
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	701a      	strb	r2, [r3, #0]
		color_arr[i][1] = g;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	0013      	movs	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	189b      	adds	r3, r3, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	18d3      	adds	r3, r2, r3
 8001050:	1cba      	adds	r2, r7, #2
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	705a      	strb	r2, [r3, #1]
		color_arr[i][2] = b;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	881a      	ldrh	r2, [r3, #0]
 800105a:	0013      	movs	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	189b      	adds	r3, r3, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	18d3      	adds	r3, r2, r3
 8001064:	1c7a      	adds	r2, r7, #1
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	709a      	strb	r2, [r3, #2]
	for (uint16_t i=0; i < length; i++)
 800106a:	187b      	adds	r3, r7, r1
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	187b      	adds	r3, r7, r1
 8001070:	3201      	adds	r2, #1
 8001072:	801a      	strh	r2, [r3, #0]
 8001074:	230e      	movs	r3, #14
 8001076:	18fa      	adds	r2, r7, r3
 8001078:	2320      	movs	r3, #32
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	8812      	ldrh	r2, [r2, #0]
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3d3      	bcc.n	800102c <set_color_strip+0x2a>
	}
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b005      	add	sp, #20
 800108c:	bd90      	pop	{r4, r7, pc}

0800108e <clear_led_strip>:

void clear_led_strip(uint8_t color_arr[][3], uint16_t length)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af02      	add	r7, sp, #8
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	000a      	movs	r2, r1
 8001098:	1cbb      	adds	r3, r7, #2
 800109a:	801a      	strh	r2, [r3, #0]
	set_color_strip(color_arr, 0, 0, 0, length);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	1cbb      	adds	r3, r7, #2
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	f7ff ffaa 	bl	8001002 <set_color_strip>
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <set_color>:

void set_color(uint8_t color_arr[][3], uint16_t led, uint8_t r, uint8_t g, uint8_t b)
{
 80010b6:	b590      	push	{r4, r7, lr}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	000c      	movs	r4, r1
 80010c0:	0010      	movs	r0, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	1cbb      	adds	r3, r7, #2
 80010c6:	1c22      	adds	r2, r4, #0
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	1c7b      	adds	r3, r7, #1
 80010cc:	1c02      	adds	r2, r0, #0
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	003b      	movs	r3, r7
 80010d2:	1c0a      	adds	r2, r1, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	color_arr[led][0] = r;
 80010d6:	1cbb      	adds	r3, r7, #2
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	0013      	movs	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	189b      	adds	r3, r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	1c7a      	adds	r2, r7, #1
 80010e6:	7812      	ldrb	r2, [r2, #0]
 80010e8:	701a      	strb	r2, [r3, #0]
	color_arr[led][1] = g;
 80010ea:	1cbb      	adds	r3, r7, #2
 80010ec:	881a      	ldrh	r2, [r3, #0]
 80010ee:	0013      	movs	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	189b      	adds	r3, r3, r2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	18d3      	adds	r3, r2, r3
 80010f8:	003a      	movs	r2, r7
 80010fa:	7812      	ldrb	r2, [r2, #0]
 80010fc:	705a      	strb	r2, [r3, #1]
	color_arr[led][2] = b;
 80010fe:	1cbb      	adds	r3, r7, #2
 8001100:	881a      	ldrh	r2, [r3, #0]
 8001102:	0013      	movs	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	189b      	adds	r3, r3, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	18d2      	adds	r2, r2, r3
 800110c:	2318      	movs	r3, #24
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	7093      	strb	r3, [r2, #2]
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b003      	add	sp, #12
 800111a:	bd90      	pop	{r4, r7, pc}

0800111c <buffer_size>:

/**
 * return buffer size, input number pixel
 */
uint16_t buffer_size(uint16_t led_count)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	1dbb      	adds	r3, r7, #6
 8001126:	801a      	strh	r2, [r3, #0]
	// 24bit color + 44 bit reset time + 1bit null for stop pwm
	return (led_count * 24) + 45;
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2218      	movs	r2, #24
 800112e:	4353      	muls	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	332d      	adds	r3, #45	; 0x2d
 8001134:	b29b      	uxth	r3, r3
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_DMA_Init+0x58>)
 8001148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_DMA_Init+0x58>)
 800114c:	2101      	movs	r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_DMA_Init+0x58>)
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2009      	movs	r0, #9
 8001164:	f001 fad4 	bl	8002710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001168:	2009      	movs	r0, #9
 800116a:	f001 fae6 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	200a      	movs	r0, #10
 8001174:	f001 facc 	bl	8002710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001178:	200a      	movs	r0, #10
 800117a:	f001 fade 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	200b      	movs	r0, #11
 8001184:	f001 fac4 	bl	8002710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8001188:	200b      	movs	r0, #11
 800118a:	f001 fad6 	bl	800273a <HAL_NVIC_EnableIRQ>

}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40021000 	.word	0x40021000

0800119c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b08b      	sub	sp, #44	; 0x2c
 80011a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	2414      	movs	r4, #20
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	0018      	movs	r0, r3
 80011a8:	2314      	movs	r3, #20
 80011aa:	001a      	movs	r2, r3
 80011ac:	2100      	movs	r1, #0
 80011ae:	f006 fc61 	bl	8007a74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011b8:	2104      	movs	r1, #4
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c2:	2204      	movs	r2, #4
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011d0:	2120      	movs	r1, #32
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011da:	2220      	movs	r2, #32
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	2201      	movs	r2, #1
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <MX_GPIO_Init+0x104>)
 80011fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_GPIO_Init+0x104>)
 8001200:	2108      	movs	r1, #8
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MX_GPIO_Init+0x104>)
 8001208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120a:	2208      	movs	r2, #8
 800120c:	4013      	ands	r3, r2
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	0018      	movs	r0, r3
 800121c:	f001 ff2c 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <MX_GPIO_Init+0x108>)
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	0018      	movs	r0, r3
 8001228:	f001 ff26 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	0192      	lsls	r2, r2, #6
 8001232:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	193b      	adds	r3, r7, r4
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	193b      	adds	r3, r7, r4
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001240:	193b      	adds	r3, r7, r4
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <MX_GPIO_Init+0x10c>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f001 fdb2 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800124c:	193b      	adds	r3, r7, r4
 800124e:	2220      	movs	r2, #32
 8001250:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	193b      	adds	r3, r7, r4
 8001254:	2201      	movs	r2, #1
 8001256:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	193b      	adds	r3, r7, r4
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	193b      	adds	r3, r7, r4
 8001260:	2202      	movs	r2, #2
 8001262:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001264:	193a      	adds	r2, r7, r4
 8001266:	23a0      	movs	r3, #160	; 0xa0
 8001268:	05db      	lsls	r3, r3, #23
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f001 fd9f 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8001272:	0021      	movs	r1, r4
 8001274:	187b      	adds	r3, r7, r1
 8001276:	2204      	movs	r2, #4
 8001278:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2201      	movs	r2, #1
 800127e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 800128c:	187b      	adds	r3, r7, r1
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <MX_GPIO_Init+0x108>)
 8001290:	0019      	movs	r1, r3
 8001292:	0010      	movs	r0, r2
 8001294:	f001 fd8c 	bl	8002db0 <HAL_GPIO_Init>

}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b00b      	add	sp, #44	; 0x2c
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	50000c00 	.word	0x50000c00
 80012a8:	50000800 	.word	0x50000800

080012ac <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t eq_data[7] = {0, 0, 0, 0, 0, 0, 0};
uint8_t eq_cut[3] = {0,0,0};
uint16_t eq_sensetive[3] = {100,100,100};

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // A
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7f1b      	ldrb	r3, [r3, #28]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d108      	bne.n	80012ce <HAL_TIM_PWM_PulseFinishedCallback+0x22>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2104      	movs	r1, #4
 80012c0:	0018      	movs	r0, r3
 80012c2:	f003 f8cb 	bl	800445c <HAL_TIM_PWM_Stop_DMA>
		dma_flag[0] = 1;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
		dma_flag[2] = 1;
	}

}
 80012cc:	e018      	b.n	8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // B
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7f1b      	ldrb	r3, [r3, #28]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d108      	bne.n	80012e8 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2108      	movs	r1, #8
 80012da:	0018      	movs	r0, r3
 80012dc:	f003 f8be 	bl	800445c <HAL_TIM_PWM_Stop_DMA>
		dma_flag[1] = 1;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	705a      	strb	r2, [r3, #1]
}
 80012e6:	e00b      	b.n	8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // C
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7f1b      	ldrb	r3, [r3, #28]
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d107      	bne.n	8001300 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	210c      	movs	r1, #12
 80012f4:	0018      	movs	r0, r3
 80012f6:	f003 f8b1 	bl	800445c <HAL_TIM_PWM_Stop_DMA>
		dma_flag[2] = 1;
 80012fa:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	709a      	strb	r2, [r3, #2]
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	// application
	if (huart == &huart1)
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4bbd      	ldr	r3, [pc, #756]	; (800160c <HAL_UART_RxCpltCallback+0x300>)
 8001318:	429a      	cmp	r2, r3
 800131a:	d000      	beq.n	800131e <HAL_UART_RxCpltCallback+0x12>
 800131c:	e168      	b.n	80015f0 <HAL_UART_RxCpltCallback+0x2e4>
	{
		if (application_buffer[0] == 'd' && application_buffer[1] == 'c' && application_buffer[2] == '_')
 800131e:	4bbc      	ldr	r3, [pc, #752]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d133      	bne.n	800138e <HAL_UART_RxCpltCallback+0x82>
 8001326:	4bba      	ldr	r3, [pc, #744]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	2b63      	cmp	r3, #99	; 0x63
 800132c:	d12f      	bne.n	800138e <HAL_UART_RxCpltCallback+0x82>
 800132e:	4bb8      	ldr	r3, [pc, #736]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	2b5f      	cmp	r3, #95	; 0x5f
 8001334:	d12b      	bne.n	800138e <HAL_UART_RxCpltCallback+0x82>
		{
			main_color[application_buffer[3]].r = application_buffer[4];
 8001336:	4bb6      	ldr	r3, [pc, #728]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001338:	78db      	ldrb	r3, [r3, #3]
 800133a:	0019      	movs	r1, r3
 800133c:	4bb4      	ldr	r3, [pc, #720]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800133e:	7918      	ldrb	r0, [r3, #4]
 8001340:	4ab4      	ldr	r2, [pc, #720]	; (8001614 <HAL_UART_RxCpltCallback+0x308>)
 8001342:	000b      	movs	r3, r1
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	185b      	adds	r3, r3, r1
 8001348:	1c01      	adds	r1, r0, #0
 800134a:	5499      	strb	r1, [r3, r2]
			main_color[application_buffer[3]].g = application_buffer[5];
 800134c:	4bb0      	ldr	r3, [pc, #704]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800134e:	78db      	ldrb	r3, [r3, #3]
 8001350:	0019      	movs	r1, r3
 8001352:	4baf      	ldr	r3, [pc, #700]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001354:	7958      	ldrb	r0, [r3, #5]
 8001356:	4aaf      	ldr	r2, [pc, #700]	; (8001614 <HAL_UART_RxCpltCallback+0x308>)
 8001358:	000b      	movs	r3, r1
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	185b      	adds	r3, r3, r1
 800135e:	18d3      	adds	r3, r2, r3
 8001360:	3301      	adds	r3, #1
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	701a      	strb	r2, [r3, #0]
			main_color[application_buffer[3]].b = application_buffer[6];
 8001366:	4baa      	ldr	r3, [pc, #680]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001368:	78db      	ldrb	r3, [r3, #3]
 800136a:	0019      	movs	r1, r3
 800136c:	4ba8      	ldr	r3, [pc, #672]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800136e:	7998      	ldrb	r0, [r3, #6]
 8001370:	4aa8      	ldr	r2, [pc, #672]	; (8001614 <HAL_UART_RxCpltCallback+0x308>)
 8001372:	000b      	movs	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	185b      	adds	r3, r3, r1
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	3302      	adds	r3, #2
 800137c:	1c02      	adds	r2, r0, #0
 800137e:	701a      	strb	r2, [r3, #0]
			channel_flag[application_buffer[3]] = 1;
 8001380:	4ba3      	ldr	r3, [pc, #652]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001382:	78db      	ldrb	r3, [r3, #3]
 8001384:	001a      	movs	r2, r3
 8001386:	4ba4      	ldr	r3, [pc, #656]	; (8001618 <HAL_UART_RxCpltCallback+0x30c>)
 8001388:	2101      	movs	r1, #1
 800138a:	5499      	strb	r1, [r3, r2]
 800138c:	e12a      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'd' && application_buffer[1] == 'b' && application_buffer[2] == '_')
 800138e:	4ba0      	ldr	r3, [pc, #640]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d115      	bne.n	80013c2 <HAL_UART_RxCpltCallback+0xb6>
 8001396:	4b9e      	ldr	r3, [pc, #632]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	2b62      	cmp	r3, #98	; 0x62
 800139c:	d111      	bne.n	80013c2 <HAL_UART_RxCpltCallback+0xb6>
 800139e:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013a0:	789b      	ldrb	r3, [r3, #2]
 80013a2:	2b5f      	cmp	r3, #95	; 0x5f
 80013a4:	d10d      	bne.n	80013c2 <HAL_UART_RxCpltCallback+0xb6>
		{
			brightness[application_buffer[3]] = application_buffer[4];
 80013a6:	4b9a      	ldr	r3, [pc, #616]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	001a      	movs	r2, r3
 80013ac:	4b98      	ldr	r3, [pc, #608]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013ae:	7919      	ldrb	r1, [r3, #4]
 80013b0:	4b9a      	ldr	r3, [pc, #616]	; (800161c <HAL_UART_RxCpltCallback+0x310>)
 80013b2:	5499      	strb	r1, [r3, r2]
			channel_flag[application_buffer[3]] = 1;
 80013b4:	4b96      	ldr	r3, [pc, #600]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	001a      	movs	r2, r3
 80013ba:	4b97      	ldr	r3, [pc, #604]	; (8001618 <HAL_UART_RxCpltCallback+0x30c>)
 80013bc:	2101      	movs	r1, #1
 80013be:	5499      	strb	r1, [r3, r2]
 80013c0:	e110      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'v' && application_buffer[1] == 'u' && application_buffer[2] == 'a')
 80013c2:	4b93      	ldr	r3, [pc, #588]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b76      	cmp	r3, #118	; 0x76
 80013c8:	d133      	bne.n	8001432 <HAL_UART_RxCpltCallback+0x126>
 80013ca:	4b91      	ldr	r3, [pc, #580]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	2b75      	cmp	r3, #117	; 0x75
 80013d0:	d12f      	bne.n	8001432 <HAL_UART_RxCpltCallback+0x126>
 80013d2:	4b8f      	ldr	r3, [pc, #572]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	2b61      	cmp	r3, #97	; 0x61
 80013d8:	d12b      	bne.n	8001432 <HAL_UART_RxCpltCallback+0x126>
		{
			vu_color_a[application_buffer[3]].r = application_buffer[4];
 80013da:	4b8d      	ldr	r3, [pc, #564]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013dc:	78db      	ldrb	r3, [r3, #3]
 80013de:	0019      	movs	r1, r3
 80013e0:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013e2:	7918      	ldrb	r0, [r3, #4]
 80013e4:	4a8e      	ldr	r2, [pc, #568]	; (8001620 <HAL_UART_RxCpltCallback+0x314>)
 80013e6:	000b      	movs	r3, r1
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	185b      	adds	r3, r3, r1
 80013ec:	1c01      	adds	r1, r0, #0
 80013ee:	5499      	strb	r1, [r3, r2]
			vu_color_a[application_buffer[3]].g = application_buffer[5];
 80013f0:	4b87      	ldr	r3, [pc, #540]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013f2:	78db      	ldrb	r3, [r3, #3]
 80013f4:	0019      	movs	r1, r3
 80013f6:	4b86      	ldr	r3, [pc, #536]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80013f8:	7958      	ldrb	r0, [r3, #5]
 80013fa:	4a89      	ldr	r2, [pc, #548]	; (8001620 <HAL_UART_RxCpltCallback+0x314>)
 80013fc:	000b      	movs	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	185b      	adds	r3, r3, r1
 8001402:	18d3      	adds	r3, r2, r3
 8001404:	3301      	adds	r3, #1
 8001406:	1c02      	adds	r2, r0, #0
 8001408:	701a      	strb	r2, [r3, #0]
			vu_color_a[application_buffer[3]].b = application_buffer[6];
 800140a:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	0019      	movs	r1, r3
 8001410:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001412:	7998      	ldrb	r0, [r3, #6]
 8001414:	4a82      	ldr	r2, [pc, #520]	; (8001620 <HAL_UART_RxCpltCallback+0x314>)
 8001416:	000b      	movs	r3, r1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	185b      	adds	r3, r3, r1
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	3302      	adds	r3, #2
 8001420:	1c02      	adds	r2, r0, #0
 8001422:	701a      	strb	r2, [r3, #0]
			vu_flag[application_buffer[3]] = 1;
 8001424:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	001a      	movs	r2, r3
 800142a:	4b7e      	ldr	r3, [pc, #504]	; (8001624 <HAL_UART_RxCpltCallback+0x318>)
 800142c:	2101      	movs	r1, #1
 800142e:	5499      	strb	r1, [r3, r2]
 8001430:	e0d8      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'v' && application_buffer[1] == 'u' && application_buffer[2] == 'b')
 8001432:	4b77      	ldr	r3, [pc, #476]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b76      	cmp	r3, #118	; 0x76
 8001438:	d133      	bne.n	80014a2 <HAL_UART_RxCpltCallback+0x196>
 800143a:	4b75      	ldr	r3, [pc, #468]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	2b75      	cmp	r3, #117	; 0x75
 8001440:	d12f      	bne.n	80014a2 <HAL_UART_RxCpltCallback+0x196>
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001444:	789b      	ldrb	r3, [r3, #2]
 8001446:	2b62      	cmp	r3, #98	; 0x62
 8001448:	d12b      	bne.n	80014a2 <HAL_UART_RxCpltCallback+0x196>
		{
			vu_color_b[application_buffer[3]].r = application_buffer[4];
 800144a:	4b71      	ldr	r3, [pc, #452]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800144c:	78db      	ldrb	r3, [r3, #3]
 800144e:	0019      	movs	r1, r3
 8001450:	4b6f      	ldr	r3, [pc, #444]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001452:	7918      	ldrb	r0, [r3, #4]
 8001454:	4a74      	ldr	r2, [pc, #464]	; (8001628 <HAL_UART_RxCpltCallback+0x31c>)
 8001456:	000b      	movs	r3, r1
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	185b      	adds	r3, r3, r1
 800145c:	1c01      	adds	r1, r0, #0
 800145e:	5499      	strb	r1, [r3, r2]
			vu_color_b[application_buffer[3]].g = application_buffer[5];
 8001460:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001462:	78db      	ldrb	r3, [r3, #3]
 8001464:	0019      	movs	r1, r3
 8001466:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001468:	7958      	ldrb	r0, [r3, #5]
 800146a:	4a6f      	ldr	r2, [pc, #444]	; (8001628 <HAL_UART_RxCpltCallback+0x31c>)
 800146c:	000b      	movs	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	185b      	adds	r3, r3, r1
 8001472:	18d3      	adds	r3, r2, r3
 8001474:	3301      	adds	r3, #1
 8001476:	1c02      	adds	r2, r0, #0
 8001478:	701a      	strb	r2, [r3, #0]
			vu_color_b[application_buffer[3]].b = application_buffer[6];
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800147c:	78db      	ldrb	r3, [r3, #3]
 800147e:	0019      	movs	r1, r3
 8001480:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001482:	7998      	ldrb	r0, [r3, #6]
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_UART_RxCpltCallback+0x31c>)
 8001486:	000b      	movs	r3, r1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	185b      	adds	r3, r3, r1
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	3302      	adds	r3, #2
 8001490:	1c02      	adds	r2, r0, #0
 8001492:	701a      	strb	r2, [r3, #0]
			vu_flag[application_buffer[3]] = 1;
 8001494:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001496:	78db      	ldrb	r3, [r3, #3]
 8001498:	001a      	movs	r2, r3
 800149a:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_UART_RxCpltCallback+0x318>)
 800149c:	2101      	movs	r1, #1
 800149e:	5499      	strb	r1, [r3, r2]
 80014a0:	e0a0      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'd' && application_buffer[1] == 's' && application_buffer[2] == '_')
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d10f      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1be>
 80014aa:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	2b73      	cmp	r3, #115	; 0x73
 80014b0:	d10b      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1be>
 80014b2:	4b57      	ldr	r3, [pc, #348]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	2b5f      	cmp	r3, #95	; 0x5f
 80014b8:	d107      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1be>
		{
			channel_effect[application_buffer[3]] = application_buffer[4];
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	001a      	movs	r2, r3
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014c2:	7919      	ldrb	r1, [r3, #4]
 80014c4:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_UART_RxCpltCallback+0x320>)
 80014c6:	5499      	strb	r1, [r3, r2]
 80014c8:	e08c      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'e' && application_buffer[1] == 'q' && application_buffer[2] == 'c')
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b65      	cmp	r3, #101	; 0x65
 80014d0:	d10f      	bne.n	80014f2 <HAL_UART_RxCpltCallback+0x1e6>
 80014d2:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	2b71      	cmp	r3, #113	; 0x71
 80014d8:	d10b      	bne.n	80014f2 <HAL_UART_RxCpltCallback+0x1e6>
 80014da:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014dc:	789b      	ldrb	r3, [r3, #2]
 80014de:	2b63      	cmp	r3, #99	; 0x63
 80014e0:	d107      	bne.n	80014f2 <HAL_UART_RxCpltCallback+0x1e6>
		{
			eq_cut[application_buffer[3]] = application_buffer[4];
 80014e2:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	001a      	movs	r2, r3
 80014e8:	4b49      	ldr	r3, [pc, #292]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014ea:	7919      	ldrb	r1, [r3, #4]
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_UART_RxCpltCallback+0x324>)
 80014ee:	5499      	strb	r1, [r3, r2]
 80014f0:	e078      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'e' && application_buffer[1] == 'q' && application_buffer[2] == 'g')
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b65      	cmp	r3, #101	; 0x65
 80014f8:	d111      	bne.n	800151e <HAL_UART_RxCpltCallback+0x212>
 80014fa:	4b45      	ldr	r3, [pc, #276]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	2b71      	cmp	r3, #113	; 0x71
 8001500:	d10d      	bne.n	800151e <HAL_UART_RxCpltCallback+0x212>
 8001502:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	2b67      	cmp	r3, #103	; 0x67
 8001508:	d109      	bne.n	800151e <HAL_UART_RxCpltCallback+0x212>
		{
			eq_sensetive[application_buffer[3]] = application_buffer[4];
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800150c:	7919      	ldrb	r1, [r3, #4]
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001510:	78db      	ldrb	r3, [r3, #3]
 8001512:	001a      	movs	r2, r3
 8001514:	b289      	uxth	r1, r1
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_UART_RxCpltCallback+0x328>)
 8001518:	0052      	lsls	r2, r2, #1
 800151a:	52d1      	strh	r1, [r2, r3]
 800151c:	e062      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'd' && application_buffer[1] == 'q' && application_buffer[2] == 'a')
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d12d      	bne.n	8001582 <HAL_UART_RxCpltCallback+0x276>
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001528:	785b      	ldrb	r3, [r3, #1]
 800152a:	2b71      	cmp	r3, #113	; 0x71
 800152c:	d129      	bne.n	8001582 <HAL_UART_RxCpltCallback+0x276>
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001530:	789b      	ldrb	r3, [r3, #2]
 8001532:	2b61      	cmp	r3, #97	; 0x61
 8001534:	d125      	bne.n	8001582 <HAL_UART_RxCpltCallback+0x276>
		{
			eq_color_a[application_buffer[3]].r = application_buffer[4];
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001538:	78db      	ldrb	r3, [r3, #3]
 800153a:	0019      	movs	r1, r3
 800153c:	4b34      	ldr	r3, [pc, #208]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800153e:	7918      	ldrb	r0, [r3, #4]
 8001540:	4a3d      	ldr	r2, [pc, #244]	; (8001638 <HAL_UART_RxCpltCallback+0x32c>)
 8001542:	000b      	movs	r3, r1
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	185b      	adds	r3, r3, r1
 8001548:	1c01      	adds	r1, r0, #0
 800154a:	5499      	strb	r1, [r3, r2]
			eq_color_a[application_buffer[3]].g = application_buffer[5];
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	0019      	movs	r1, r3
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001554:	7958      	ldrb	r0, [r3, #5]
 8001556:	4a38      	ldr	r2, [pc, #224]	; (8001638 <HAL_UART_RxCpltCallback+0x32c>)
 8001558:	000b      	movs	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	185b      	adds	r3, r3, r1
 800155e:	18d3      	adds	r3, r2, r3
 8001560:	3301      	adds	r3, #1
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	701a      	strb	r2, [r3, #0]
			eq_color_a[application_buffer[3]].b = application_buffer[6];
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001568:	78db      	ldrb	r3, [r3, #3]
 800156a:	0019      	movs	r1, r3
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800156e:	7998      	ldrb	r0, [r3, #6]
 8001570:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_UART_RxCpltCallback+0x32c>)
 8001572:	000b      	movs	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	185b      	adds	r3, r3, r1
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	3302      	adds	r3, #2
 800157c:	1c02      	adds	r2, r0, #0
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e030      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		}
		else if (application_buffer[0] == 'd' && application_buffer[1] == 'q' && application_buffer[2] == 'b')
 8001582:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d12c      	bne.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	2b71      	cmp	r3, #113	; 0x71
 8001590:	d128      	bne.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	2b62      	cmp	r3, #98	; 0x62
 8001598:	d124      	bne.n	80015e4 <HAL_UART_RxCpltCallback+0x2d8>
		{
			eq_color_b[application_buffer[3]].r = application_buffer[4];
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 800159c:	78db      	ldrb	r3, [r3, #3]
 800159e:	0019      	movs	r1, r3
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80015a2:	7918      	ldrb	r0, [r3, #4]
 80015a4:	4a25      	ldr	r2, [pc, #148]	; (800163c <HAL_UART_RxCpltCallback+0x330>)
 80015a6:	000b      	movs	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	185b      	adds	r3, r3, r1
 80015ac:	1c01      	adds	r1, r0, #0
 80015ae:	5499      	strb	r1, [r3, r2]
			eq_color_b[application_buffer[3]].g = application_buffer[5];
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	0019      	movs	r1, r3
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80015b8:	7958      	ldrb	r0, [r3, #5]
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <HAL_UART_RxCpltCallback+0x330>)
 80015bc:	000b      	movs	r3, r1
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	185b      	adds	r3, r3, r1
 80015c2:	18d3      	adds	r3, r2, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	1c02      	adds	r2, r0, #0
 80015c8:	701a      	strb	r2, [r3, #0]
			eq_color_b[application_buffer[3]].b = application_buffer[6];
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80015cc:	78db      	ldrb	r3, [r3, #3]
 80015ce:	0019      	movs	r1, r3
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80015d2:	7998      	ldrb	r0, [r3, #6]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_UART_RxCpltCallback+0x330>)
 80015d6:	000b      	movs	r3, r1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	185b      	adds	r3, r3, r1
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	3302      	adds	r3, #2
 80015e0:	1c02      	adds	r2, r0, #0
 80015e2:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, application_buffer, 7);
 80015e4:	490a      	ldr	r1, [pc, #40]	; (8001610 <HAL_UART_RxCpltCallback+0x304>)
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_UART_RxCpltCallback+0x300>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	0018      	movs	r0, r3
 80015ec:	f004 f84e 	bl	800568c <HAL_UART_Receive_IT>
	}
	// computer
	if (huart == &huart2)
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_UART_RxCpltCallback+0x334>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d105      	bne.n	8001604 <HAL_UART_RxCpltCallback+0x2f8>
	{
		HAL_UART_Receive_DMA(&huart2, pc_buffer, 8);
 80015f8:	4912      	ldr	r1, [pc, #72]	; (8001644 <HAL_UART_RxCpltCallback+0x338>)
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_UART_RxCpltCallback+0x334>)
 80015fc:	2208      	movs	r2, #8
 80015fe:	0018      	movs	r0, r3
 8001600:	f004 f8a2 	bl	8005748 <HAL_UART_Receive_DMA>
	}

}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20003254 	.word	0x20003254
 8001610:	20000034 	.word	0x20000034
 8001614:	20000044 	.word	0x20000044
 8001618:	20000088 	.word	0x20000088
 800161c:	20000080 	.word	0x20000080
 8001620:	20000050 	.word	0x20000050
 8001624:	2000008c 	.word	0x2000008c
 8001628:	2000005c 	.word	0x2000005c
 800162c:	20000084 	.word	0x20000084
 8001630:	20000098 	.word	0x20000098
 8001634:	20000004 	.word	0x20000004
 8001638:	20000068 	.word	0x20000068
 800163c:	20000074 	.word	0x20000074
 8001640:	200032e8 	.word	0x200032e8
 8001644:	2000003c 	.word	0x2000003c

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	46d6      	mov	lr, sl
 800164c:	464f      	mov	r7, r9
 800164e:	4646      	mov	r6, r8
 8001650:	b5c0      	push	{r6, r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f000 ff29 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 fa39 	bl	8001ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f7ff fd9d 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 8001662:	f7ff fd6d 	bl	8001140 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001666:	f000 fdc9 	bl	80021fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800166a:	f000 fb0d 	bl	8001c88 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800166e:	f000 fd77 	bl	8002160 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001672:	f000 fbe9 	bl	8001e48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001676:	4bd4      	ldr	r3, [pc, #848]	; (80019c8 <main+0x380>)
 8001678:	0018      	movs	r0, r3
 800167a:	f002 fc3b 	bl	8003ef4 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, application_buffer, 7);
 800167e:	49d3      	ldr	r1, [pc, #844]	; (80019cc <main+0x384>)
 8001680:	4bd3      	ldr	r3, [pc, #844]	; (80019d0 <main+0x388>)
 8001682:	2207      	movs	r2, #7
 8001684:	0018      	movs	r0, r3
 8001686:	f004 f801 	bl	800568c <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart2, pc_buffer, 8);
 800168a:	49d2      	ldr	r1, [pc, #840]	; (80019d4 <main+0x38c>)
 800168c:	4bd2      	ldr	r3, [pc, #840]	; (80019d8 <main+0x390>)
 800168e:	2208      	movs	r2, #8
 8001690:	0018      	movs	r0, r3
 8001692:	f004 f859 	bl	8005748 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  clear_led_strip(color_array_A, 150);
 8001696:	4bd1      	ldr	r3, [pc, #836]	; (80019dc <main+0x394>)
 8001698:	2196      	movs	r1, #150	; 0x96
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff fcf7 	bl	800108e <clear_led_strip>
  clear_led_strip(color_array_B, 150);
 80016a0:	4bcf      	ldr	r3, [pc, #828]	; (80019e0 <main+0x398>)
 80016a2:	2196      	movs	r1, #150	; 0x96
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fcf2 	bl	800108e <clear_led_strip>
  clear_led_strip(color_array_C, 150);
 80016aa:	4bce      	ldr	r3, [pc, #824]	; (80019e4 <main+0x39c>)
 80016ac:	2196      	movs	r1, #150	; 0x96
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff fced 	bl	800108e <clear_led_strip>

  // startup effect (all channels)
  struct startup_veriables startup_ver;

  startup_effect_init(&startup_ver);
 80016b4:	003b      	movs	r3, r7
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7fe ffb0 	bl	800061c <startup_effect_init>

  while (startup_effect(color_array_C, &startup_ver, TIM2->CNT, 150) == 0)
 80016bc:	e036      	b.n	800172c <main+0xe4>
  {
	  while(dma_flag[2] == 0 || dma_flag[1] == 0 || dma_flag[0] == 0);
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	4bc9      	ldr	r3, [pc, #804]	; (80019e8 <main+0x3a0>)
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0fb      	beq.n	80016c0 <main+0x78>
 80016c8:	4bc7      	ldr	r3, [pc, #796]	; (80019e8 <main+0x3a0>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f7      	beq.n	80016c0 <main+0x78>
 80016d0:	4bc5      	ldr	r3, [pc, #788]	; (80019e8 <main+0x3a0>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f3      	beq.n	80016c0 <main+0x78>

	  color_array_to_pixels(color_array_C, pixel_bit_buffer_C, 150, 100);
 80016d8:	49c4      	ldr	r1, [pc, #784]	; (80019ec <main+0x3a4>)
 80016da:	48c2      	ldr	r0, [pc, #776]	; (80019e4 <main+0x39c>)
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	2296      	movs	r2, #150	; 0x96
 80016e0:	f7ff fc0f 	bl	8000f02 <color_array_to_pixels>

	  // all channel (connected together channel)
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)pixel_bit_buffer_C, buffer_size(150));
 80016e4:	2096      	movs	r0, #150	; 0x96
 80016e6:	f7ff fd19 	bl	800111c <buffer_size>
 80016ea:	0003      	movs	r3, r0
 80016ec:	4abf      	ldr	r2, [pc, #764]	; (80019ec <main+0x3a4>)
 80016ee:	48c0      	ldr	r0, [pc, #768]	; (80019f0 <main+0x3a8>)
 80016f0:	2104      	movs	r1, #4
 80016f2:	f002 fcb3 	bl	800405c <HAL_TIM_PWM_Start_DMA>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)pixel_bit_buffer_C, buffer_size(150));
 80016f6:	2096      	movs	r0, #150	; 0x96
 80016f8:	f7ff fd10 	bl	800111c <buffer_size>
 80016fc:	0003      	movs	r3, r0
 80016fe:	4abb      	ldr	r2, [pc, #748]	; (80019ec <main+0x3a4>)
 8001700:	48bb      	ldr	r0, [pc, #748]	; (80019f0 <main+0x3a8>)
 8001702:	2108      	movs	r1, #8
 8001704:	f002 fcaa 	bl	800405c <HAL_TIM_PWM_Start_DMA>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4, (uint32_t*)pixel_bit_buffer_C, buffer_size(150));
 8001708:	2096      	movs	r0, #150	; 0x96
 800170a:	f7ff fd07 	bl	800111c <buffer_size>
 800170e:	0003      	movs	r3, r0
 8001710:	4ab6      	ldr	r2, [pc, #728]	; (80019ec <main+0x3a4>)
 8001712:	48b7      	ldr	r0, [pc, #732]	; (80019f0 <main+0x3a8>)
 8001714:	210c      	movs	r1, #12
 8001716:	f002 fca1 	bl	800405c <HAL_TIM_PWM_Start_DMA>

	  dma_flag[0] = 0; dma_flag[1] = 0; dma_flag[2] = 0;
 800171a:	4bb3      	ldr	r3, [pc, #716]	; (80019e8 <main+0x3a0>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	4bb1      	ldr	r3, [pc, #708]	; (80019e8 <main+0x3a0>)
 8001722:	2200      	movs	r2, #0
 8001724:	705a      	strb	r2, [r3, #1]
 8001726:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <main+0x3a0>)
 8001728:	2200      	movs	r2, #0
 800172a:	709a      	strb	r2, [r3, #2]
  while (startup_effect(color_array_C, &startup_ver, TIM2->CNT, 150) == 0)
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	05db      	lsls	r3, r3, #23
 8001730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001732:	0039      	movs	r1, r7
 8001734:	48ab      	ldr	r0, [pc, #684]	; (80019e4 <main+0x39c>)
 8001736:	2396      	movs	r3, #150	; 0x96
 8001738:	f7ff f8c7 	bl	80008ca <startup_effect>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d0be      	beq.n	80016be <main+0x76>
  }

  while (1)
  {
	  for (uint8_t i=0; i < 7; i++)
 8001740:	230f      	movs	r3, #15
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e00e      	b.n	8001768 <main+0x120>
	  {
		 eq_data[i] = pc_buffer[i+1];
 800174a:	200f      	movs	r0, #15
 800174c:	183b      	adds	r3, r7, r0
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	183b      	adds	r3, r7, r0
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	499f      	ldr	r1, [pc, #636]	; (80019d4 <main+0x38c>)
 8001758:	5c89      	ldrb	r1, [r1, r2]
 800175a:	4aa6      	ldr	r2, [pc, #664]	; (80019f4 <main+0x3ac>)
 800175c:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i=0; i < 7; i++)
 800175e:	183b      	adds	r3, r7, r0
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	183b      	adds	r3, r7, r0
 8001764:	3201      	adds	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	230f      	movs	r3, #15
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b06      	cmp	r3, #6
 8001770:	d9eb      	bls.n	800174a <main+0x102>
	  }


	  // channel A:
	  if (dma_flag[0] == 1)
 8001772:	4b9d      	ldr	r3, [pc, #628]	; (80019e8 <main+0x3a0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d171      	bne.n	800185e <main+0x216>
	  {
		  // color
		  if (channel_effect[0] == 0)
 800177a:	4b9f      	ldr	r3, [pc, #636]	; (80019f8 <main+0x3b0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <main+0x152>
		  {
			  set_color_strip(color_array_A, main_color[0].r, main_color[0].g, main_color[0].b, 150);
 8001782:	4b9e      	ldr	r3, [pc, #632]	; (80019fc <main+0x3b4>)
 8001784:	7819      	ldrb	r1, [r3, #0]
 8001786:	4b9d      	ldr	r3, [pc, #628]	; (80019fc <main+0x3b4>)
 8001788:	785a      	ldrb	r2, [r3, #1]
 800178a:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <main+0x3b4>)
 800178c:	789b      	ldrb	r3, [r3, #2]
 800178e:	4893      	ldr	r0, [pc, #588]	; (80019dc <main+0x394>)
 8001790:	2496      	movs	r4, #150	; 0x96
 8001792:	9400      	str	r4, [sp, #0]
 8001794:	f7ff fc35 	bl	8001002 <set_color_strip>
 8001798:	e04e      	b.n	8001838 <main+0x1f0>
		  }
		  else if (channel_effect[0] == 1)
 800179a:	4b97      	ldr	r3, [pc, #604]	; (80019f8 <main+0x3b0>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d120      	bne.n	80017e4 <main+0x19c>
		  {
			  vu_effect(color_array_A, pc_buffer[0], vu_color_a[0].r, vu_color_a[0].g, vu_color_a[0].b, vu_color_b[0].r, vu_color_b[0].g, vu_color_b[0].b, 150);
 80017a2:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <main+0x38c>)
 80017a4:	781d      	ldrb	r5, [r3, #0]
 80017a6:	4b96      	ldr	r3, [pc, #600]	; (8001a00 <main+0x3b8>)
 80017a8:	781e      	ldrb	r6, [r3, #0]
 80017aa:	4b95      	ldr	r3, [pc, #596]	; (8001a00 <main+0x3b8>)
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	469c      	mov	ip, r3
 80017b0:	4b93      	ldr	r3, [pc, #588]	; (8001a00 <main+0x3b8>)
 80017b2:	789b      	ldrb	r3, [r3, #2]
 80017b4:	4699      	mov	r9, r3
 80017b6:	4a93      	ldr	r2, [pc, #588]	; (8001a04 <main+0x3bc>)
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	4992      	ldr	r1, [pc, #584]	; (8001a04 <main+0x3bc>)
 80017bc:	7849      	ldrb	r1, [r1, #1]
 80017be:	4891      	ldr	r0, [pc, #580]	; (8001a04 <main+0x3bc>)
 80017c0:	7880      	ldrb	r0, [r0, #2]
 80017c2:	4c86      	ldr	r4, [pc, #536]	; (80019dc <main+0x394>)
 80017c4:	2396      	movs	r3, #150	; 0x96
 80017c6:	4698      	mov	r8, r3
 80017c8:	4643      	mov	r3, r8
 80017ca:	9304      	str	r3, [sp, #16]
 80017cc:	9003      	str	r0, [sp, #12]
 80017ce:	9102      	str	r1, [sp, #8]
 80017d0:	9201      	str	r2, [sp, #4]
 80017d2:	464b      	mov	r3, r9
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	4663      	mov	r3, ip
 80017d8:	0032      	movs	r2, r6
 80017da:	0029      	movs	r1, r5
 80017dc:	0020      	movs	r0, r4
 80017de:	f7ff f8cb 	bl	8000978 <vu_effect>
 80017e2:	e029      	b.n	8001838 <main+0x1f0>
		  }
		  else if (channel_effect[0] == 2)
 80017e4:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <main+0x3b0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d125      	bne.n	8001838 <main+0x1f0>
		  {
			  eq_effect(color_array_A, eq_color_a[0].r, eq_color_a[0].g, eq_color_a[0].b, eq_color_b[0].r, eq_color_b[0].g, eq_color_b[0].b, eq_data, eq_cut[0], eq_sensetive[0], 150);
 80017ec:	4b86      	ldr	r3, [pc, #536]	; (8001a08 <main+0x3c0>)
 80017ee:	781e      	ldrb	r6, [r3, #0]
 80017f0:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <main+0x3c0>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	469c      	mov	ip, r3
 80017f6:	4b84      	ldr	r3, [pc, #528]	; (8001a08 <main+0x3c0>)
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	4698      	mov	r8, r3
 80017fc:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <main+0x3c4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	469a      	mov	sl, r3
 8001802:	4a82      	ldr	r2, [pc, #520]	; (8001a0c <main+0x3c4>)
 8001804:	7852      	ldrb	r2, [r2, #1]
 8001806:	4981      	ldr	r1, [pc, #516]	; (8001a0c <main+0x3c4>)
 8001808:	7889      	ldrb	r1, [r1, #2]
 800180a:	4881      	ldr	r0, [pc, #516]	; (8001a10 <main+0x3c8>)
 800180c:	7800      	ldrb	r0, [r0, #0]
 800180e:	4c81      	ldr	r4, [pc, #516]	; (8001a14 <main+0x3cc>)
 8001810:	8824      	ldrh	r4, [r4, #0]
 8001812:	4d72      	ldr	r5, [pc, #456]	; (80019dc <main+0x394>)
 8001814:	2396      	movs	r3, #150	; 0x96
 8001816:	4699      	mov	r9, r3
 8001818:	464b      	mov	r3, r9
 800181a:	9306      	str	r3, [sp, #24]
 800181c:	9405      	str	r4, [sp, #20]
 800181e:	9004      	str	r0, [sp, #16]
 8001820:	4874      	ldr	r0, [pc, #464]	; (80019f4 <main+0x3ac>)
 8001822:	9003      	str	r0, [sp, #12]
 8001824:	9102      	str	r1, [sp, #8]
 8001826:	9201      	str	r2, [sp, #4]
 8001828:	4653      	mov	r3, sl
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4643      	mov	r3, r8
 800182e:	4662      	mov	r2, ip
 8001830:	0031      	movs	r1, r6
 8001832:	0028      	movs	r0, r5
 8001834:	f7ff f960 	bl	8000af8 <eq_effect>
		  }

		 color_array_to_pixels(color_array_A, pixel_bit_buffer_A, 150, brightness[0]);
 8001838:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <main+0x3d0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4977      	ldr	r1, [pc, #476]	; (8001a1c <main+0x3d4>)
 800183e:	4867      	ldr	r0, [pc, #412]	; (80019dc <main+0x394>)
 8001840:	2296      	movs	r2, #150	; 0x96
 8001842:	f7ff fb5e 	bl	8000f02 <color_array_to_pixels>
		 HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)pixel_bit_buffer_A, buffer_size(150));
 8001846:	2096      	movs	r0, #150	; 0x96
 8001848:	f7ff fc68 	bl	800111c <buffer_size>
 800184c:	0003      	movs	r3, r0
 800184e:	4a73      	ldr	r2, [pc, #460]	; (8001a1c <main+0x3d4>)
 8001850:	4867      	ldr	r0, [pc, #412]	; (80019f0 <main+0x3a8>)
 8001852:	2104      	movs	r1, #4
 8001854:	f002 fc02 	bl	800405c <HAL_TIM_PWM_Start_DMA>
		 dma_flag[0] = 0;
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <main+0x3a0>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]

	  }

	  // channel B:
	  if (dma_flag[1] == 1)
 800185e:	4b62      	ldr	r3, [pc, #392]	; (80019e8 <main+0x3a0>)
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d171      	bne.n	800194a <main+0x302>
	  {
		 // color
		 if (channel_effect[1] == 0)
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <main+0x3b0>)
 8001868:	785b      	ldrb	r3, [r3, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10b      	bne.n	8001886 <main+0x23e>
		 {
			 set_color_strip(color_array_B, main_color[1].r, main_color[1].g, main_color[1].b, 150);
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <main+0x3b4>)
 8001870:	78d9      	ldrb	r1, [r3, #3]
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <main+0x3b4>)
 8001874:	791a      	ldrb	r2, [r3, #4]
 8001876:	4b61      	ldr	r3, [pc, #388]	; (80019fc <main+0x3b4>)
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	4859      	ldr	r0, [pc, #356]	; (80019e0 <main+0x398>)
 800187c:	2496      	movs	r4, #150	; 0x96
 800187e:	9400      	str	r4, [sp, #0]
 8001880:	f7ff fbbf 	bl	8001002 <set_color_strip>
 8001884:	e04e      	b.n	8001924 <main+0x2dc>
		 }
		 else if (channel_effect[1] == 1)
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <main+0x3b0>)
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d120      	bne.n	80018d0 <main+0x288>
		 {
			 vu_effect(color_array_B, pc_buffer[0], vu_color_a[1].r, vu_color_a[1].g, vu_color_a[1].b, vu_color_b[1].r, vu_color_b[1].g, vu_color_b[1].b, 150);
 800188e:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <main+0x38c>)
 8001890:	781d      	ldrb	r5, [r3, #0]
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <main+0x3b8>)
 8001894:	78de      	ldrb	r6, [r3, #3]
 8001896:	4b5a      	ldr	r3, [pc, #360]	; (8001a00 <main+0x3b8>)
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	469c      	mov	ip, r3
 800189c:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <main+0x3b8>)
 800189e:	795b      	ldrb	r3, [r3, #5]
 80018a0:	4699      	mov	r9, r3
 80018a2:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <main+0x3bc>)
 80018a4:	78d2      	ldrb	r2, [r2, #3]
 80018a6:	4957      	ldr	r1, [pc, #348]	; (8001a04 <main+0x3bc>)
 80018a8:	7909      	ldrb	r1, [r1, #4]
 80018aa:	4856      	ldr	r0, [pc, #344]	; (8001a04 <main+0x3bc>)
 80018ac:	7940      	ldrb	r0, [r0, #5]
 80018ae:	4c4c      	ldr	r4, [pc, #304]	; (80019e0 <main+0x398>)
 80018b0:	2396      	movs	r3, #150	; 0x96
 80018b2:	4698      	mov	r8, r3
 80018b4:	4643      	mov	r3, r8
 80018b6:	9304      	str	r3, [sp, #16]
 80018b8:	9003      	str	r0, [sp, #12]
 80018ba:	9102      	str	r1, [sp, #8]
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	464b      	mov	r3, r9
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4663      	mov	r3, ip
 80018c4:	0032      	movs	r2, r6
 80018c6:	0029      	movs	r1, r5
 80018c8:	0020      	movs	r0, r4
 80018ca:	f7ff f855 	bl	8000978 <vu_effect>
 80018ce:	e029      	b.n	8001924 <main+0x2dc>
		 }
		 else if (channel_effect[1] == 2)
 80018d0:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <main+0x3b0>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d125      	bne.n	8001924 <main+0x2dc>
		 {
		 	eq_effect(color_array_B, eq_color_a[1].r, eq_color_a[1].g, eq_color_a[1].b, eq_color_b[1].r, eq_color_b[1].g, eq_color_b[1].b, eq_data, eq_cut[1], eq_sensetive[1], 150);
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <main+0x3c0>)
 80018da:	78de      	ldrb	r6, [r3, #3]
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <main+0x3c0>)
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	469c      	mov	ip, r3
 80018e2:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <main+0x3c0>)
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	4698      	mov	r8, r3
 80018e8:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <main+0x3c4>)
 80018ea:	78db      	ldrb	r3, [r3, #3]
 80018ec:	469a      	mov	sl, r3
 80018ee:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <main+0x3c4>)
 80018f0:	7912      	ldrb	r2, [r2, #4]
 80018f2:	4946      	ldr	r1, [pc, #280]	; (8001a0c <main+0x3c4>)
 80018f4:	7949      	ldrb	r1, [r1, #5]
 80018f6:	4846      	ldr	r0, [pc, #280]	; (8001a10 <main+0x3c8>)
 80018f8:	7840      	ldrb	r0, [r0, #1]
 80018fa:	4c46      	ldr	r4, [pc, #280]	; (8001a14 <main+0x3cc>)
 80018fc:	8864      	ldrh	r4, [r4, #2]
 80018fe:	4d38      	ldr	r5, [pc, #224]	; (80019e0 <main+0x398>)
 8001900:	2396      	movs	r3, #150	; 0x96
 8001902:	4699      	mov	r9, r3
 8001904:	464b      	mov	r3, r9
 8001906:	9306      	str	r3, [sp, #24]
 8001908:	9405      	str	r4, [sp, #20]
 800190a:	9004      	str	r0, [sp, #16]
 800190c:	4839      	ldr	r0, [pc, #228]	; (80019f4 <main+0x3ac>)
 800190e:	9003      	str	r0, [sp, #12]
 8001910:	9102      	str	r1, [sp, #8]
 8001912:	9201      	str	r2, [sp, #4]
 8001914:	4653      	mov	r3, sl
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4643      	mov	r3, r8
 800191a:	4662      	mov	r2, ip
 800191c:	0031      	movs	r1, r6
 800191e:	0028      	movs	r0, r5
 8001920:	f7ff f8ea 	bl	8000af8 <eq_effect>
		 }

		 color_array_to_pixels(color_array_B, pixel_bit_buffer_B, 150, brightness[1]);
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <main+0x3d0>)
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	493d      	ldr	r1, [pc, #244]	; (8001a20 <main+0x3d8>)
 800192a:	482d      	ldr	r0, [pc, #180]	; (80019e0 <main+0x398>)
 800192c:	2296      	movs	r2, #150	; 0x96
 800192e:	f7ff fae8 	bl	8000f02 <color_array_to_pixels>
		 HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)pixel_bit_buffer_B, buffer_size(150));
 8001932:	2096      	movs	r0, #150	; 0x96
 8001934:	f7ff fbf2 	bl	800111c <buffer_size>
 8001938:	0003      	movs	r3, r0
 800193a:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <main+0x3d8>)
 800193c:	482c      	ldr	r0, [pc, #176]	; (80019f0 <main+0x3a8>)
 800193e:	2108      	movs	r1, #8
 8001940:	f002 fb8c 	bl	800405c <HAL_TIM_PWM_Start_DMA>
		 dma_flag[1] = 0;
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <main+0x3a0>)
 8001946:	2200      	movs	r2, #0
 8001948:	705a      	strb	r2, [r3, #1]
	  }

	  // channel C:
	  if (dma_flag[2] == 1)
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <main+0x3a0>)
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d000      	beq.n	8001954 <main+0x30c>
 8001952:	e6f5      	b.n	8001740 <main+0xf8>
	  {
		  // color
		 if (channel_effect[2] == 0 && channel_flag[2] == 1)
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <main+0x3b0>)
 8001956:	789b      	ldrb	r3, [r3, #2]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10f      	bne.n	800197c <main+0x334>
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <main+0x3dc>)
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d10b      	bne.n	800197c <main+0x334>
		 {
		 	set_color_strip(color_array_C, main_color[2].r, main_color[2].g, main_color[2].b, 150);
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <main+0x3b4>)
 8001966:	7999      	ldrb	r1, [r3, #6]
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <main+0x3b4>)
 800196a:	79da      	ldrb	r2, [r3, #7]
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <main+0x3b4>)
 800196e:	7a1b      	ldrb	r3, [r3, #8]
 8001970:	481c      	ldr	r0, [pc, #112]	; (80019e4 <main+0x39c>)
 8001972:	2496      	movs	r4, #150	; 0x96
 8001974:	9400      	str	r4, [sp, #0]
 8001976:	f7ff fb44 	bl	8001002 <set_color_strip>
 800197a:	e07f      	b.n	8001a7c <main+0x434>
		 }
		 else if (channel_effect[2] == 1)
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <main+0x3b0>)
 800197e:	789b      	ldrb	r3, [r3, #2]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d151      	bne.n	8001a28 <main+0x3e0>
		 {
			 vu_effect(color_array_C, pc_buffer[0], vu_color_a[2].r, vu_color_a[2].g, vu_color_a[2].b, vu_color_b[2].r, vu_color_b[2].g, vu_color_b[2].b, 150);
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <main+0x38c>)
 8001986:	781d      	ldrb	r5, [r3, #0]
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <main+0x3b8>)
 800198a:	799e      	ldrb	r6, [r3, #6]
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <main+0x3b8>)
 800198e:	79db      	ldrb	r3, [r3, #7]
 8001990:	469c      	mov	ip, r3
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <main+0x3b8>)
 8001994:	7a1b      	ldrb	r3, [r3, #8]
 8001996:	4699      	mov	r9, r3
 8001998:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <main+0x3bc>)
 800199a:	7992      	ldrb	r2, [r2, #6]
 800199c:	4919      	ldr	r1, [pc, #100]	; (8001a04 <main+0x3bc>)
 800199e:	79c9      	ldrb	r1, [r1, #7]
 80019a0:	4818      	ldr	r0, [pc, #96]	; (8001a04 <main+0x3bc>)
 80019a2:	7a00      	ldrb	r0, [r0, #8]
 80019a4:	4c0f      	ldr	r4, [pc, #60]	; (80019e4 <main+0x39c>)
 80019a6:	2396      	movs	r3, #150	; 0x96
 80019a8:	4698      	mov	r8, r3
 80019aa:	4643      	mov	r3, r8
 80019ac:	9304      	str	r3, [sp, #16]
 80019ae:	9003      	str	r0, [sp, #12]
 80019b0:	9102      	str	r1, [sp, #8]
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	464b      	mov	r3, r9
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4663      	mov	r3, ip
 80019ba:	0032      	movs	r2, r6
 80019bc:	0029      	movs	r1, r5
 80019be:	0020      	movs	r0, r4
 80019c0:	f7fe ffda 	bl	8000978 <vu_effect>
 80019c4:	e05a      	b.n	8001a7c <main+0x434>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	200030f4 	.word	0x200030f4
 80019cc:	20000034 	.word	0x20000034
 80019d0:	20003254 	.word	0x20003254
 80019d4:	2000003c 	.word	0x2000003c
 80019d8:	200032e8 	.word	0x200032e8
 80019dc:	2000009c 	.word	0x2000009c
 80019e0:	200010a0 	.word	0x200010a0
 80019e4:	200020a4 	.word	0x200020a4
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20002268 	.word	0x20002268
 80019f0:	200030a8 	.word	0x200030a8
 80019f4:	20000090 	.word	0x20000090
 80019f8:	20000084 	.word	0x20000084
 80019fc:	20000044 	.word	0x20000044
 8001a00:	20000050 	.word	0x20000050
 8001a04:	2000005c 	.word	0x2000005c
 8001a08:	20000068 	.word	0x20000068
 8001a0c:	20000074 	.word	0x20000074
 8001a10:	20000098 	.word	0x20000098
 8001a14:	20000004 	.word	0x20000004
 8001a18:	20000080 	.word	0x20000080
 8001a1c:	20000260 	.word	0x20000260
 8001a20:	20001264 	.word	0x20001264
 8001a24:	20000088 	.word	0x20000088
		 }
		 else if (channel_effect[2] == 2)
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <main+0x45c>)
 8001a2a:	789b      	ldrb	r3, [r3, #2]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d125      	bne.n	8001a7c <main+0x434>
		 {
			eq_effect(color_array_C, eq_color_a[2].r, eq_color_a[2].g, eq_color_a[2].b, eq_color_b[2].r, eq_color_b[2].g, eq_color_b[2].b, eq_data, eq_cut[2], eq_sensetive[2], 150);
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <main+0x460>)
 8001a32:	799e      	ldrb	r6, [r3, #6]
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <main+0x460>)
 8001a36:	79db      	ldrb	r3, [r3, #7]
 8001a38:	469c      	mov	ip, r3
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <main+0x460>)
 8001a3c:	7a1b      	ldrb	r3, [r3, #8]
 8001a3e:	4698      	mov	r8, r3
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <main+0x464>)
 8001a42:	799b      	ldrb	r3, [r3, #6]
 8001a44:	469a      	mov	sl, r3
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <main+0x464>)
 8001a48:	79d2      	ldrb	r2, [r2, #7]
 8001a4a:	4918      	ldr	r1, [pc, #96]	; (8001aac <main+0x464>)
 8001a4c:	7a09      	ldrb	r1, [r1, #8]
 8001a4e:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <main+0x468>)
 8001a50:	7880      	ldrb	r0, [r0, #2]
 8001a52:	4c18      	ldr	r4, [pc, #96]	; (8001ab4 <main+0x46c>)
 8001a54:	88a4      	ldrh	r4, [r4, #4]
 8001a56:	4d18      	ldr	r5, [pc, #96]	; (8001ab8 <main+0x470>)
 8001a58:	2396      	movs	r3, #150	; 0x96
 8001a5a:	4699      	mov	r9, r3
 8001a5c:	464b      	mov	r3, r9
 8001a5e:	9306      	str	r3, [sp, #24]
 8001a60:	9405      	str	r4, [sp, #20]
 8001a62:	9004      	str	r0, [sp, #16]
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <main+0x474>)
 8001a66:	9003      	str	r0, [sp, #12]
 8001a68:	9102      	str	r1, [sp, #8]
 8001a6a:	9201      	str	r2, [sp, #4]
 8001a6c:	4653      	mov	r3, sl
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4643      	mov	r3, r8
 8001a72:	4662      	mov	r2, ip
 8001a74:	0031      	movs	r1, r6
 8001a76:	0028      	movs	r0, r5
 8001a78:	f7ff f83e 	bl	8000af8 <eq_effect>
		 }

		 color_array_to_pixels(color_array_C, pixel_bit_buffer_C, 150, brightness[2]);
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <main+0x478>)
 8001a7e:	789b      	ldrb	r3, [r3, #2]
 8001a80:	4910      	ldr	r1, [pc, #64]	; (8001ac4 <main+0x47c>)
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <main+0x470>)
 8001a84:	2296      	movs	r2, #150	; 0x96
 8001a86:	f7ff fa3c 	bl	8000f02 <color_array_to_pixels>
		 HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4, (uint32_t*)pixel_bit_buffer_C, buffer_size(150));
 8001a8a:	2096      	movs	r0, #150	; 0x96
 8001a8c:	f7ff fb46 	bl	800111c <buffer_size>
 8001a90:	0003      	movs	r3, r0
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <main+0x47c>)
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <main+0x480>)
 8001a96:	210c      	movs	r1, #12
 8001a98:	f002 fae0 	bl	800405c <HAL_TIM_PWM_Start_DMA>
		 dma_flag[2] = 0;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <main+0x484>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	709a      	strb	r2, [r3, #2]
	  for (uint8_t i=0; i < 7; i++)
 8001aa2:	e64d      	b.n	8001740 <main+0xf8>
 8001aa4:	20000084 	.word	0x20000084
 8001aa8:	20000068 	.word	0x20000068
 8001aac:	20000074 	.word	0x20000074
 8001ab0:	20000098 	.word	0x20000098
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	200020a4 	.word	0x200020a4
 8001abc:	20000090 	.word	0x20000090
 8001ac0:	20000080 	.word	0x20000080
 8001ac4:	20002268 	.word	0x20002268
 8001ac8:	200030a8 	.word	0x200030a8
 8001acc:	20000000 	.word	0x20000000

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b093      	sub	sp, #76	; 0x4c
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	2410      	movs	r4, #16
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	0018      	movs	r0, r3
 8001adc:	2338      	movs	r3, #56	; 0x38
 8001ade:	001a      	movs	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f005 ffc7 	bl	8007a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae6:	003b      	movs	r3, r7
 8001ae8:	0018      	movs	r0, r3
 8001aea:	2310      	movs	r3, #16
 8001aec:	001a      	movs	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	f005 ffc0 	bl	8007a74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	0018      	movs	r0, r3
 8001afa:	f001 fadb 	bl	80030b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	2202      	movs	r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	0052      	lsls	r2, r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001b0c:	0021      	movs	r1, r4
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2202      	movs	r2, #2
 8001b24:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2208      	movs	r2, #8
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0292      	lsls	r2, r2, #10
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	0492      	lsls	r2, r2, #18
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	0592      	lsls	r2, r2, #22
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f001 fafd 	bl	800314c <HAL_RCC_OscConfig>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b56:	f000 f819 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5a:	003b      	movs	r3, r7
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b60:	003b      	movs	r3, r7
 8001b62:	2202      	movs	r2, #2
 8001b64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b66:	003b      	movs	r3, r7
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6c:	003b      	movs	r3, r7
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b72:	003b      	movs	r3, r7
 8001b74:	2102      	movs	r1, #2
 8001b76:	0018      	movs	r0, r3
 8001b78:	f001 fe02 	bl	8003780 <HAL_RCC_ClockConfig>
 8001b7c:	1e03      	subs	r3, r0, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b80:	f000 f804 	bl	8001b8c <Error_Handler>
  }
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b013      	add	sp, #76	; 0x4c
 8001b8a:	bd90      	pop	{r4, r7, pc}

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <Error_Handler+0x8>
	...

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x44>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x44>)
 8001bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_MspInit+0x44>)
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	0549      	lsls	r1, r1, #21
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_MspInit+0x44>)
 8001bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	055b      	lsls	r3, r3, #21
 8001bcc:	4013      	ands	r3, r2
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b002      	add	sp, #8
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40021000 	.word	0x40021000

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c04:	f000 fcbc 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4);
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <DMA1_Channel1_IRQHandler+0x14>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 ff88 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	20003140 	.word	0x20003140

08001c28 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 ff7c 	bl	8002b2c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 ff78 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	2000319c 	.word	0x2000319c
 8001c48:	200031f8 	.word	0x200031f8

08001c4c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 ff6a 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	2000337c 	.word	0x2000337c

08001c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <USART1_IRQHandler+0x14>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f003 fdca 	bl	8005804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	20003254 	.word	0x20003254

08001c7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b09c      	sub	sp, #112	; 0x70
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8e:	2360      	movs	r3, #96	; 0x60
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	0018      	movs	r0, r3
 8001c94:	2310      	movs	r3, #16
 8001c96:	001a      	movs	r2, r3
 8001c98:	2100      	movs	r1, #0
 8001c9a:	f005 feeb 	bl	8007a74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9e:	2354      	movs	r3, #84	; 0x54
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f005 fee3 	bl	8007a74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cae:	2338      	movs	r3, #56	; 0x38
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	231c      	movs	r3, #28
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f005 fedb 	bl	8007a74 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	2334      	movs	r3, #52	; 0x34
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f005 fed4 	bl	8007a74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ccc:	4b5c      	ldr	r3, [pc, #368]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001cce:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <MX_TIM1_Init+0x1bc>)
 8001cd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80;
 8001cde:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001ce0:	2250      	movs	r2, #80	; 0x50
 8001ce2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cea:	4b55      	ldr	r3, [pc, #340]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cf6:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f002 f8a3 	bl	8003e44 <HAL_TIM_Base_Init>
 8001cfe:	1e03      	subs	r3, r0, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001d02:	f7ff ff43 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d06:	2160      	movs	r1, #96	; 0x60
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	0152      	lsls	r2, r2, #5
 8001d0e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d10:	187a      	adds	r2, r7, r1
 8001d12:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001d14:	0011      	movs	r1, r2
 8001d16:	0018      	movs	r0, r3
 8001d18:	f002 fd90 	bl	800483c <HAL_TIM_ConfigClockSource>
 8001d1c:	1e03      	subs	r3, r0, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001d20:	f7ff ff34 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001d26:	0018      	movs	r0, r3
 8001d28:	f002 f938 	bl	8003f9c <HAL_TIM_PWM_Init>
 8001d2c:	1e03      	subs	r3, r0, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001d30:	f7ff ff2c 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2154      	movs	r1, #84	; 0x54
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d48:	187a      	adds	r2, r7, r1
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001d4c:	0011      	movs	r1, r2
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f003 fb32 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001d58:	f7ff ff18 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5c:	2138      	movs	r1, #56	; 0x38
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2260      	movs	r2, #96	; 0x60
 8001d62:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d88:	1879      	adds	r1, r7, r1
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f002 fc54 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001d98:	f7ff fef8 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d9c:	2338      	movs	r3, #56	; 0x38
 8001d9e:	18f9      	adds	r1, r7, r3
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001da2:	2208      	movs	r2, #8
 8001da4:	0018      	movs	r0, r3
 8001da6:	f002 fc49 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001dae:	f7ff feed 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001db2:	2338      	movs	r3, #56	; 0x38
 8001db4:	18f9      	adds	r1, r7, r3
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001db8:	220c      	movs	r2, #12
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f002 fc3e 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001dc4:	f7ff fee2 	bl	8001b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	0192      	lsls	r2, r2, #6
 8001dec:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	0492      	lsls	r2, r2, #18
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2200      	movs	r2, #0
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2200      	movs	r2, #0
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e1a:	1d3a      	adds	r2, r7, #4
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001e1e:	0011      	movs	r1, r2
 8001e20:	0018      	movs	r0, r3
 8001e22:	f003 fb37 	bl	8005494 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM1_Init+0x1a6>
  {
    Error_Handler();
 8001e2a:	f7ff feaf 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <MX_TIM1_Init+0x1b8>)
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f933 	bl	800209c <HAL_TIM_MspPostInit>

}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b01c      	add	sp, #112	; 0x70
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	200030a8 	.word	0x200030a8
 8001e44:	40012c00 	.word	0x40012c00

08001e48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	2310      	movs	r3, #16
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	0018      	movs	r0, r3
 8001e54:	2310      	movs	r3, #16
 8001e56:	001a      	movs	r2, r3
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f005 fe0b 	bl	8007a74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	0018      	movs	r0, r3
 8001e62:	230c      	movs	r3, #12
 8001e64:	001a      	movs	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f005 fe04 	bl	8007a74 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	05d2      	lsls	r2, r2, #23
 8001e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <MX_TIM2_Init+0xa8>)
 8001e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	4252      	negs	r2, r2
 8001e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 ffd4 	bl	8003e44 <HAL_TIM_Base_Init>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ea0:	f7ff fe74 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	0152      	lsls	r2, r2, #5
 8001eac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eae:	187a      	adds	r2, r7, r1
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f002 fcc1 	bl	800483c <HAL_TIM_ConfigClockSource>
 8001eba:	1e03      	subs	r3, r0, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ebe:	f7ff fe65 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ece:	1d3a      	adds	r2, r7, #4
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_TIM2_Init+0xa4>)
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f003 fa6f 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ede:	f7ff fe55 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b008      	add	sp, #32
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	200030f4 	.word	0x200030f4
 8001ef0:	0000f9ff 	.word	0x0000f9ff

08001ef4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b093      	sub	sp, #76	; 0x4c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	2414      	movs	r4, #20
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	0018      	movs	r0, r3
 8001f02:	2334      	movs	r3, #52	; 0x34
 8001f04:	001a      	movs	r2, r3
 8001f06:	2100      	movs	r1, #0
 8001f08:	f005 fdb4 	bl	8007a74 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_TIM_Base_MspInit+0x188>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d000      	beq.n	8001f18 <HAL_TIM_Base_MspInit+0x24>
 8001f16:	e09b      	b.n	8002050 <HAL_TIM_Base_MspInit+0x15c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	0392      	lsls	r2, r2, #14
 8001f1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001f20:	193b      	adds	r3, r7, r4
 8001f22:	2200      	movs	r2, #0
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f001 fdd3 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001f2e:	1e03      	subs	r3, r0, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8001f32:	f7ff fe2b 	bl	8001b8c <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f36:	4b52      	ldr	r3, [pc, #328]	; (8002080 <HAL_TIM_Base_MspInit+0x18c>)
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <HAL_TIM_Base_MspInit+0x18c>)
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	0109      	lsls	r1, r1, #4
 8001f40:	430a      	orrs	r2, r1
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
 8001f44:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <HAL_TIM_Base_MspInit+0x18c>)
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH4 Init */
    hdma_tim1_ch4.Instance = DMA1_Channel1;
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_TIM_Base_MspInit+0x194>)
 8001f56:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4.Init.Request = DMA_REQUEST_TIM1_CH4;
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f5a:	2217      	movs	r2, #23
 8001f5c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f60:	2210      	movs	r2, #16
 8001f62:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f64:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f70:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	0052      	lsls	r2, r2, #1
 8001f76:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f78:	4b42      	ldr	r3, [pc, #264]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4.Init.Mode = DMA_NORMAL;
 8001f7e:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001f84:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch4) != HAL_OK)
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 fbf1 	bl	8002774 <HAL_DMA_Init>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_TIM_Base_MspInit+0xa6>
    {
      Error_Handler();
 8001f96:	f7ff fdf9 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a39      	ldr	r2, [pc, #228]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa0:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_TIM_Base_MspInit+0x190>)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel2;
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fa8:	4a39      	ldr	r2, [pc, #228]	; (8002090 <HAL_TIM_Base_MspInit+0x19c>)
 8001faa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fae:	2216      	movs	r2, #22
 8001fb0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	0052      	lsls	r2, r2, #1
 8001fca:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 fbc7 	bl	8002774 <HAL_DMA_Init>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_TIM_Base_MspInit+0xfa>
    {
      Error_Handler();
 8001fea:	f7ff fdcf 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_TIM_Base_MspInit+0x198>)
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ffc:	4a26      	ldr	r2, [pc, #152]	; (8002098 <HAL_TIM_Base_MspInit+0x1a4>)
 8001ffe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8002002:	2215      	movs	r2, #21
 8002004:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8002008:	2210      	movs	r2, #16
 800200a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	0052      	lsls	r2, r2, #1
 800201e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8002034:	0018      	movs	r0, r3
 8002036:	f000 fb9d 	bl	8002774 <HAL_DMA_Init>
 800203a:	1e03      	subs	r3, r0, #0
 800203c:	d001      	beq.n	8002042 <HAL_TIM_Base_MspInit+0x14e>
    {
      Error_Handler();
 800203e:	f7ff fda5 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_TIM_Base_MspInit+0x1a0>)
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800204e:	e011      	b.n	8002074 <HAL_TIM_Base_MspInit+0x180>
  else if(tim_baseHandle->Instance==TIM2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	05db      	lsls	r3, r3, #23
 8002058:	429a      	cmp	r2, r3
 800205a:	d10b      	bne.n	8002074 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_TIM_Base_MspInit+0x18c>)
 800205e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_TIM_Base_MspInit+0x18c>)
 8002062:	2101      	movs	r1, #1
 8002064:	430a      	orrs	r2, r1
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_TIM_Base_MspInit+0x18c>)
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b013      	add	sp, #76	; 0x4c
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40021000 	.word	0x40021000
 8002084:	20003140 	.word	0x20003140
 8002088:	40020008 	.word	0x40020008
 800208c:	2000319c 	.word	0x2000319c
 8002090:	4002001c 	.word	0x4002001c
 8002094:	200031f8 	.word	0x200031f8
 8002098:	40020030 	.word	0x40020030

0800209c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b08b      	sub	sp, #44	; 0x2c
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	2414      	movs	r4, #20
 80020a6:	193b      	adds	r3, r7, r4
 80020a8:	0018      	movs	r0, r3
 80020aa:	2314      	movs	r3, #20
 80020ac:	001a      	movs	r2, r3
 80020ae:	2100      	movs	r1, #0
 80020b0:	f005 fce0 	bl	8007a74 <memset>
  if(timHandle->Instance==TIM1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_TIM_MspPostInit+0xb8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d145      	bne.n	800214a <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_TIM_MspPostInit+0xbc>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_TIM_MspPostInit+0xbc>)
 80020c4:	2104      	movs	r1, #4
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_TIM_MspPostInit+0xbc>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	2204      	movs	r2, #4
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_TIM_MspPostInit+0xbc>)
 80020d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_TIM_MspPostInit+0xbc>)
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_TIM_MspPostInit+0xbc>)
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	2201      	movs	r2, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC11     ------> TIM1_CH4
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	193b      	adds	r3, r7, r4
 80020f8:	2202      	movs	r2, #2
 80020fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020fc:	193b      	adds	r3, r7, r4
 80020fe:	2202      	movs	r2, #2
 8002100:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	193b      	adds	r3, r7, r4
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002108:	193b      	adds	r3, r7, r4
 800210a:	2202      	movs	r2, #2
 800210c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	193b      	adds	r3, r7, r4
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <HAL_TIM_MspPostInit+0xc0>)
 8002112:	0019      	movs	r1, r3
 8002114:	0010      	movs	r0, r2
 8002116:	f000 fe4b 	bl	8002db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800211a:	0021      	movs	r1, r4
 800211c:	187b      	adds	r3, r7, r1
 800211e:	22c0      	movs	r2, #192	; 0xc0
 8002120:	00d2      	lsls	r2, r2, #3
 8002122:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2202      	movs	r2, #2
 8002128:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2202      	movs	r2, #2
 800212e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	187b      	adds	r3, r7, r1
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2202      	movs	r2, #2
 800213a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	187a      	adds	r2, r7, r1
 800213e:	23a0      	movs	r3, #160	; 0xa0
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f000 fe33 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b00b      	add	sp, #44	; 0x2c
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40012c00 	.word	0x40012c00
 8002158:	40021000 	.word	0x40021000
 800215c:	50000800 	.word	0x50000800

08002160 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 8002166:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <MX_USART1_UART_Init+0x98>)
 8002168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 800216c:	22e1      	movs	r2, #225	; 0xe1
 800216e:	0252      	lsls	r2, r2, #9
 8002170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 80021aa:	0018      	movs	r0, r3
 80021ac:	f003 fa18 	bl	80055e0 <HAL_UART_Init>
 80021b0:	1e03      	subs	r3, r0, #0
 80021b2:	d001      	beq.n	80021b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021b4:	f7ff fcea 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 80021ba:	2100      	movs	r1, #0
 80021bc:	0018      	movs	r0, r3
 80021be:	f005 fb55 	bl	800786c <HAL_UARTEx_SetTxFifoThreshold>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021c6:	f7ff fce1 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 80021cc:	2100      	movs	r1, #0
 80021ce:	0018      	movs	r0, r3
 80021d0:	f005 fb8c 	bl	80078ec <HAL_UARTEx_SetRxFifoThreshold>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d001      	beq.n	80021dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80021d8:	f7ff fcd8 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <MX_USART1_UART_Init+0x94>)
 80021de:	0018      	movs	r0, r3
 80021e0:	f005 fb0a 	bl	80077f8 <HAL_UARTEx_DisableFifoMode>
 80021e4:	1e03      	subs	r3, r0, #0
 80021e6:	d001      	beq.n	80021ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80021e8:	f7ff fcd0 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	20003254 	.word	0x20003254
 80021f8:	40013800 	.word	0x40013800

080021fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002202:	4a24      	ldr	r2, [pc, #144]	; (8002294 <MX_USART2_UART_Init+0x98>)
 8002204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002208:	22e1      	movs	r2, #225	; 0xe1
 800220a:	0252      	lsls	r2, r2, #9
 800220c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_USART2_UART_Init+0x94>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_USART2_UART_Init+0x94>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_USART2_UART_Init+0x94>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002246:	0018      	movs	r0, r3
 8002248:	f003 f9ca 	bl	80055e0 <HAL_UART_Init>
 800224c:	1e03      	subs	r3, r0, #0
 800224e:	d001      	beq.n	8002254 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002250:	f7ff fc9c 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002256:	2100      	movs	r1, #0
 8002258:	0018      	movs	r0, r3
 800225a:	f005 fb07 	bl	800786c <HAL_UARTEx_SetTxFifoThreshold>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d001      	beq.n	8002266 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002262:	f7ff fc93 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002268:	2100      	movs	r1, #0
 800226a:	0018      	movs	r0, r3
 800226c:	f005 fb3e 	bl	80078ec <HAL_UARTEx_SetRxFifoThreshold>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d001      	beq.n	8002278 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002274:	f7ff fc8a 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <MX_USART2_UART_Init+0x94>)
 800227a:	0018      	movs	r0, r3
 800227c:	f005 fabc 	bl	80077f8 <HAL_UARTEx_DisableFifoMode>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d001      	beq.n	8002288 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002284:	f7ff fc82 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	200032e8 	.word	0x200032e8
 8002294:	40004400 	.word	0x40004400

08002298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b099      	sub	sp, #100	; 0x64
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	234c      	movs	r3, #76	; 0x4c
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	0018      	movs	r0, r3
 80022a6:	2314      	movs	r3, #20
 80022a8:	001a      	movs	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	f005 fbe2 	bl	8007a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b0:	2418      	movs	r4, #24
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	0018      	movs	r0, r3
 80022b6:	2334      	movs	r3, #52	; 0x34
 80022b8:	001a      	movs	r2, r3
 80022ba:	2100      	movs	r1, #0
 80022bc:	f005 fbda 	bl	8007a74 <memset>
  if(uartHandle->Instance==USART1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a5e      	ldr	r2, [pc, #376]	; (8002440 <HAL_UART_MspInit+0x1a8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d146      	bne.n	8002358 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	2200      	movs	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	0018      	movs	r0, r3
 80022da:	f001 fbfb 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022e2:	f7ff fc53 	bl	8001b8c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e6:	4b57      	ldr	r3, [pc, #348]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 80022e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ea:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	01c9      	lsls	r1, r1, #7
 80022f0:	430a      	orrs	r2, r1
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
 80022f4:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 80022f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	01db      	lsls	r3, r3, #7
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 8002304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002306:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 8002308:	2104      	movs	r1, #4
 800230a:	430a      	orrs	r2, r1
 800230c:	635a      	str	r2, [r3, #52]	; 0x34
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	2204      	movs	r2, #4
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800231a:	214c      	movs	r1, #76	; 0x4c
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2230      	movs	r2, #48	; 0x30
 8002320:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2202      	movs	r2, #2
 8002326:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2201      	movs	r2, #1
 8002338:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233a:	187b      	adds	r3, r7, r1
 800233c:	4a42      	ldr	r2, [pc, #264]	; (8002448 <HAL_UART_MspInit+0x1b0>)
 800233e:	0019      	movs	r1, r3
 8002340:	0010      	movs	r0, r2
 8002342:	f000 fd35 	bl	8002db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	201b      	movs	r0, #27
 800234c:	f000 f9e0 	bl	8002710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002350:	201b      	movs	r0, #27
 8002352:	f000 f9f2 	bl	800273a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002356:	e06e      	b.n	8002436 <HAL_UART_MspInit+0x19e>
  else if(uartHandle->Instance==USART2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3b      	ldr	r2, [pc, #236]	; (800244c <HAL_UART_MspInit+0x1b4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d169      	bne.n	8002436 <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002362:	2118      	movs	r1, #24
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2202      	movs	r2, #2
 8002368:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002370:	187b      	adds	r3, r7, r1
 8002372:	0018      	movs	r0, r3
 8002374:	f001 fbae 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 800237c:	f7ff fc06 	bl	8001b8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 8002382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002384:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	0289      	lsls	r1, r1, #10
 800238a:	430a      	orrs	r2, r1
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 8002390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	4013      	ands	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 800239e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	; 0x34
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_UART_MspInit+0x1ac>)
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80023b4:	214c      	movs	r1, #76	; 0x4c
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	220c      	movs	r2, #12
 80023ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2202      	movs	r2, #2
 80023c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	2201      	movs	r2, #1
 80023c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	2201      	movs	r2, #1
 80023d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	187a      	adds	r2, r7, r1
 80023d6:	23a0      	movs	r3, #160	; 0xa0
 80023d8:	05db      	lsls	r3, r3, #23
 80023da:	0011      	movs	r1, r2
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 fce7 	bl	8002db0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel4;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_UART_MspInit+0x1bc>)
 80023e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 80023ea:	2234      	movs	r2, #52	; 0x34
 80023ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 800240e:	2220      	movs	r2, #32
 8002410:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 8002414:	2200      	movs	r2, #0
 8002416:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 800241a:	0018      	movs	r0, r3
 800241c:	f000 f9aa 	bl	8002774 <HAL_DMA_Init>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8002424:	f7ff fbb2 	bl	8001b8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 800242e:	505a      	str	r2, [r3, r1]
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_UART_MspInit+0x1b8>)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	b019      	add	sp, #100	; 0x64
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	40013800 	.word	0x40013800
 8002444:	40021000 	.word	0x40021000
 8002448:	50000800 	.word	0x50000800
 800244c:	40004400 	.word	0x40004400
 8002450:	2000337c 	.word	0x2000337c
 8002454:	40020044 	.word	0x40020044

08002458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002458:	480d      	ldr	r0, [pc, #52]	; (8002490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800245a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800245c:	f7ff fc0e 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <LoopForever+0x6>)
  ldr r1, =_edata
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <LoopForever+0xe>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002478:	4c0a      	ldr	r4, [pc, #40]	; (80024a4 <LoopForever+0x16>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002486:	f005 fad1 	bl	8007a2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800248a:	f7ff f8dd 	bl	8001648 <main>

0800248e <LoopForever>:

LoopForever:
  b LoopForever
 800248e:	e7fe      	b.n	800248e <LoopForever>
  ldr   r0, =_estack
 8002490:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800249c:	08007b88 	.word	0x08007b88
  ldr r2, =_sbss
 80024a0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80024a4:	200033dc 	.word	0x200033dc

080024a8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_COMP_IRQHandler>
	...

080024ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_Init+0x3c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_Init+0x3c>)
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	0049      	lsls	r1, r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 f810 	bl	80024ec <HAL_InitTick>
 80024cc:	1e03      	subs	r3, r0, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024d0:	1dfb      	adds	r3, r7, #7
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e001      	b.n	80024dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fb5e 	bl	8001b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	781b      	ldrb	r3, [r3, #0]
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024f4:	230f      	movs	r3, #15
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_InitTick+0x88>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d02b      	beq.n	800255c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_InitTick+0x8c>)
 8002506:	681c      	ldr	r4, [r3, #0]
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_InitTick+0x88>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	0019      	movs	r1, r3
 800250e:	23fa      	movs	r3, #250	; 0xfa
 8002510:	0098      	lsls	r0, r3, #2
 8002512:	f7fd fdf7 	bl	8000104 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	0019      	movs	r1, r3
 800251a:	0020      	movs	r0, r4
 800251c:	f7fd fdf2 	bl	8000104 <__udivsi3>
 8002520:	0003      	movs	r3, r0
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f919 	bl	800275a <HAL_SYSTICK_Config>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d112      	bne.n	8002552 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d80a      	bhi.n	8002548 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	2301      	movs	r3, #1
 8002536:	425b      	negs	r3, r3
 8002538:	2200      	movs	r2, #0
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f8e8 	bl	8002710 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_InitTick+0x90>)
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e00d      	b.n	8002564 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002548:	230f      	movs	r3, #15
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e008      	b.n	8002564 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002552:	230f      	movs	r3, #15
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e003      	b.n	8002564 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800255c:	230f      	movs	r3, #15
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002564:	230f      	movs	r3, #15
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b005      	add	sp, #20
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	20000014 	.word	0x20000014
 8002578:	2000000c 	.word	0x2000000c
 800257c:	20000010 	.word	0x20000010

08002580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_IncTick+0x1c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	001a      	movs	r2, r3
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_IncTick+0x20>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	18d2      	adds	r2, r2, r3
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_IncTick+0x20>)
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	20000014 	.word	0x20000014
 80025a0:	200033d8 	.word	0x200033d8

080025a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b02      	ldr	r3, [pc, #8]	; (80025b4 <HAL_GetTick+0x10>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	200033d8 	.word	0x200033d8

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b7f      	cmp	r3, #127	; 0x7f
 80025ca:	d809      	bhi.n	80025e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	001a      	movs	r2, r3
 80025d2:	231f      	movs	r3, #31
 80025d4:	401a      	ands	r2, r3
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <__NVIC_EnableIRQ+0x30>)
 80025d8:	2101      	movs	r1, #1
 80025da:	4091      	lsls	r1, r2
 80025dc:	000a      	movs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	0002      	movs	r2, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002600:	d828      	bhi.n	8002654 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002602:	4a2f      	ldr	r2, [pc, #188]	; (80026c0 <__NVIC_SetPriority+0xd4>)
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b25b      	sxtb	r3, r3
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	33c0      	adds	r3, #192	; 0xc0
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	589b      	ldr	r3, [r3, r2]
 8002612:	1dfa      	adds	r2, r7, #7
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	0011      	movs	r1, r2
 8002618:	2203      	movs	r2, #3
 800261a:	400a      	ands	r2, r1
 800261c:	00d2      	lsls	r2, r2, #3
 800261e:	21ff      	movs	r1, #255	; 0xff
 8002620:	4091      	lsls	r1, r2
 8002622:	000a      	movs	r2, r1
 8002624:	43d2      	mvns	r2, r2
 8002626:	401a      	ands	r2, r3
 8002628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	019b      	lsls	r3, r3, #6
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	401a      	ands	r2, r3
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	0018      	movs	r0, r3
 8002638:	2303      	movs	r3, #3
 800263a:	4003      	ands	r3, r0
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002640:	481f      	ldr	r0, [pc, #124]	; (80026c0 <__NVIC_SetPriority+0xd4>)
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b25b      	sxtb	r3, r3
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	430a      	orrs	r2, r1
 800264c:	33c0      	adds	r3, #192	; 0xc0
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002652:	e031      	b.n	80026b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002654:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <__NVIC_SetPriority+0xd8>)
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	0019      	movs	r1, r3
 800265c:	230f      	movs	r3, #15
 800265e:	400b      	ands	r3, r1
 8002660:	3b08      	subs	r3, #8
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3306      	adds	r3, #6
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	18d3      	adds	r3, r2, r3
 800266a:	3304      	adds	r3, #4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1dfa      	adds	r2, r7, #7
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	0011      	movs	r1, r2
 8002674:	2203      	movs	r2, #3
 8002676:	400a      	ands	r2, r1
 8002678:	00d2      	lsls	r2, r2, #3
 800267a:	21ff      	movs	r1, #255	; 0xff
 800267c:	4091      	lsls	r1, r2
 800267e:	000a      	movs	r2, r1
 8002680:	43d2      	mvns	r2, r2
 8002682:	401a      	ands	r2, r3
 8002684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	401a      	ands	r2, r3
 800268e:	1dfb      	adds	r3, r7, #7
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	0018      	movs	r0, r3
 8002694:	2303      	movs	r3, #3
 8002696:	4003      	ands	r3, r0
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <__NVIC_SetPriority+0xd8>)
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	001c      	movs	r4, r3
 80026a4:	230f      	movs	r3, #15
 80026a6:	4023      	ands	r3, r4
 80026a8:	3b08      	subs	r3, #8
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	430a      	orrs	r2, r1
 80026ae:	3306      	adds	r3, #6
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	18c3      	adds	r3, r0, r3
 80026b4:	3304      	adds	r3, #4
 80026b6:	601a      	str	r2, [r3, #0]
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b003      	add	sp, #12
 80026be:	bd90      	pop	{r4, r7, pc}
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	045b      	lsls	r3, r3, #17
 80026d8:	429a      	cmp	r2, r3
 80026da:	d301      	bcc.n	80026e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026dc:	2301      	movs	r3, #1
 80026de:	e010      	b.n	8002702 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <SysTick_Config+0x44>)
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	3a01      	subs	r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e8:	2301      	movs	r3, #1
 80026ea:	425b      	negs	r3, r3
 80026ec:	2103      	movs	r1, #3
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7ff ff7c 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <SysTick_Config+0x44>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Config+0x44>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	210f      	movs	r1, #15
 800271c:	187b      	adds	r3, r7, r1
 800271e:	1c02      	adds	r2, r0, #0
 8002720:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	187b      	adds	r3, r7, r1
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b25b      	sxtb	r3, r3
 800272a:	0011      	movs	r1, r2
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff ff5d 	bl	80025ec <__NVIC_SetPriority>
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	0002      	movs	r2, r0
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002746:	1dfb      	adds	r3, r7, #7
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b25b      	sxtb	r3, r3
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff ff33 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ffaf 	bl	80026c8 <SysTick_Config>
 800276a:	0003      	movs	r3, r0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e077      	b.n	8002876 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a3d      	ldr	r2, [pc, #244]	; (8002880 <HAL_DMA_Init+0x10c>)
 800278c:	4694      	mov	ip, r2
 800278e:	4463      	add	r3, ip
 8002790:	2114      	movs	r1, #20
 8002792:	0018      	movs	r0, r3
 8002794:	f7fd fcb6 	bl	8000104 <__udivsi3>
 8002798:	0003      	movs	r3, r0
 800279a:	009a      	lsls	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2225      	movs	r2, #37	; 0x25
 80027a4:	2102      	movs	r1, #2
 80027a6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4934      	ldr	r1, [pc, #208]	; (8002884 <HAL_DMA_Init+0x110>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fa8d 	bl	8002d10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	01db      	lsls	r3, r3, #7
 80027fe:	429a      	cmp	r2, r3
 8002800:	d102      	bne.n	8002808 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	213f      	movs	r1, #63	; 0x3f
 8002812:	400a      	ands	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800281e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d011      	beq.n	800284c <HAL_DMA_Init+0xd8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d80d      	bhi.n	800284c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 fa98 	bl	8002d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	e008      	b.n	800285e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2225      	movs	r2, #37	; 0x25
 8002868:	2101      	movs	r1, #1
 800286a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	bffdfff8 	.word	0xbffdfff8
 8002884:	ffff800f 	.word	0xffff800f

08002888 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2317      	movs	r3, #23
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2224      	movs	r2, #36	; 0x24
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_DMA_Start_IT+0x24>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e06f      	b.n	800298c <HAL_DMA_Start_IT+0x104>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	2101      	movs	r1, #1
 80028b2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2225      	movs	r2, #37	; 0x25
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d157      	bne.n	8002970 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2225      	movs	r2, #37	; 0x25
 80028c4:	2102      	movs	r1, #2
 80028c6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	438a      	bics	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f9d3 	bl	8002c90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	210e      	movs	r1, #14
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e00f      	b.n	8002924 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2104      	movs	r1, #4
 8002910:	438a      	bics	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	210a      	movs	r1, #10
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	025b      	lsls	r3, r3, #9
 800292e:	4013      	ands	r3, r2
 8002930:	d008      	beq.n	8002944 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	0049      	lsls	r1, r1, #1
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	0049      	lsls	r1, r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e00a      	b.n	8002986 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2224      	movs	r2, #36	; 0x24
 800297a:	2100      	movs	r1, #0
 800297c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800297e:	2317      	movs	r3, #23
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002986:	2317      	movs	r3, #23
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	781b      	ldrb	r3, [r3, #0]
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b006      	add	sp, #24
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e050      	b.n	8002a48 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2225      	movs	r2, #37	; 0x25
 80029aa:	5c9b      	ldrb	r3, [r3, r2]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d008      	beq.n	80029c4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	2100      	movs	r1, #0
 80029be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e041      	b.n	8002a48 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	210e      	movs	r1, #14
 80029d0:	438a      	bics	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	491c      	ldr	r1, [pc, #112]	; (8002a50 <HAL_DMA_Abort+0xbc>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	438a      	bics	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_DMA_Abort+0xc0>)
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	221c      	movs	r2, #28
 80029fe:	4013      	ands	r3, r2
 8002a00:	2201      	movs	r2, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_DMA_Abort+0xc0>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	490a      	ldr	r1, [pc, #40]	; (8002a50 <HAL_DMA_Abort+0xbc>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2225      	movs	r2, #37	; 0x25
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	; 0x24
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	fffffeff 	.word	0xfffffeff
 8002a54:	40020000 	.word	0x40020000

08002a58 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	210f      	movs	r1, #15
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2225      	movs	r2, #37	; 0x25
 8002a6c:	5c9b      	ldrb	r3, [r3, r2]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d006      	beq.n	8002a82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2204      	movs	r2, #4
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e049      	b.n	8002b16 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	210e      	movs	r1, #14
 8002a8e:	438a      	bics	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	491d      	ldr	r1, [pc, #116]	; (8002b24 <HAL_DMA_Abort_IT+0xcc>)
 8002aae:	400a      	ands	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_DMA_Abort_IT+0xd0>)
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	221c      	movs	r2, #28
 8002abc:	4013      	ands	r3, r2
 8002abe:	2201      	movs	r2, #1
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_DMA_Abort_IT+0xd0>)
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ad0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00c      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	490f      	ldr	r1, [pc, #60]	; (8002b24 <HAL_DMA_Abort_IT+0xcc>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002af2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2225      	movs	r2, #37	; 0x25
 8002af8:	2101      	movs	r1, #1
 8002afa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	0010      	movs	r0, r2
 8002b14:	4798      	blx	r3
    }
  }
  return status;
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b004      	add	sp, #16
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	fffffeff 	.word	0xfffffeff
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002b34:	4b55      	ldr	r3, [pc, #340]	; (8002c8c <HAL_DMA_IRQHandler+0x160>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	221c      	movs	r2, #28
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	0013      	movs	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4013      	ands	r3, r2
 8002b54:	d027      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x7a>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d023      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2220      	movs	r2, #32
 8002b66:	4013      	ands	r3, r2
 8002b68:	d107      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2104      	movs	r1, #4
 8002b76:	438a      	bics	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_DMA_IRQHandler+0x160>)
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	221c      	movs	r2, #28
 8002b84:	4013      	ands	r3, r2
 8002b86:	2204      	movs	r2, #4
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_DMA_IRQHandler+0x160>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <HAL_DMA_IRQHandler+0x6e>
 8002b98:	e073      	b.n	8002c82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002ba4:	e06d      	b.n	8002c82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	221c      	movs	r2, #28
 8002bac:	4013      	ands	r3, r2
 8002bae:	2202      	movs	r2, #2
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d02e      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xec>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d02a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d10b      	bne.n	8002be6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	210a      	movs	r1, #10
 8002bda:	438a      	bics	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2225      	movs	r2, #37	; 0x25
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_DMA_IRQHandler+0x160>)
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	221c      	movs	r2, #28
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_DMA_IRQHandler+0x160>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d03a      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	0010      	movs	r0, r2
 8002c14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002c16:	e034      	b.n	8002c82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	221c      	movs	r2, #28
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2208      	movs	r2, #8
 8002c22:	409a      	lsls	r2, r3
 8002c24:	0013      	movs	r3, r2
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d02b      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x158>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2208      	movs	r2, #8
 8002c30:	4013      	ands	r3, r2
 8002c32:	d027      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	210e      	movs	r1, #14
 8002c40:	438a      	bics	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_DMA_IRQHandler+0x160>)
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	221c      	movs	r2, #28
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_DMA_IRQHandler+0x160>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2225      	movs	r2, #37	; 0x25
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	0010      	movs	r0, r2
 8002c80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46c0      	nop			; (mov r8, r8)
}
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40020000 	.word	0x40020000

08002c90 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ca6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002cb8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <DMA_SetConfig+0x7c>)
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	221c      	movs	r2, #28
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <DMA_SetConfig+0x7c>)
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d108      	bne.n	8002cf2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cf0:	e007      	b.n	8002d02 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	40020000 	.word	0x40020000

08002d10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002d20:	4694      	mov	ip, r2
 8002d22:	4463      	add	r3, ip
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	001a      	movs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	001a      	movs	r2, r3
 8002d32:	23ff      	movs	r3, #255	; 0xff
 8002d34:	4013      	ands	r3, r2
 8002d36:	3b08      	subs	r3, #8
 8002d38:	2114      	movs	r1, #20
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7fd f9e2 	bl	8000104 <__udivsi3>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002d48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	221f      	movs	r2, #31
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2201      	movs	r2, #1
 8002d52:	409a      	lsls	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b004      	add	sp, #16
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	10008200 	.word	0x10008200
 8002d64:	40020880 	.word	0x40020880

08002d68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	223f      	movs	r2, #63	; 0x3f
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d7e:	4694      	mov	ip, r2
 8002d80:	4463      	add	r3, ip
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	001a      	movs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	4013      	ands	r3, r2
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	1000823f 	.word	0x1000823f
 8002dac:	40020940 	.word	0x40020940

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbe:	e147      	b.n	8003050 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4091      	lsls	r1, r2
 8002dca:	000a      	movs	r2, r1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d100      	bne.n	8002dd8 <HAL_GPIO_Init+0x28>
 8002dd6:	e138      	b.n	800304a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d005      	beq.n	8002df0 <HAL_GPIO_Init+0x40>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2203      	movs	r2, #3
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d130      	bne.n	8002e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	0013      	movs	r3, r2
 8002e00:	43da      	mvns	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	0013      	movs	r3, r2
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e26:	2201      	movs	r2, #1
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2203      	movs	r2, #3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d017      	beq.n	8002e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d123      	bne.n	8002ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	08da      	lsrs	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3208      	adds	r2, #8
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	58d3      	ldr	r3, [r2, r3]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2207      	movs	r2, #7
 8002eac:	4013      	ands	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2107      	movs	r1, #7
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	6939      	ldr	r1, [r7, #16]
 8002ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	0013      	movs	r3, r2
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	401a      	ands	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	409a      	lsls	r2, r3
 8002f08:	0013      	movs	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	23c0      	movs	r3, #192	; 0xc0
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d100      	bne.n	8002f24 <HAL_GPIO_Init+0x174>
 8002f22:	e092      	b.n	800304a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002f24:	4a50      	ldr	r2, [pc, #320]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	589b      	ldr	r3, [r3, r2]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2203      	movs	r2, #3
 8002f36:	4013      	ands	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	43da      	mvns	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	23a0      	movs	r3, #160	; 0xa0
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d013      	beq.n	8002f7a <HAL_GPIO_Init+0x1ca>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a45      	ldr	r2, [pc, #276]	; (800306c <HAL_GPIO_Init+0x2bc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00d      	beq.n	8002f76 <HAL_GPIO_Init+0x1c6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a44      	ldr	r2, [pc, #272]	; (8003070 <HAL_GPIO_Init+0x2c0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <HAL_GPIO_Init+0x1c2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a43      	ldr	r2, [pc, #268]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <HAL_GPIO_Init+0x1be>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x1cc>
 8002f6e:	2305      	movs	r3, #5
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x1cc>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x1cc>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x1cc>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	2103      	movs	r1, #3
 8002f80:	400a      	ands	r2, r1
 8002f82:	00d2      	lsls	r2, r2, #3
 8002f84:	4093      	lsls	r3, r2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f8c:	4936      	ldr	r1, [pc, #216]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3318      	adds	r3, #24
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	035b      	lsls	r3, r3, #13
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	039b      	lsls	r3, r3, #14
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002ff0:	2384      	movs	r3, #132	; 0x84
 8002ff2:	58d3      	ldr	r3, [r2, r3]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	029b      	lsls	r3, r3, #10
 8003008:	4013      	ands	r3, r2
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003014:	4914      	ldr	r1, [pc, #80]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8003016:	2284      	movs	r2, #132	; 0x84
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800301c:	4a12      	ldr	r2, [pc, #72]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	58d3      	ldr	r3, [r2, r3]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	43da      	mvns	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	025b      	lsls	r3, r3, #9
 8003036:	4013      	ands	r3, r2
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003042:	4909      	ldr	r1, [pc, #36]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3301      	adds	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	40da      	lsrs	r2, r3
 8003058:	1e13      	subs	r3, r2, #0
 800305a:	d000      	beq.n	800305e <HAL_GPIO_Init+0x2ae>
 800305c:	e6b0      	b.n	8002dc0 <HAL_GPIO_Init+0x10>
  }
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b006      	add	sp, #24
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021800 	.word	0x40021800
 800306c:	50000400 	.word	0x50000400
 8003070:	50000800 	.word	0x50000800
 8003074:	50000c00 	.word	0x50000c00

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	0008      	movs	r0, r1
 8003082:	0011      	movs	r1, r2
 8003084:	1cbb      	adds	r3, r7, #2
 8003086:	1c02      	adds	r2, r0, #0
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	1c7b      	adds	r3, r7, #1
 800308c:	1c0a      	adds	r2, r1, #0
 800308e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003090:	1c7b      	adds	r3, r7, #1
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003098:	1cbb      	adds	r3, r7, #2
 800309a:	881a      	ldrh	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a0:	e003      	b.n	80030aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030a2:	1cbb      	adds	r3, r7, #2
 80030a4:	881a      	ldrh	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d11f      	bne.n	8003118 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	0013      	movs	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fd f80c 	bl	8000104 <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030f2:	e008      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e009      	b.n	800311a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	401a      	ands	r2, r3
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	429a      	cmp	r2, r3
 8003116:	d0ed      	beq.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40007000 	.word	0x40007000
 8003128:	fffff9ff 	.word	0xfffff9ff
 800312c:	2000000c 	.word	0x2000000c
 8003130:	000f4240 	.word	0x000f4240

08003134 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <LL_RCC_GetAPB1Prescaler+0x14>)
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	23e0      	movs	r3, #224	; 0xe0
 800313e:	01db      	lsls	r3, r3, #7
 8003140:	4013      	ands	r3, r2
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e2fe      	b.n	800375c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2201      	movs	r2, #1
 8003164:	4013      	ands	r3, r2
 8003166:	d100      	bne.n	800316a <HAL_RCC_OscConfig+0x1e>
 8003168:	e07c      	b.n	8003264 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	4bc3      	ldr	r3, [pc, #780]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2238      	movs	r2, #56	; 0x38
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003174:	4bc0      	ldr	r3, [pc, #768]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2203      	movs	r2, #3
 800317a:	4013      	ands	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b10      	cmp	r3, #16
 8003182:	d102      	bne.n	800318a <HAL_RCC_OscConfig+0x3e>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d002      	beq.n	8003190 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4bb9      	ldr	r3, [pc, #740]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	029b      	lsls	r3, r3, #10
 8003198:	4013      	ands	r3, r2
 800319a:	d062      	beq.n	8003262 <HAL_RCC_OscConfig+0x116>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d15e      	bne.n	8003262 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e2d9      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	025b      	lsls	r3, r3, #9
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x78>
 80031b4:	4bb0      	ldr	r3, [pc, #704]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4baf      	ldr	r3, [pc, #700]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	0249      	lsls	r1, r1, #9
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e020      	b.n	8003206 <HAL_RCC_OscConfig+0xba>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	23a0      	movs	r3, #160	; 0xa0
 80031ca:	02db      	lsls	r3, r3, #11
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d10e      	bne.n	80031ee <HAL_RCC_OscConfig+0xa2>
 80031d0:	4ba9      	ldr	r3, [pc, #676]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4ba8      	ldr	r3, [pc, #672]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	02c9      	lsls	r1, r1, #11
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4ba6      	ldr	r3, [pc, #664]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4ba5      	ldr	r3, [pc, #660]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0249      	lsls	r1, r1, #9
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e00b      	b.n	8003206 <HAL_RCC_OscConfig+0xba>
 80031ee:	4ba2      	ldr	r3, [pc, #648]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4ba1      	ldr	r3, [pc, #644]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031f4:	49a1      	ldr	r1, [pc, #644]	; (800347c <HAL_RCC_OscConfig+0x330>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	4b9f      	ldr	r3, [pc, #636]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b9e      	ldr	r3, [pc, #632]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003200:	499f      	ldr	r1, [pc, #636]	; (8003480 <HAL_RCC_OscConfig+0x334>)
 8003202:	400a      	ands	r2, r1
 8003204:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d014      	beq.n	8003238 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7ff f9c9 	bl	80025a4 <HAL_GetTick>
 8003212:	0003      	movs	r3, r0
 8003214:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7ff f9c4 	bl	80025a4 <HAL_GetTick>
 800321c:	0002      	movs	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e298      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322a:	4b93      	ldr	r3, [pc, #588]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	029b      	lsls	r3, r3, #10
 8003232:	4013      	ands	r3, r2
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xcc>
 8003236:	e015      	b.n	8003264 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7ff f9b4 	bl	80025a4 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003242:	f7ff f9af 	bl	80025a4 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e283      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	4013      	ands	r3, r2
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0xf6>
 8003260:	e000      	b.n	8003264 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003262:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2202      	movs	r2, #2
 800326a:	4013      	ands	r3, r2
 800326c:	d100      	bne.n	8003270 <HAL_RCC_OscConfig+0x124>
 800326e:	e099      	b.n	80033a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003270:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2238      	movs	r2, #56	; 0x38
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327a:	4b7f      	ldr	r3, [pc, #508]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2203      	movs	r2, #3
 8003280:	4013      	ands	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b10      	cmp	r3, #16
 8003288:	d102      	bne.n	8003290 <HAL_RCC_OscConfig+0x144>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d002      	beq.n	8003296 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d135      	bne.n	8003302 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003296:	4b78      	ldr	r3, [pc, #480]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4013      	ands	r3, r2
 80032a0:	d005      	beq.n	80032ae <HAL_RCC_OscConfig+0x162>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e256      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ae:	4b72      	ldr	r3, [pc, #456]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4a74      	ldr	r2, [pc, #464]	; (8003484 <HAL_RCC_OscConfig+0x338>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	021a      	lsls	r2, r3, #8
 80032be:	4b6e      	ldr	r3, [pc, #440]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d112      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032ca:	4b6b      	ldr	r3, [pc, #428]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCC_OscConfig+0x33c>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	0019      	movs	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80032de:	4b66      	ldr	r3, [pc, #408]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0adb      	lsrs	r3, r3, #11
 80032e4:	2207      	movs	r2, #7
 80032e6:	4013      	ands	r3, r2
 80032e8:	4a68      	ldr	r2, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x340>)
 80032ea:	40da      	lsrs	r2, r3
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCC_OscConfig+0x344>)
 80032ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032f0:	4b68      	ldr	r3, [pc, #416]	; (8003494 <HAL_RCC_OscConfig+0x348>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff f8f9 	bl	80024ec <HAL_InitTick>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d051      	beq.n	80033a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e22c      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d030      	beq.n	800336c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800330a:	4b5b      	ldr	r3, [pc, #364]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5e      	ldr	r2, [pc, #376]	; (8003488 <HAL_RCC_OscConfig+0x33c>)
 8003310:	4013      	ands	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800331e:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0049      	lsls	r1, r1, #1
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7ff f93a 	bl	80025a4 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003336:	f7ff f935 	bl	80025a4 <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e209      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003348:	4b4b      	ldr	r3, [pc, #300]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4013      	ands	r3, r2
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b48      	ldr	r3, [pc, #288]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a4a      	ldr	r2, [pc, #296]	; (8003484 <HAL_RCC_OscConfig+0x338>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	021a      	lsls	r2, r3, #8
 8003364:	4b44      	ldr	r3, [pc, #272]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	e01b      	b.n	80033a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800336c:	4b42      	ldr	r3, [pc, #264]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b41      	ldr	r3, [pc, #260]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003372:	4949      	ldr	r1, [pc, #292]	; (8003498 <HAL_RCC_OscConfig+0x34c>)
 8003374:	400a      	ands	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7ff f914 	bl	80025a4 <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7ff f90f 	bl	80025a4 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1e3      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003394:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4013      	ands	r3, r2
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x236>
 80033a0:	e000      	b.n	80033a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2208      	movs	r2, #8
 80033aa:	4013      	ands	r3, r2
 80033ac:	d047      	beq.n	800343e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2238      	movs	r2, #56	; 0x38
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b18      	cmp	r3, #24
 80033b8:	d10a      	bne.n	80033d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80033ba:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80033bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033be:	2202      	movs	r2, #2
 80033c0:	4013      	ands	r3, r2
 80033c2:	d03c      	beq.n	800343e <HAL_RCC_OscConfig+0x2f2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d138      	bne.n	800343e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e1c5      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d019      	beq.n	800340c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80033da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 80033de:	2101      	movs	r1, #1
 80033e0:	430a      	orrs	r2, r1
 80033e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7ff f8de 	bl	80025a4 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ee:	f7ff f8d9 	bl	80025a4 <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1ad      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003404:	2202      	movs	r2, #2
 8003406:	4013      	ands	r3, r2
 8003408:	d0f1      	beq.n	80033ee <HAL_RCC_OscConfig+0x2a2>
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 800340e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003412:	2101      	movs	r1, #1
 8003414:	438a      	bics	r2, r1
 8003416:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7ff f8c4 	bl	80025a4 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003422:	f7ff f8bf 	bl	80025a4 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e193      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003438:	2202      	movs	r2, #2
 800343a:	4013      	ands	r3, r2
 800343c:	d1f1      	bne.n	8003422 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2204      	movs	r2, #4
 8003444:	4013      	ands	r3, r2
 8003446:	d100      	bne.n	800344a <HAL_RCC_OscConfig+0x2fe>
 8003448:	e0c6      	b.n	80035d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344a:	231f      	movs	r3, #31
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2238      	movs	r2, #56	; 0x38
 8003458:	4013      	ands	r3, r2
 800345a:	2b20      	cmp	r3, #32
 800345c:	d11e      	bne.n	800349c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x32c>)
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	d100      	bne.n	800346a <HAL_RCC_OscConfig+0x31e>
 8003468:	e0b6      	b.n	80035d8 <HAL_RCC_OscConfig+0x48c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d000      	beq.n	8003474 <HAL_RCC_OscConfig+0x328>
 8003472:	e0b1      	b.n	80035d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e171      	b.n	800375c <HAL_RCC_OscConfig+0x610>
 8003478:	40021000 	.word	0x40021000
 800347c:	fffeffff 	.word	0xfffeffff
 8003480:	fffbffff 	.word	0xfffbffff
 8003484:	ffff80ff 	.word	0xffff80ff
 8003488:	ffffc7ff 	.word	0xffffc7ff
 800348c:	00f42400 	.word	0x00f42400
 8003490:	2000000c 	.word	0x2000000c
 8003494:	20000010 	.word	0x20000010
 8003498:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349c:	4bb1      	ldr	r3, [pc, #708]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	055b      	lsls	r3, r3, #21
 80034a4:	4013      	ands	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x360>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x362>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d011      	beq.n	80034d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4bac      	ldr	r3, [pc, #688]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80034b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b6:	4bab      	ldr	r3, [pc, #684]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	0549      	lsls	r1, r1, #21
 80034bc:	430a      	orrs	r2, r1
 80034be:	63da      	str	r2, [r3, #60]	; 0x3c
 80034c0:	4ba8      	ldr	r3, [pc, #672]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80034c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	055b      	lsls	r3, r3, #21
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80034ce:	231f      	movs	r3, #31
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d6:	4ba4      	ldr	r3, [pc, #656]	; (8003768 <HAL_RCC_OscConfig+0x61c>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4013      	ands	r3, r2
 80034e0:	d11a      	bne.n	8003518 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e2:	4ba1      	ldr	r3, [pc, #644]	; (8003768 <HAL_RCC_OscConfig+0x61c>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCC_OscConfig+0x61c>)
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	0049      	lsls	r1, r1, #1
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80034f0:	f7ff f858 	bl	80025a4 <HAL_GetTick>
 80034f4:	0003      	movs	r3, r0
 80034f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7ff f853 	bl	80025a4 <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e127      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350c:	4b96      	ldr	r3, [pc, #600]	; (8003768 <HAL_RCC_OscConfig+0x61c>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4013      	ands	r3, r2
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x3e2>
 8003520:	4b90      	ldr	r3, [pc, #576]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003524:	4b8f      	ldr	r3, [pc, #572]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003526:	2101      	movs	r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	65da      	str	r2, [r3, #92]	; 0x5c
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x41c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b05      	cmp	r3, #5
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x404>
 8003536:	4b8b      	ldr	r3, [pc, #556]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800353a:	4b8a      	ldr	r3, [pc, #552]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 800353c:	2104      	movs	r1, #4
 800353e:	430a      	orrs	r2, r1
 8003540:	65da      	str	r2, [r3, #92]	; 0x5c
 8003542:	4b88      	ldr	r3, [pc, #544]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003546:	4b87      	ldr	r3, [pc, #540]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003548:	2101      	movs	r1, #1
 800354a:	430a      	orrs	r2, r1
 800354c:	65da      	str	r2, [r3, #92]	; 0x5c
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0x41c>
 8003550:	4b84      	ldr	r3, [pc, #528]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003554:	4b83      	ldr	r3, [pc, #524]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003556:	2101      	movs	r1, #1
 8003558:	438a      	bics	r2, r1
 800355a:	65da      	str	r2, [r3, #92]	; 0x5c
 800355c:	4b81      	ldr	r3, [pc, #516]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 800355e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003560:	4b80      	ldr	r3, [pc, #512]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003562:	2104      	movs	r1, #4
 8003564:	438a      	bics	r2, r1
 8003566:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d014      	beq.n	800359a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7ff f818 	bl	80025a4 <HAL_GetTick>
 8003574:	0003      	movs	r3, r0
 8003576:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003578:	e009      	b.n	800358e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7ff f813 	bl	80025a4 <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	4a79      	ldr	r2, [pc, #484]	; (800376c <HAL_RCC_OscConfig+0x620>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0e6      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	4b75      	ldr	r3, [pc, #468]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x42e>
 8003598:	e013      	b.n	80035c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7ff f803 	bl	80025a4 <HAL_GetTick>
 800359e:	0003      	movs	r3, r0
 80035a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a2:	e009      	b.n	80035b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe fffe 	bl	80025a4 <HAL_GetTick>
 80035a8:	0002      	movs	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	4a6f      	ldr	r2, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x620>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0d1      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	2202      	movs	r2, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80035c2:	231f      	movs	r3, #31
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b65      	ldr	r3, [pc, #404]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80035ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d0:	4b64      	ldr	r3, [pc, #400]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80035d2:	4967      	ldr	r1, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x624>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d100      	bne.n	80035e2 <HAL_RCC_OscConfig+0x496>
 80035e0:	e0bb      	b.n	800375a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e2:	4b60      	ldr	r3, [pc, #384]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2238      	movs	r2, #56	; 0x38
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d100      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4a4>
 80035ee:	e07b      	b.n	80036e8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d156      	bne.n	80036a6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b5a      	ldr	r3, [pc, #360]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80035fe:	495d      	ldr	r1, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x628>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe ffce 	bl	80025a4 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe ffc9 	bl	80025a4 <HAL_GetTick>
 8003612:	0002      	movs	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e09d      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	049b      	lsls	r3, r3, #18
 8003628:	4013      	ands	r3, r2
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362c:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a51      	ldr	r2, [pc, #324]	; (8003778 <HAL_RCC_OscConfig+0x62c>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1a      	ldr	r2, [r3, #32]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	431a      	orrs	r2, r3
 800365a:	4b42      	ldr	r3, [pc, #264]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 800365c:	430a      	orrs	r2, r1
 800365e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	0449      	lsls	r1, r1, #17
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	4b3c      	ldr	r3, [pc, #240]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	0549      	lsls	r1, r1, #21
 8003678:	430a      	orrs	r2, r1
 800367a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe ff92 	bl	80025a4 <HAL_GetTick>
 8003680:	0003      	movs	r3, r0
 8003682:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe ff8d 	bl	80025a4 <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e061      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	049b      	lsls	r3, r3, #18
 80036a0:	4013      	ands	r3, r2
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x53a>
 80036a4:	e059      	b.n	800375a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80036ac:	4931      	ldr	r1, [pc, #196]	; (8003774 <HAL_RCC_OscConfig+0x628>)
 80036ae:	400a      	ands	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fe ff77 	bl	80025a4 <HAL_GetTick>
 80036b6:	0003      	movs	r3, r0
 80036b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe ff72 	bl	80025a4 <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e046      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	049b      	lsls	r3, r3, #18
 80036d6:	4013      	ands	r3, r2
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80036e0:	4926      	ldr	r1, [pc, #152]	; (800377c <HAL_RCC_OscConfig+0x630>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e038      	b.n	800375a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e033      	b.n	800375c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_RCC_OscConfig+0x618>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2203      	movs	r2, #3
 80036fe:	401a      	ands	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	429a      	cmp	r2, r3
 8003706:	d126      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2270      	movs	r2, #112	; 0x70
 800370c:	401a      	ands	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d11f      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	23fe      	movs	r3, #254	; 0xfe
 800371a:	01db      	lsls	r3, r3, #7
 800371c:	401a      	ands	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d116      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	23f8      	movs	r3, #248	; 0xf8
 800372c:	039b      	lsls	r3, r3, #14
 800372e:	401a      	ands	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d10e      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	23e0      	movs	r3, #224	; 0xe0
 800373c:	051b      	lsls	r3, r3, #20
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	0f5b      	lsrs	r3, r3, #29
 800374c:	075a      	lsls	r2, r3, #29
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b008      	add	sp, #32
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	40007000 	.word	0x40007000
 800376c:	00001388 	.word	0x00001388
 8003770:	efffffff 	.word	0xefffffff
 8003774:	feffffff 	.word	0xfeffffff
 8003778:	11c1808c 	.word	0x11c1808c
 800377c:	eefefffc 	.word	0xeefefffc

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0e9      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2207      	movs	r2, #7
 800379a:	4013      	ands	r3, r2
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d91e      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b73      	ldr	r3, [pc, #460]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2207      	movs	r2, #7
 80037a8:	4393      	bics	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	4b70      	ldr	r3, [pc, #448]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037b4:	f7fe fef6 	bl	80025a4 <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037bc:	e009      	b.n	80037d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037be:	f7fe fef1 	bl	80025a4 <HAL_GetTick>
 80037c2:	0002      	movs	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	4a6a      	ldr	r2, [pc, #424]	; (8003974 <HAL_RCC_ClockConfig+0x1f4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0ca      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2207      	movs	r2, #7
 80037d8:	4013      	ands	r3, r2
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1ee      	bne.n	80037be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2202      	movs	r2, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	d015      	beq.n	8003816 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2204      	movs	r2, #4
 80037f0:	4013      	ands	r3, r2
 80037f2:	d006      	beq.n	8003802 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037f4:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b5f      	ldr	r3, [pc, #380]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 80037fa:	21e0      	movs	r1, #224	; 0xe0
 80037fc:	01c9      	lsls	r1, r1, #7
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003802:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4a5d      	ldr	r2, [pc, #372]	; (800397c <HAL_RCC_ClockConfig+0x1fc>)
 8003808:	4013      	ands	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003812:	430a      	orrs	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	4013      	ands	r3, r2
 800381e:	d057      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	029b      	lsls	r3, r3, #10
 8003830:	4013      	ands	r3, r2
 8003832:	d12b      	bne.n	800388c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e097      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d107      	bne.n	8003850 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003840:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	049b      	lsls	r3, r3, #18
 8003848:	4013      	ands	r3, r2
 800384a:	d11f      	bne.n	800388c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e08b      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003858:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4013      	ands	r3, r2
 8003862:	d113      	bne.n	800388c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e07f      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d106      	bne.n	800387e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	2202      	movs	r2, #2
 8003876:	4013      	ands	r3, r2
 8003878:	d108      	bne.n	800388c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e074      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	2202      	movs	r2, #2
 8003884:	4013      	ands	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e06d      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800388c:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2207      	movs	r2, #7
 8003892:	4393      	bics	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4b37      	ldr	r3, [pc, #220]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe fe80 	bl	80025a4 <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a8:	e009      	b.n	80038be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038aa:	f7fe fe7b 	bl	80025a4 <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <HAL_RCC_ClockConfig+0x1f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e054      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2238      	movs	r2, #56	; 0x38
 80038c4:	401a      	ands	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1ec      	bne.n	80038aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2207      	movs	r2, #7
 80038d6:	4013      	ands	r3, r2
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d21e      	bcs.n	800391c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2207      	movs	r2, #7
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038f0:	f7fe fe58 	bl	80025a4 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038f8:	e009      	b.n	800390e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fa:	f7fe fe53 	bl	80025a4 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_RCC_ClockConfig+0x1f4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e02c      	b.n	8003968 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2207      	movs	r2, #7
 8003914:	4013      	ands	r3, r2
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2204      	movs	r2, #4
 8003922:	4013      	ands	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	4a15      	ldr	r2, [pc, #84]	; (8003980 <HAL_RCC_ClockConfig+0x200>)
 800392c:	4013      	ands	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800393a:	f000 f829 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800393e:	0001      	movs	r1, r0
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	220f      	movs	r2, #15
 8003948:	401a      	ands	r2, r3
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x204>)
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	58d3      	ldr	r3, [r2, r3]
 8003950:	221f      	movs	r2, #31
 8003952:	4013      	ands	r3, r2
 8003954:	000a      	movs	r2, r1
 8003956:	40da      	lsrs	r2, r3
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x208>)
 800395a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_ClockConfig+0x20c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0018      	movs	r0, r3
 8003962:	f7fe fdc3 	bl	80024ec <HAL_InitTick>
 8003966:	0003      	movs	r3, r0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40022000 	.word	0x40022000
 8003974:	00001388 	.word	0x00001388
 8003978:	40021000 	.word	0x40021000
 800397c:	fffff0ff 	.word	0xfffff0ff
 8003980:	ffff8fff 	.word	0xffff8fff
 8003984:	08007a9c 	.word	0x08007a9c
 8003988:	2000000c 	.word	0x2000000c
 800398c:	20000010 	.word	0x20000010

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003996:	4b3c      	ldr	r3, [pc, #240]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2238      	movs	r2, #56	; 0x38
 800399c:	4013      	ands	r3, r2
 800399e:	d10f      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80039a0:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0adb      	lsrs	r3, r3, #11
 80039a6:	2207      	movs	r2, #7
 80039a8:	4013      	ands	r3, r2
 80039aa:	2201      	movs	r2, #1
 80039ac:	409a      	lsls	r2, r3
 80039ae:	0013      	movs	r3, r2
 80039b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	4835      	ldr	r0, [pc, #212]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 80039b6:	f7fc fba5 	bl	8000104 <__udivsi3>
 80039ba:	0003      	movs	r3, r0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e05d      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c0:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2238      	movs	r2, #56	; 0x38
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d102      	bne.n	80039d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039cc:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x100>)
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e054      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2238      	movs	r2, #56	; 0x38
 80039d8:	4013      	ands	r3, r2
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d138      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2203      	movs	r2, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039e8:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	2207      	movs	r2, #7
 80039f0:	4013      	ands	r3, r2
 80039f2:	3301      	adds	r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4824      	ldr	r0, [pc, #144]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a00:	f7fc fb80 	bl	8000104 <__udivsi3>
 8003a04:	0003      	movs	r3, r0
 8003a06:	0019      	movs	r1, r3
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	227f      	movs	r2, #127	; 0x7f
 8003a10:	4013      	ands	r3, r2
 8003a12:	434b      	muls	r3, r1
 8003a14:	617b      	str	r3, [r7, #20]
        break;
 8003a16:	e00d      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	481c      	ldr	r0, [pc, #112]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a1c:	f7fc fb72 	bl	8000104 <__udivsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	0019      	movs	r1, r3
 8003a24:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	227f      	movs	r2, #127	; 0x7f
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	434b      	muls	r3, r1
 8003a30:	617b      	str	r3, [r7, #20]
        break;
 8003a32:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0f5b      	lsrs	r3, r3, #29
 8003a3a:	2207      	movs	r2, #7
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	3301      	adds	r3, #1
 8003a40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	6978      	ldr	r0, [r7, #20]
 8003a46:	f7fc fb5d 	bl	8000104 <__udivsi3>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	e015      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2238      	movs	r2, #56	; 0x38
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d103      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2238      	movs	r2, #56	; 0x38
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b18      	cmp	r3, #24
 8003a6e:	d103      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a70:	23fa      	movs	r3, #250	; 0xfa
 8003a72:	01db      	lsls	r3, r3, #7
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e001      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a7c:	693b      	ldr	r3, [r7, #16]
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b006      	add	sp, #24
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	007a1200 	.word	0x007a1200

08003a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b5b0      	push	{r4, r5, r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003aac:	f7ff fff2 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ab0:	0004      	movs	r4, r0
 8003ab2:	f7ff fb3f 	bl	8003134 <LL_RCC_GetAPB1Prescaler>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	0b1a      	lsrs	r2, r3, #12
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003abc:	0092      	lsls	r2, r2, #2
 8003abe:	58d3      	ldr	r3, [r2, r3]
 8003ac0:	221f      	movs	r2, #31
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	40dc      	lsrs	r4, r3
 8003ac6:	0023      	movs	r3, r4
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	08007adc 	.word	0x08007adc

08003ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003adc:	2313      	movs	r3, #19
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae4:	2312      	movs	r3, #18
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	4013      	ands	r3, r2
 8003af6:	d100      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003af8:	e0a3      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2011      	movs	r0, #17
 8003afc:	183b      	adds	r3, r7, r0
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4bc3      	ldr	r3, [pc, #780]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	055b      	lsls	r3, r3, #21
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d110      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4bc0      	ldr	r3, [pc, #768]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b12:	4bbf      	ldr	r3, [pc, #764]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	0549      	lsls	r1, r1, #21
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b1c:	4bbc      	ldr	r3, [pc, #752]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	055b      	lsls	r3, r3, #21
 8003b24:	4013      	ands	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b30:	4bb8      	ldr	r3, [pc, #736]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4bb7      	ldr	r3, [pc, #732]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0049      	lsls	r1, r1, #1
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe fd31 	bl	80025a4 <HAL_GetTick>
 8003b42:	0003      	movs	r3, r0
 8003b44:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b46:	e00b      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b48:	f7fe fd2c 	bl	80025a4 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d904      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003b56:	2313      	movs	r3, #19
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	701a      	strb	r2, [r3, #0]
        break;
 8003b5e:	e005      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b60:	4bac      	ldr	r3, [pc, #688]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d0ed      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003b6c:	2313      	movs	r3, #19
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d154      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b76:	4ba6      	ldr	r3, [pc, #664]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b7a:	23c0      	movs	r3, #192	; 0xc0
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d014      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b92:	4b9f      	ldr	r3, [pc, #636]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	4aa0      	ldr	r2, [pc, #640]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b9c:	4b9c      	ldr	r3, [pc, #624]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ba0:	4b9b      	ldr	r3, [pc, #620]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	0249      	lsls	r1, r1, #9
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003baa:	4b99      	ldr	r3, [pc, #612]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bae:	4b98      	ldr	r3, [pc, #608]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bb0:	499a      	ldr	r1, [pc, #616]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003bb2:	400a      	ands	r2, r1
 8003bb4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb6:	4b96      	ldr	r3, [pc, #600]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d016      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fcee 	bl	80025a4 <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	e00c      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fe fce9 	bl	80025a4 <HAL_GetTick>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	4a91      	ldr	r2, [pc, #580]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d904      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003bde:	2313      	movs	r3, #19
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2203      	movs	r2, #3
 8003be4:	701a      	strb	r2, [r3, #0]
            break;
 8003be6:	e004      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be8:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	2202      	movs	r2, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d0ed      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003bf2:	2313      	movs	r3, #19
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfc:	4b84      	ldr	r3, [pc, #528]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	4a85      	ldr	r2, [pc, #532]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	0019      	movs	r1, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c10:	e00c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c12:	2312      	movs	r3, #18
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	2213      	movs	r2, #19
 8003c18:	18ba      	adds	r2, r7, r2
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	2312      	movs	r3, #18
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	2213      	movs	r2, #19
 8003c26:	18ba      	adds	r2, r7, r2
 8003c28:	7812      	ldrb	r2, [r2, #0]
 8003c2a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c2c:	2311      	movs	r3, #17
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3a:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c3c:	4979      	ldr	r1, [pc, #484]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003c3e:	400a      	ands	r2, r1
 8003c40:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4c:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	2203      	movs	r2, #3
 8003c52:	4393      	bics	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2202      	movs	r2, #2
 8003c66:	4013      	ands	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c6a:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	220c      	movs	r2, #12
 8003c70:	4393      	bics	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2210      	movs	r2, #16
 8003c84:	4013      	ands	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c88:	4b61      	ldr	r3, [pc, #388]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	4a66      	ldr	r2, [pc, #408]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	4b5e      	ldr	r3, [pc, #376]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca8:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	4a5f      	ldr	r2, [pc, #380]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	4b56      	ldr	r3, [pc, #344]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cc8:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	01db      	lsls	r3, r3, #7
 8003d02:	4013      	ands	r3, r2
 8003d04:	d015      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d06:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	0899      	lsrs	r1, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1a      	ldr	r2, [r3, #32]
 8003d12:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d14:	430a      	orrs	r2, r1
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	05db      	lsls	r3, r3, #23
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d106      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d24:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	0249      	lsls	r1, r1, #9
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	031b      	lsls	r3, r3, #12
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	2240      	movs	r2, #64	; 0x40
 8003d44:	4393      	bics	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4c:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	039b      	lsls	r3, r3, #14
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d5e:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	03db      	lsls	r3, r3, #15
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	0449      	lsls	r1, r1, #17
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	03db      	lsls	r3, r3, #15
 8003d94:	4013      	ands	r3, r2
 8003d96:	d016      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	4a27      	ldr	r2, [pc, #156]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	045b      	lsls	r3, r3, #17
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	0449      	lsls	r1, r1, #17
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d016      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	0019      	movs	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003de2:	430a      	orrs	r2, r1
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	01db      	lsls	r3, r3, #7
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d106      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	0249      	lsls	r1, r1, #9
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e00:	2312      	movs	r3, #18
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	781b      	ldrb	r3, [r3, #0]
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b006      	add	sp, #24
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	fffffcff 	.word	0xfffffcff
 8003e1c:	fffeffff 	.word	0xfffeffff
 8003e20:	00001388 	.word	0x00001388
 8003e24:	efffffff 	.word	0xefffffff
 8003e28:	fffff3ff 	.word	0xfffff3ff
 8003e2c:	fff3ffff 	.word	0xfff3ffff
 8003e30:	ffcfffff 	.word	0xffcfffff
 8003e34:	ffffcfff 	.word	0xffffcfff
 8003e38:	ffbfffff 	.word	0xffbfffff
 8003e3c:	feffffff 	.word	0xfeffffff
 8003e40:	ffff3fff 	.word	0xffff3fff

08003e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e04a      	b.n	8003eec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	223d      	movs	r2, #61	; 0x3d
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	223c      	movs	r2, #60	; 0x3c
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fe f841 	bl	8001ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	223d      	movs	r2, #61	; 0x3d
 8003e76:	2102      	movs	r1, #2
 8003e78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	0019      	movs	r1, r3
 8003e84:	0010      	movs	r0, r2
 8003e86:	f000 fe93 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2248      	movs	r2, #72	; 0x48
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223e      	movs	r2, #62	; 0x3e
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223f      	movs	r2, #63	; 0x3f
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2240      	movs	r2, #64	; 0x40
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2241      	movs	r2, #65	; 0x41
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2242      	movs	r2, #66	; 0x42
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2243      	movs	r2, #67	; 0x43
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2244      	movs	r2, #68	; 0x44
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2245      	movs	r2, #69	; 0x45
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2246      	movs	r2, #70	; 0x46
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2247      	movs	r2, #71	; 0x47
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	223d      	movs	r2, #61	; 0x3d
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	223d      	movs	r2, #61	; 0x3d
 8003f00:	5c9b      	ldrb	r3, [r3, r2]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d001      	beq.n	8003f0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e03a      	b.n	8003f82 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	223d      	movs	r2, #61	; 0x3d
 8003f10:	2102      	movs	r1, #2
 8003f12:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <HAL_TIM_Base_Start+0x98>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00f      	beq.n	8003f3e <HAL_TIM_Base_Start+0x4a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	05db      	lsls	r3, r3, #23
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d009      	beq.n	8003f3e <HAL_TIM_Base_Start+0x4a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_TIM_Base_Start+0x9c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_TIM_Base_Start+0x4a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <HAL_TIM_Base_Start+0xa0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d116      	bne.n	8003f6c <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <HAL_TIM_Base_Start+0xa4>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b06      	cmp	r3, #6
 8003f4e:	d016      	beq.n	8003f7e <HAL_TIM_Base_Start+0x8a>
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	025b      	lsls	r3, r3, #9
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d011      	beq.n	8003f7e <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	e008      	b.n	8003f7e <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b004      	add	sp, #16
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	00010007 	.word	0x00010007

08003f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e04a      	b.n	8004044 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	223d      	movs	r2, #61	; 0x3d
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	223c      	movs	r2, #60	; 0x3c
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 f841 	bl	800404c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	223d      	movs	r2, #61	; 0x3d
 8003fce:	2102      	movs	r1, #2
 8003fd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	0019      	movs	r1, r3
 8003fdc:	0010      	movs	r0, r2
 8003fde:	f000 fde7 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2248      	movs	r2, #72	; 0x48
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	223e      	movs	r2, #62	; 0x3e
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	223f      	movs	r2, #63	; 0x3f
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	5499      	strb	r1, [r3, r2]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2240      	movs	r2, #64	; 0x40
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2241      	movs	r2, #65	; 0x41
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2242      	movs	r2, #66	; 0x42
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2243      	movs	r2, #67	; 0x43
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2244      	movs	r2, #68	; 0x44
 800401e:	2101      	movs	r1, #1
 8004020:	5499      	strb	r1, [r3, r2]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2245      	movs	r2, #69	; 0x45
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2246      	movs	r2, #70	; 0x46
 800402e:	2101      	movs	r1, #1
 8004030:	5499      	strb	r1, [r3, r2]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2247      	movs	r2, #71	; 0x47
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	223d      	movs	r2, #61	; 0x3d
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	001a      	movs	r2, r3
 800406a:	1cbb      	adds	r3, r7, #2
 800406c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2317      	movs	r3, #23
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d108      	bne.n	800408e <HAL_TIM_PWM_Start_DMA+0x32>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	223e      	movs	r2, #62	; 0x3e
 8004080:	5c9b      	ldrb	r3, [r3, r2]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	3b02      	subs	r3, #2
 8004086:	425a      	negs	r2, r3
 8004088:	4153      	adcs	r3, r2
 800408a:	b2db      	uxtb	r3, r3
 800408c:	e037      	b.n	80040fe <HAL_TIM_PWM_Start_DMA+0xa2>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b04      	cmp	r3, #4
 8004092:	d108      	bne.n	80040a6 <HAL_TIM_PWM_Start_DMA+0x4a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	223f      	movs	r2, #63	; 0x3f
 8004098:	5c9b      	ldrb	r3, [r3, r2]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3b02      	subs	r3, #2
 800409e:	425a      	negs	r2, r3
 80040a0:	4153      	adcs	r3, r2
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	e02b      	b.n	80040fe <HAL_TIM_PWM_Start_DMA+0xa2>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d108      	bne.n	80040be <HAL_TIM_PWM_Start_DMA+0x62>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3b02      	subs	r3, #2
 80040b6:	425a      	negs	r2, r3
 80040b8:	4153      	adcs	r3, r2
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e01f      	b.n	80040fe <HAL_TIM_PWM_Start_DMA+0xa2>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	d108      	bne.n	80040d6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2241      	movs	r2, #65	; 0x41
 80040c8:	5c9b      	ldrb	r3, [r3, r2]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3b02      	subs	r3, #2
 80040ce:	425a      	negs	r2, r3
 80040d0:	4153      	adcs	r3, r2
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e013      	b.n	80040fe <HAL_TIM_PWM_Start_DMA+0xa2>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d108      	bne.n	80040ee <HAL_TIM_PWM_Start_DMA+0x92>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2242      	movs	r2, #66	; 0x42
 80040e0:	5c9b      	ldrb	r3, [r3, r2]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3b02      	subs	r3, #2
 80040e6:	425a      	negs	r2, r3
 80040e8:	4153      	adcs	r3, r2
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e007      	b.n	80040fe <HAL_TIM_PWM_Start_DMA+0xa2>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2243      	movs	r2, #67	; 0x43
 80040f2:	5c9b      	ldrb	r3, [r3, r2]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3b02      	subs	r3, #2
 80040f8:	425a      	negs	r2, r3
 80040fa:	4153      	adcs	r3, r2
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
 8004104:	e193      	b.n	800442e <HAL_TIM_PWM_Start_DMA+0x3d2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d108      	bne.n	800411e <HAL_TIM_PWM_Start_DMA+0xc2>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	223e      	movs	r2, #62	; 0x3e
 8004110:	5c9b      	ldrb	r3, [r3, r2]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	425a      	negs	r2, r3
 8004118:	4153      	adcs	r3, r2
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e037      	b.n	800418e <HAL_TIM_PWM_Start_DMA+0x132>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d108      	bne.n	8004136 <HAL_TIM_PWM_Start_DMA+0xda>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	223f      	movs	r2, #63	; 0x3f
 8004128:	5c9b      	ldrb	r3, [r3, r2]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	425a      	negs	r2, r3
 8004130:	4153      	adcs	r3, r2
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e02b      	b.n	800418e <HAL_TIM_PWM_Start_DMA+0x132>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d108      	bne.n	800414e <HAL_TIM_PWM_Start_DMA+0xf2>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	425a      	negs	r2, r3
 8004148:	4153      	adcs	r3, r2
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e01f      	b.n	800418e <HAL_TIM_PWM_Start_DMA+0x132>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d108      	bne.n	8004166 <HAL_TIM_PWM_Start_DMA+0x10a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2241      	movs	r2, #65	; 0x41
 8004158:	5c9b      	ldrb	r3, [r3, r2]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	425a      	negs	r2, r3
 8004160:	4153      	adcs	r3, r2
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e013      	b.n	800418e <HAL_TIM_PWM_Start_DMA+0x132>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b10      	cmp	r3, #16
 800416a:	d108      	bne.n	800417e <HAL_TIM_PWM_Start_DMA+0x122>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2242      	movs	r2, #66	; 0x42
 8004170:	5c9b      	ldrb	r3, [r3, r2]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	425a      	negs	r2, r3
 8004178:	4153      	adcs	r3, r2
 800417a:	b2db      	uxtb	r3, r3
 800417c:	e007      	b.n	800418e <HAL_TIM_PWM_Start_DMA+0x132>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2243      	movs	r2, #67	; 0x43
 8004182:	5c9b      	ldrb	r3, [r3, r2]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	425a      	negs	r2, r3
 800418a:	4153      	adcs	r3, r2
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d035      	beq.n	80041fe <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_TIM_PWM_Start_DMA+0x144>
 8004198:	1cbb      	adds	r3, r7, #2
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e144      	b.n	800442e <HAL_TIM_PWM_Start_DMA+0x3d2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d104      	bne.n	80041b4 <HAL_TIM_PWM_Start_DMA+0x158>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	223e      	movs	r2, #62	; 0x3e
 80041ae:	2102      	movs	r1, #2
 80041b0:	5499      	strb	r1, [r3, r2]
 80041b2:	e026      	b.n	8004202 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d104      	bne.n	80041c4 <HAL_TIM_PWM_Start_DMA+0x168>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	223f      	movs	r2, #63	; 0x3f
 80041be:	2102      	movs	r1, #2
 80041c0:	5499      	strb	r1, [r3, r2]
 80041c2:	e01e      	b.n	8004202 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d104      	bne.n	80041d4 <HAL_TIM_PWM_Start_DMA+0x178>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2240      	movs	r2, #64	; 0x40
 80041ce:	2102      	movs	r1, #2
 80041d0:	5499      	strb	r1, [r3, r2]
 80041d2:	e016      	b.n	8004202 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d104      	bne.n	80041e4 <HAL_TIM_PWM_Start_DMA+0x188>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2241      	movs	r2, #65	; 0x41
 80041de:	2102      	movs	r1, #2
 80041e0:	5499      	strb	r1, [r3, r2]
 80041e2:	e00e      	b.n	8004202 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d104      	bne.n	80041f4 <HAL_TIM_PWM_Start_DMA+0x198>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2242      	movs	r2, #66	; 0x42
 80041ee:	2102      	movs	r1, #2
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	e006      	b.n	8004202 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2243      	movs	r2, #67	; 0x43
 80041f8:	2102      	movs	r1, #2
 80041fa:	5499      	strb	r1, [r3, r2]
 80041fc:	e001      	b.n	8004202 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e115      	b.n	800442e <HAL_TIM_PWM_Start_DMA+0x3d2>
  }

  switch (Channel)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d100      	bne.n	800420a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8004208:	e080      	b.n	800430c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d900      	bls.n	8004212 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8004210:	e0a1      	b.n	8004356 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d054      	beq.n	80042c2 <HAL_TIM_PWM_Start_DMA+0x266>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b08      	cmp	r3, #8
 800421c:	d900      	bls.n	8004220 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800421e:	e09a      	b.n	8004356 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d025      	beq.n	8004278 <HAL_TIM_PWM_Start_DMA+0x21c>
 800422c:	e093      	b.n	8004356 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	4a81      	ldr	r2, [pc, #516]	; (8004438 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004234:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800423c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	4a7f      	ldr	r2, [pc, #508]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004244:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3334      	adds	r3, #52	; 0x34
 8004252:	001a      	movs	r2, r3
 8004254:	1cbb      	adds	r3, r7, #2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	f7fe fb16 	bl	8002888 <HAL_DMA_Start_IT>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d001      	beq.n	8004264 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0e4      	b.n	800442e <HAL_TIM_PWM_Start_DMA+0x3d2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2180      	movs	r1, #128	; 0x80
 8004270:	0089      	lsls	r1, r1, #2
 8004272:	430a      	orrs	r2, r1
 8004274:	60da      	str	r2, [r3, #12]
      break;
 8004276:	e073      	b.n	8004360 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	4a6e      	ldr	r2, [pc, #440]	; (8004438 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	4a6d      	ldr	r2, [pc, #436]	; (800443c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004286:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	4a6c      	ldr	r2, [pc, #432]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800428e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3338      	adds	r3, #56	; 0x38
 800429c:	001a      	movs	r2, r3
 800429e:	1cbb      	adds	r3, r7, #2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	f7fe faf1 	bl	8002888 <HAL_DMA_Start_IT>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d001      	beq.n	80042ae <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0bf      	b.n	800442e <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	00c9      	lsls	r1, r1, #3
 80042bc:	430a      	orrs	r2, r1
 80042be:	60da      	str	r2, [r3, #12]
      break;
 80042c0:	e04e      	b.n	8004360 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	4a5c      	ldr	r2, [pc, #368]	; (8004438 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	4a5b      	ldr	r2, [pc, #364]	; (800443c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	4a5a      	ldr	r2, [pc, #360]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80042d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	333c      	adds	r3, #60	; 0x3c
 80042e6:	001a      	movs	r2, r3
 80042e8:	1cbb      	adds	r3, r7, #2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	f7fe facc 	bl	8002888 <HAL_DMA_Start_IT>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e09a      	b.n	800442e <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	0109      	lsls	r1, r1, #4
 8004306:	430a      	orrs	r2, r1
 8004308:	60da      	str	r2, [r3, #12]
      break;
 800430a:	e029      	b.n	8004360 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	4a49      	ldr	r2, [pc, #292]	; (8004438 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	4a48      	ldr	r2, [pc, #288]	; (800443c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	4a47      	ldr	r2, [pc, #284]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004322:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3340      	adds	r3, #64	; 0x40
 8004330:	001a      	movs	r2, r3
 8004332:	1cbb      	adds	r3, r7, #2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	f7fe faa7 	bl	8002888 <HAL_DMA_Start_IT>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d001      	beq.n	8004342 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e075      	b.n	800442e <HAL_TIM_PWM_Start_DMA+0x3d2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	0149      	lsls	r1, r1, #5
 8004350:	430a      	orrs	r2, r1
 8004352:	60da      	str	r2, [r3, #12]
      break;
 8004354:	e004      	b.n	8004360 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8004356:	2317      	movs	r3, #23
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
      break;
 800435e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004360:	2317      	movs	r3, #23
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d15e      	bne.n	8004428 <HAL_TIM_PWM_Start_DMA+0x3cc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	2201      	movs	r2, #1
 8004372:	0018      	movs	r0, r3
 8004374:	f000 fffc 	bl	8005370 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a31      	ldr	r2, [pc, #196]	; (8004444 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <HAL_TIM_PWM_Start_DMA+0x344>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a30      	ldr	r2, [pc, #192]	; (8004448 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_TIM_PWM_Start_DMA+0x344>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2e      	ldr	r2, [pc, #184]	; (800444c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIM_PWM_Start_DMA+0x344>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_PWM_Start_DMA+0x348>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_TIM_PWM_Start_DMA+0x34a>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	0209      	lsls	r1, r1, #8
 80043b8:	430a      	orrs	r2, r1
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a20      	ldr	r2, [pc, #128]	; (8004444 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00f      	beq.n	80043e6 <HAL_TIM_PWM_Start_DMA+0x38a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	05db      	lsls	r3, r3, #23
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d009      	beq.n	80043e6 <HAL_TIM_PWM_Start_DMA+0x38a>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIM_PWM_Start_DMA+0x38a>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d116      	bne.n	8004414 <HAL_TIM_PWM_Start_DMA+0x3b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d016      	beq.n	8004426 <HAL_TIM_PWM_Start_DMA+0x3ca>
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	429a      	cmp	r2, r3
 8004400:	d011      	beq.n	8004426 <HAL_TIM_PWM_Start_DMA+0x3ca>
      {
        __HAL_TIM_ENABLE(htim);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2101      	movs	r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	e008      	b.n	8004426 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2101      	movs	r1, #1
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e000      	b.n	8004428 <HAL_TIM_PWM_Start_DMA+0x3cc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004428:	2317      	movs	r3, #23
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	781b      	ldrb	r3, [r3, #0]
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b006      	add	sp, #24
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	08004a9d 	.word	0x08004a9d
 800443c:	08004b47 	.word	0x08004b47
 8004440:	08004a09 	.word	0x08004a09
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800
 8004454:	40000400 	.word	0x40000400
 8004458:	00010007 	.word	0x00010007

0800445c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	230f      	movs	r3, #15
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d039      	beq.n	80044e8 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d844      	bhi.n	8004504 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d025      	beq.n	80044cc <HAL_TIM_PWM_Stop_DMA+0x70>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d83e      	bhi.n	8004504 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_TIM_PWM_Stop_DMA+0x38>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b04      	cmp	r3, #4
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_PWM_Stop_DMA+0x54>
 8004492:	e037      	b.n	8004504 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	495c      	ldr	r1, [pc, #368]	; (8004610 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7fe fad5 	bl	8002a58 <HAL_DMA_Abort_IT>
      break;
 80044ae:	e02e      	b.n	800450e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4956      	ldr	r1, [pc, #344]	; (8004614 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80044bc:	400a      	ands	r2, r1
 80044be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fe fac7 	bl	8002a58 <HAL_DMA_Abort_IT>
      break;
 80044ca:	e020      	b.n	800450e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4950      	ldr	r1, [pc, #320]	; (8004618 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80044d8:	400a      	ands	r2, r1
 80044da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7fe fab9 	bl	8002a58 <HAL_DMA_Abort_IT>
      break;
 80044e6:	e012      	b.n	800450e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	494a      	ldr	r1, [pc, #296]	; (800461c <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7fe faab 	bl	8002a58 <HAL_DMA_Abort_IT>
      break;
 8004502:	e004      	b.n	800450e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8004504:	230f      	movs	r3, #15
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
      break;
 800450c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800450e:	230f      	movs	r3, #15
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d000      	beq.n	800451a <HAL_TIM_PWM_Stop_DMA+0xbe>
 8004518:	e073      	b.n	8004602 <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	0018      	movs	r0, r3
 8004524:	f000 ff24 	bl	8005370 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3c      	ldr	r2, [pc, #240]	; (8004620 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00e      	beq.n	8004550 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a3b      	ldr	r2, [pc, #236]	; (8004624 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a39      	ldr	r2, [pc, #228]	; (8004628 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a38      	ldr	r2, [pc, #224]	; (800462c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8004554:	2300      	movs	r3, #0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d013      	beq.n	8004582 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a33      	ldr	r2, [pc, #204]	; (8004630 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8004562:	4013      	ands	r3, r2
 8004564:	d10d      	bne.n	8004582 <HAL_TIM_PWM_Stop_DMA+0x126>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a31      	ldr	r2, [pc, #196]	; (8004634 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 800456e:	4013      	ands	r3, r2
 8004570:	d107      	bne.n	8004582 <HAL_TIM_PWM_Stop_DMA+0x126>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	492e      	ldr	r1, [pc, #184]	; (8004638 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800457e:	400a      	ands	r2, r1
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800458a:	4013      	ands	r3, r2
 800458c:	d10d      	bne.n	80045aa <HAL_TIM_PWM_Stop_DMA+0x14e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4a27      	ldr	r2, [pc, #156]	; (8004634 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004596:	4013      	ands	r3, r2
 8004598:	d107      	bne.n	80045aa <HAL_TIM_PWM_Stop_DMA+0x14e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2101      	movs	r1, #1
 80045a6:	438a      	bics	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_PWM_Stop_DMA+0x15e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	223e      	movs	r2, #62	; 0x3e
 80045b4:	2101      	movs	r1, #1
 80045b6:	5499      	strb	r1, [r3, r2]
 80045b8:	e023      	b.n	8004602 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d104      	bne.n	80045ca <HAL_TIM_PWM_Stop_DMA+0x16e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	223f      	movs	r2, #63	; 0x3f
 80045c4:	2101      	movs	r1, #1
 80045c6:	5499      	strb	r1, [r3, r2]
 80045c8:	e01b      	b.n	8004602 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Stop_DMA+0x17e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	2101      	movs	r1, #1
 80045d6:	5499      	strb	r1, [r3, r2]
 80045d8:	e013      	b.n	8004602 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Stop_DMA+0x18e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2241      	movs	r2, #65	; 0x41
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Stop_DMA+0x19e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2242      	movs	r2, #66	; 0x42
 80045f4:	2101      	movs	r1, #1
 80045f6:	5499      	strb	r1, [r3, r2]
 80045f8:	e003      	b.n	8004602 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2243      	movs	r2, #67	; 0x43
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8004602:	230f      	movs	r3, #15
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	781b      	ldrb	r3, [r3, #0]
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b004      	add	sp, #16
 800460e:	bd80      	pop	{r7, pc}
 8004610:	fffffdff 	.word	0xfffffdff
 8004614:	fffffbff 	.word	0xfffffbff
 8004618:	fffff7ff 	.word	0xfffff7ff
 800461c:	ffffefff 	.word	0xffffefff
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400
 800462c:	40014800 	.word	0x40014800
 8004630:	00001111 	.word	0x00001111
 8004634:	00000444 	.word	0x00000444
 8004638:	ffff7fff 	.word	0xffff7fff

0800463c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2317      	movs	r3, #23
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	223c      	movs	r2, #60	; 0x3c
 8004654:	5c9b      	ldrb	r3, [r3, r2]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_TIM_PWM_ConfigChannel+0x22>
 800465a:	2302      	movs	r3, #2
 800465c:	e0e5      	b.n	800482a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	223c      	movs	r2, #60	; 0x3c
 8004662:	2101      	movs	r1, #1
 8004664:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b14      	cmp	r3, #20
 800466a:	d900      	bls.n	800466e <HAL_TIM_PWM_ConfigChannel+0x32>
 800466c:	e0d1      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	009a      	lsls	r2, r3, #2
 8004672:	4b70      	ldr	r3, [pc, #448]	; (8004834 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0011      	movs	r1, r2
 8004682:	0018      	movs	r0, r3
 8004684:	f000 fb14 	bl	8004cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2108      	movs	r1, #8
 8004694:	430a      	orrs	r2, r1
 8004696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2104      	movs	r1, #4
 80046a4:	438a      	bics	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6999      	ldr	r1, [r3, #24]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	619a      	str	r2, [r3, #24]
      break;
 80046ba:	e0af      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 fb7d 	bl	8004dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	0109      	lsls	r1, r1, #4
 80046d8:	430a      	orrs	r2, r1
 80046da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4954      	ldr	r1, [pc, #336]	; (8004838 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6999      	ldr	r1, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	021a      	lsls	r2, r3, #8
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	619a      	str	r2, [r3, #24]
      break;
 8004700:	e08c      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0011      	movs	r1, r2
 800470a:	0018      	movs	r0, r3
 800470c:	f000 fbde 	bl	8004ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2108      	movs	r1, #8
 800471c:	430a      	orrs	r2, r1
 800471e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2104      	movs	r1, #4
 800472c:	438a      	bics	r2, r1
 800472e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69d9      	ldr	r1, [r3, #28]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	61da      	str	r2, [r3, #28]
      break;
 8004742:	e06b      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	0011      	movs	r1, r2
 800474c:	0018      	movs	r0, r3
 800474e:	f000 fc45 	bl	8004fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2180      	movs	r1, #128	; 0x80
 800475e:	0109      	lsls	r1, r1, #4
 8004760:	430a      	orrs	r2, r1
 8004762:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4932      	ldr	r1, [pc, #200]	; (8004838 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004770:	400a      	ands	r2, r1
 8004772:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69d9      	ldr	r1, [r3, #28]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	021a      	lsls	r2, r3, #8
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	61da      	str	r2, [r3, #28]
      break;
 8004788:	e048      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f000 fc8c 	bl	80050b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2108      	movs	r1, #8
 80047a4:	430a      	orrs	r2, r1
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2104      	movs	r1, #4
 80047b4:	438a      	bics	r2, r1
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047ca:	e027      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	0011      	movs	r1, r2
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 fccb 	bl	8005170 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2180      	movs	r1, #128	; 0x80
 80047e6:	0109      	lsls	r1, r1, #4
 80047e8:	430a      	orrs	r2, r1
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4910      	ldr	r1, [pc, #64]	; (8004838 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	021a      	lsls	r2, r3, #8
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004810:	e004      	b.n	800481c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004812:	2317      	movs	r3, #23
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
      break;
 800481a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	223c      	movs	r2, #60	; 0x3c
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]

  return status;
 8004824:	2317      	movs	r3, #23
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	781b      	ldrb	r3, [r3, #0]
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b006      	add	sp, #24
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	08007afc 	.word	0x08007afc
 8004838:	fffffbff 	.word	0xfffffbff

0800483c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	230f      	movs	r3, #15
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	223c      	movs	r2, #60	; 0x3c
 8004852:	5c9b      	ldrb	r3, [r3, r2]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_TIM_ConfigClockSource+0x20>
 8004858:	2302      	movs	r3, #2
 800485a:	e0bc      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x19a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	223c      	movs	r2, #60	; 0x3c
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	223d      	movs	r2, #61	; 0x3d
 8004868:	2102      	movs	r1, #2
 800486a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4a5a      	ldr	r2, [pc, #360]	; (80049e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004878:	4013      	ands	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4a59      	ldr	r2, [pc, #356]	; (80049e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004880:	4013      	ands	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2280      	movs	r2, #128	; 0x80
 8004892:	0192      	lsls	r2, r2, #6
 8004894:	4293      	cmp	r3, r2
 8004896:	d040      	beq.n	800491a <HAL_TIM_ConfigClockSource+0xde>
 8004898:	2280      	movs	r2, #128	; 0x80
 800489a:	0192      	lsls	r2, r2, #6
 800489c:	4293      	cmp	r3, r2
 800489e:	d900      	bls.n	80048a2 <HAL_TIM_ConfigClockSource+0x66>
 80048a0:	e088      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048a2:	2280      	movs	r2, #128	; 0x80
 80048a4:	0152      	lsls	r2, r2, #5
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d100      	bne.n	80048ac <HAL_TIM_ConfigClockSource+0x70>
 80048aa:	e088      	b.n	80049be <HAL_TIM_ConfigClockSource+0x182>
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	0152      	lsls	r2, r2, #5
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d900      	bls.n	80048b6 <HAL_TIM_ConfigClockSource+0x7a>
 80048b4:	e07e      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048b6:	2b70      	cmp	r3, #112	; 0x70
 80048b8:	d018      	beq.n	80048ec <HAL_TIM_ConfigClockSource+0xb0>
 80048ba:	d900      	bls.n	80048be <HAL_TIM_ConfigClockSource+0x82>
 80048bc:	e07a      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048be:	2b60      	cmp	r3, #96	; 0x60
 80048c0:	d04f      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x126>
 80048c2:	d900      	bls.n	80048c6 <HAL_TIM_ConfigClockSource+0x8a>
 80048c4:	e076      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048c6:	2b50      	cmp	r3, #80	; 0x50
 80048c8:	d03b      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x106>
 80048ca:	d900      	bls.n	80048ce <HAL_TIM_ConfigClockSource+0x92>
 80048cc:	e072      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d057      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x146>
 80048d2:	d900      	bls.n	80048d6 <HAL_TIM_ConfigClockSource+0x9a>
 80048d4:	e06e      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048d6:	2b30      	cmp	r3, #48	; 0x30
 80048d8:	d063      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x166>
 80048da:	d86b      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d060      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x166>
 80048e0:	d868      	bhi.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d05d      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x166>
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d05b      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x166>
 80048ea:	e063      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6899      	ldr	r1, [r3, #8]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f000 fd18 	bl	8005330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2277      	movs	r2, #119	; 0x77
 800490c:	4313      	orrs	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]
      break;
 8004918:	e052      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f000 fd01 	bl	8005330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2180      	movs	r1, #128	; 0x80
 800493a:	01c9      	lsls	r1, r1, #7
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
      break;
 8004940:	e03e      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	001a      	movs	r2, r3
 8004950:	f000 fc72 	bl	8005238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2150      	movs	r1, #80	; 0x50
 800495a:	0018      	movs	r0, r3
 800495c:	f000 fccc 	bl	80052f8 <TIM_ITRx_SetConfig>
      break;
 8004960:	e02e      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	001a      	movs	r2, r3
 8004970:	f000 fc90 	bl	8005294 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2160      	movs	r1, #96	; 0x60
 800497a:	0018      	movs	r0, r3
 800497c:	f000 fcbc 	bl	80052f8 <TIM_ITRx_SetConfig>
      break;
 8004980:	e01e      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	001a      	movs	r2, r3
 8004990:	f000 fc52 	bl	8005238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2140      	movs	r1, #64	; 0x40
 800499a:	0018      	movs	r0, r3
 800499c:	f000 fcac 	bl	80052f8 <TIM_ITRx_SetConfig>
      break;
 80049a0:	e00e      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	0019      	movs	r1, r3
 80049ac:	0010      	movs	r0, r2
 80049ae:	f000 fca3 	bl	80052f8 <TIM_ITRx_SetConfig>
      break;
 80049b2:	e005      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80049b4:	230f      	movs	r3, #15
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
      break;
 80049bc:	e000      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80049be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	223d      	movs	r2, #61	; 0x3d
 80049c4:	2101      	movs	r1, #1
 80049c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	223c      	movs	r2, #60	; 0x3c
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]

  return status;
 80049d0:	230f      	movs	r3, #15
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	781b      	ldrb	r3, [r3, #0]
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	ffceff88 	.word	0xffceff88
 80049e4:	ffff00ff 	.word	0xffff00ff

080049e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d107      	bne.n	8004a30 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	223e      	movs	r2, #62	; 0x3e
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	5499      	strb	r1, [r3, r2]
 8004a2e:	e02a      	b.n	8004a86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d107      	bne.n	8004a4a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	223f      	movs	r2, #63	; 0x3f
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]
 8004a48:	e01d      	b.n	8004a86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d107      	bne.n	8004a64 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2204      	movs	r2, #4
 8004a58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2240      	movs	r2, #64	; 0x40
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]
 8004a62:	e010      	b.n	8004a86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d107      	bne.n	8004a7e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2208      	movs	r2, #8
 8004a72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2241      	movs	r2, #65	; 0x41
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]
 8004a7c:	e003      	b.n	8004a86 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	223d      	movs	r2, #61	; 0x3d
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7ff ffb5 	bl	80049f8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d10b      	bne.n	8004acc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d136      	bne.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	223e      	movs	r2, #62	; 0x3e
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	5499      	strb	r1, [r3, r2]
 8004aca:	e031      	b.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d10b      	bne.n	8004aee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d125      	bne.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	223f      	movs	r2, #63	; 0x3f
 8004ae8:	2101      	movs	r1, #1
 8004aea:	5499      	strb	r1, [r3, r2]
 8004aec:	e020      	b.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d10b      	bne.n	8004b10 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2204      	movs	r2, #4
 8004afc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d114      	bne.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	5499      	strb	r1, [r3, r2]
 8004b0e:	e00f      	b.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10a      	bne.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2241      	movs	r2, #65	; 0x41
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7fc fbba 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	771a      	strb	r2, [r3, #28]
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d103      	bne.n	8004b66 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	771a      	strb	r2, [r3, #28]
 8004b64:	e019      	b.n	8004b9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d103      	bne.n	8004b78 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2202      	movs	r2, #2
 8004b74:	771a      	strb	r2, [r3, #28]
 8004b76:	e010      	b.n	8004b9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d103      	bne.n	8004b8a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2204      	movs	r2, #4
 8004b86:	771a      	strb	r2, [r3, #28]
 8004b88:	e007      	b.n	8004b9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d102      	bne.n	8004b9a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2208      	movs	r2, #8
 8004b98:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff ff23 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b004      	add	sp, #16
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <TIM_Base_SetConfig+0xe4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d008      	beq.n	8004bda <TIM_Base_SetConfig+0x2a>
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	05db      	lsls	r3, r3, #23
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d003      	beq.n	8004bda <TIM_Base_SetConfig+0x2a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a30      	ldr	r2, [pc, #192]	; (8004c98 <TIM_Base_SetConfig+0xe8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2270      	movs	r2, #112	; 0x70
 8004bde:	4393      	bics	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <TIM_Base_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <TIM_Base_SetConfig+0x76>
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	05db      	lsls	r3, r3, #23
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d013      	beq.n	8004c26 <TIM_Base_SetConfig+0x76>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <TIM_Base_SetConfig+0xe8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_Base_SetConfig+0x76>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <TIM_Base_SetConfig+0xec>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_Base_SetConfig+0x76>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a23      	ldr	r2, [pc, #140]	; (8004ca0 <TIM_Base_SetConfig+0xf0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_Base_SetConfig+0x76>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <TIM_Base_SetConfig+0xf4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_Base_SetConfig+0x76>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <TIM_Base_SetConfig+0xf8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d108      	bne.n	8004c38 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a20      	ldr	r2, [pc, #128]	; (8004cac <TIM_Base_SetConfig+0xfc>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	4393      	bics	r3, r2
 8004c3e:	001a      	movs	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <TIM_Base_SetConfig+0xe4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_Base_SetConfig+0xce>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <TIM_Base_SetConfig+0xf0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_Base_SetConfig+0xce>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <TIM_Base_SetConfig+0xf4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_Base_SetConfig+0xce>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <TIM_Base_SetConfig+0xf8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d103      	bne.n	8004c86 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	615a      	str	r2, [r3, #20]
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b004      	add	sp, #16
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40002000 	.word	0x40002000
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800
 8004cac:	fffffcff 	.word	0xfffffcff

08004cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	4393      	bics	r3, r2
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a32      	ldr	r2, [pc, #200]	; (8004da8 <TIM_OC1_SetConfig+0xf8>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	4393      	bics	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4393      	bics	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a28      	ldr	r2, [pc, #160]	; (8004dac <TIM_OC1_SetConfig+0xfc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_OC1_SetConfig+0x76>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_OC1_SetConfig+0x100>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_OC1_SetConfig+0x76>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_OC1_SetConfig+0x104>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC1_SetConfig+0x76>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_OC1_SetConfig+0x108>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10c      	bne.n	8004d40 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	4393      	bics	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	4393      	bics	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <TIM_OC1_SetConfig+0xfc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_OC1_SetConfig+0xb0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <TIM_OC1_SetConfig+0x100>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_OC1_SetConfig+0xb0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <TIM_OC1_SetConfig+0x104>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_OC1_SetConfig+0xb0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <TIM_OC1_SetConfig+0x108>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <TIM_OC1_SetConfig+0x10c>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <TIM_OC1_SetConfig+0x110>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b006      	add	sp, #24
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	fffeff8f 	.word	0xfffeff8f
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40014000 	.word	0x40014000
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800
 8004dbc:	fffffeff 	.word	0xfffffeff
 8004dc0:	fffffdff 	.word	0xfffffdff

08004dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	4393      	bics	r3, r2
 8004dd6:	001a      	movs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a2e      	ldr	r2, [pc, #184]	; (8004eac <TIM_OC2_SetConfig+0xe8>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a2d      	ldr	r2, [pc, #180]	; (8004eb0 <TIM_OC2_SetConfig+0xec>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	4393      	bics	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a24      	ldr	r2, [pc, #144]	; (8004eb4 <TIM_OC2_SetConfig+0xf0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d10d      	bne.n	8004e42 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2240      	movs	r2, #64	; 0x40
 8004e3e:	4393      	bics	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <TIM_OC2_SetConfig+0xf0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_OC2_SetConfig+0x9e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	; (8004eb8 <TIM_OC2_SetConfig+0xf4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC2_SetConfig+0x9e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <TIM_OC2_SetConfig+0xf8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC2_SetConfig+0x9e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <TIM_OC2_SetConfig+0xfc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d113      	bne.n	8004e8a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <TIM_OC2_SetConfig+0x100>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <TIM_OC2_SetConfig+0x104>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	621a      	str	r2, [r3, #32]
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b006      	add	sp, #24
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	feff8fff 	.word	0xfeff8fff
 8004eb0:	fffffcff 	.word	0xfffffcff
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800
 8004ec4:	fffffbff 	.word	0xfffffbff
 8004ec8:	fffff7ff 	.word	0xfffff7ff

08004ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	4a35      	ldr	r2, [pc, #212]	; (8004fb0 <TIM_OC3_SetConfig+0xe4>)
 8004edc:	401a      	ands	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <TIM_OC3_SetConfig+0xe8>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2203      	movs	r2, #3
 8004f00:	4393      	bics	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <TIM_OC3_SetConfig+0xec>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a25      	ldr	r2, [pc, #148]	; (8004fbc <TIM_OC3_SetConfig+0xf0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10d      	bne.n	8004f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4a24      	ldr	r2, [pc, #144]	; (8004fc0 <TIM_OC3_SetConfig+0xf4>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <TIM_OC3_SetConfig+0xf8>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <TIM_OC3_SetConfig+0xf0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_OC3_SetConfig+0x9a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <TIM_OC3_SetConfig+0xfc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_OC3_SetConfig+0x9a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <TIM_OC3_SetConfig+0x100>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_OC3_SetConfig+0x9a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <TIM_OC3_SetConfig+0x104>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d113      	bne.n	8004f8e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4a1a      	ldr	r2, [pc, #104]	; (8004fd4 <TIM_OC3_SetConfig+0x108>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <TIM_OC3_SetConfig+0x10c>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b006      	add	sp, #24
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	fffffeff 	.word	0xfffffeff
 8004fb4:	fffeff8f 	.word	0xfffeff8f
 8004fb8:	fffffdff 	.word	0xfffffdff
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	fffff7ff 	.word	0xfffff7ff
 8004fc4:	fffffbff 	.word	0xfffffbff
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800
 8004fd4:	ffffefff 	.word	0xffffefff
 8004fd8:	ffffdfff 	.word	0xffffdfff

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a28      	ldr	r2, [pc, #160]	; (800508c <TIM_OC4_SetConfig+0xb0>)
 8004fec:	401a      	ands	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a22      	ldr	r2, [pc, #136]	; (8005090 <TIM_OC4_SetConfig+0xb4>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a21      	ldr	r2, [pc, #132]	; (8005094 <TIM_OC4_SetConfig+0xb8>)
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <TIM_OC4_SetConfig+0xbc>)
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	031b      	lsls	r3, r3, #12
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a19      	ldr	r2, [pc, #100]	; (800509c <TIM_OC4_SetConfig+0xc0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_OC4_SetConfig+0x78>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <TIM_OC4_SetConfig+0xc4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_OC4_SetConfig+0x78>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <TIM_OC4_SetConfig+0xc8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC4_SetConfig+0x78>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <TIM_OC4_SetConfig+0xcc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d109      	bne.n	8005068 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <TIM_OC4_SetConfig+0xd0>)
 8005058:	4013      	ands	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b006      	add	sp, #24
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	ffffefff 	.word	0xffffefff
 8005090:	feff8fff 	.word	0xfeff8fff
 8005094:	fffffcff 	.word	0xfffffcff
 8005098:	ffffdfff 	.word	0xffffdfff
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800
 80050ac:	ffffbfff 	.word	0xffffbfff

080050b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	4a25      	ldr	r2, [pc, #148]	; (8005154 <TIM_OC5_SetConfig+0xa4>)
 80050c0:	401a      	ands	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <TIM_OC5_SetConfig+0xa8>)
 80050dc:	4013      	ands	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	; (800515c <TIM_OC5_SetConfig+0xac>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a17      	ldr	r2, [pc, #92]	; (8005160 <TIM_OC5_SetConfig+0xb0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_OC5_SetConfig+0x6e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a16      	ldr	r2, [pc, #88]	; (8005164 <TIM_OC5_SetConfig+0xb4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_OC5_SetConfig+0x6e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a15      	ldr	r2, [pc, #84]	; (8005168 <TIM_OC5_SetConfig+0xb8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_OC5_SetConfig+0x6e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a14      	ldr	r2, [pc, #80]	; (800516c <TIM_OC5_SetConfig+0xbc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d109      	bne.n	8005132 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <TIM_OC5_SetConfig+0xa4>)
 8005122:	4013      	ands	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b006      	add	sp, #24
 8005152:	bd80      	pop	{r7, pc}
 8005154:	fffeffff 	.word	0xfffeffff
 8005158:	fffeff8f 	.word	0xfffeff8f
 800515c:	fffdffff 	.word	0xfffdffff
 8005160:	40012c00 	.word	0x40012c00
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	4a26      	ldr	r2, [pc, #152]	; (8005218 <TIM_OC6_SetConfig+0xa8>)
 8005180:	401a      	ands	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4a20      	ldr	r2, [pc, #128]	; (800521c <TIM_OC6_SetConfig+0xac>)
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <TIM_OC6_SetConfig+0xb0>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	051b      	lsls	r3, r3, #20
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <TIM_OC6_SetConfig+0xb4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <TIM_OC6_SetConfig+0x70>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <TIM_OC6_SetConfig+0xb8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_OC6_SetConfig+0x70>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a16      	ldr	r2, [pc, #88]	; (800522c <TIM_OC6_SetConfig+0xbc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC6_SetConfig+0x70>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a15      	ldr	r2, [pc, #84]	; (8005230 <TIM_OC6_SetConfig+0xc0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d109      	bne.n	80051f4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4a14      	ldr	r2, [pc, #80]	; (8005234 <TIM_OC6_SetConfig+0xc4>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	b006      	add	sp, #24
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	ffefffff 	.word	0xffefffff
 800521c:	feff8fff 	.word	0xfeff8fff
 8005220:	ffdfffff 	.word	0xffdfffff
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800
 8005234:	fffbffff 	.word	0xfffbffff

08005238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	2201      	movs	r2, #1
 8005250:	4393      	bics	r3, r2
 8005252:	001a      	movs	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	22f0      	movs	r2, #240	; 0xf0
 8005262:	4393      	bics	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	220a      	movs	r2, #10
 8005274:	4393      	bics	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b006      	add	sp, #24
 8005292:	bd80      	pop	{r7, pc}

08005294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	2210      	movs	r2, #16
 80052a6:	4393      	bics	r3, r2
 80052a8:	001a      	movs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <TIM_TI2_ConfigInputStage+0x60>)
 80052be:	4013      	ands	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	22a0      	movs	r2, #160	; 0xa0
 80052d0:	4393      	bics	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b006      	add	sp, #24
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	ffff0fff 	.word	0xffff0fff

080052f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a08      	ldr	r2, [pc, #32]	; (800532c <TIM_ITRx_SetConfig+0x34>)
 800530c:	4013      	ands	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	2207      	movs	r2, #7
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	609a      	str	r2, [r3, #8]
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b004      	add	sp, #16
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	ffcfff8f 	.word	0xffcfff8f

08005330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <TIM_ETR_SetConfig+0x3c>)
 8005348:	4013      	ands	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	431a      	orrs	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b006      	add	sp, #24
 800536a:	bd80      	pop	{r7, pc}
 800536c:	ffff00ff 	.word	0xffff00ff

08005370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	221f      	movs	r2, #31
 8005380:	4013      	ands	r3, r2
 8005382:	2201      	movs	r2, #1
 8005384:	409a      	lsls	r2, r3
 8005386:	0013      	movs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	43d2      	mvns	r2, r2
 8005392:	401a      	ands	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	211f      	movs	r1, #31
 80053a0:	400b      	ands	r3, r1
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4099      	lsls	r1, r3
 80053a6:	000b      	movs	r3, r1
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b006      	add	sp, #24
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	223c      	movs	r2, #60	; 0x3c
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e055      	b.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	223c      	movs	r2, #60	; 0x3c
 80053d4:	2101      	movs	r1, #1
 80053d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	223d      	movs	r2, #61	; 0x3d
 80053dc:	2102      	movs	r1, #2
 80053de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a23      	ldr	r2, [pc, #140]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4a22      	ldr	r2, [pc, #136]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053fe:	4013      	ands	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2270      	movs	r2, #112	; 0x70
 8005410:	4393      	bics	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	05db      	lsls	r3, r3, #23
 8005438:	429a      	cmp	r2, r3
 800543a:	d009      	beq.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a12      	ldr	r2, [pc, #72]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a11      	ldr	r2, [pc, #68]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	4393      	bics	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	4313      	orrs	r3, r2
 8005460:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	223d      	movs	r2, #61	; 0x3d
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	223c      	movs	r2, #60	; 0x3c
 8005476:	2100      	movs	r1, #0
 8005478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40012c00 	.word	0x40012c00
 8005488:	ff0fffff 	.word	0xff0fffff
 800548c:	40000400 	.word	0x40000400
 8005490:	40014000 	.word	0x40014000

08005494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	223c      	movs	r2, #60	; 0x3c
 80054a6:	5c9b      	ldrb	r3, [r3, r2]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e079      	b.n	80055a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	223c      	movs	r2, #60	; 0x3c
 80054b4:	2101      	movs	r1, #1
 80054b6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	22ff      	movs	r2, #255	; 0xff
 80054bc:	4393      	bics	r3, r2
 80054be:	001a      	movs	r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a38      	ldr	r2, [pc, #224]	; (80055ac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80054cc:	401a      	ands	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a35      	ldr	r2, [pc, #212]	; (80055b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80054da:	401a      	ands	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a33      	ldr	r2, [pc, #204]	; (80055b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80054e8:	401a      	ands	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a30      	ldr	r2, [pc, #192]	; (80055b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80054f6:	401a      	ands	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a2e      	ldr	r2, [pc, #184]	; (80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005504:	401a      	ands	r2, r3
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a2b      	ldr	r2, [pc, #172]	; (80055c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005512:	401a      	ands	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4a29      	ldr	r2, [pc, #164]	; (80055c4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005520:	401a      	ands	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d106      	bne.n	8005544 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800553a:	401a      	ands	r2, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d121      	bne.n	8005592 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005552:	401a      	ands	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	051b      	lsls	r3, r3, #20
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8005562:	401a      	ands	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005570:	401a      	ands	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d106      	bne.n	8005592 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005588:	401a      	ands	r2, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	223c      	movs	r2, #60	; 0x3c
 800559e:	2100      	movs	r1, #0
 80055a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b004      	add	sp, #16
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	fffffcff 	.word	0xfffffcff
 80055b0:	fffffbff 	.word	0xfffffbff
 80055b4:	fffff7ff 	.word	0xfffff7ff
 80055b8:	ffffefff 	.word	0xffffefff
 80055bc:	ffffdfff 	.word	0xffffdfff
 80055c0:	ffffbfff 	.word	0xffffbfff
 80055c4:	fff0ffff 	.word	0xfff0ffff
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	efffffff 	.word	0xefffffff
 80055d0:	ff0fffff 	.word	0xff0fffff
 80055d4:	feffffff 	.word	0xfeffffff
 80055d8:	fdffffff 	.word	0xfdffffff
 80055dc:	dfffffff 	.word	0xdfffffff

080055e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e046      	b.n	8005680 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2288      	movs	r2, #136	; 0x88
 80055f6:	589b      	ldr	r3, [r3, r2]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2284      	movs	r2, #132	; 0x84
 8005600:	2100      	movs	r1, #0
 8005602:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	0018      	movs	r0, r3
 8005608:	f7fc fe46 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2288      	movs	r2, #136	; 0x88
 8005610:	2124      	movs	r1, #36	; 0x24
 8005612:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2101      	movs	r1, #1
 8005620:	438a      	bics	r2, r1
 8005622:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f000 fc36 	bl	8005e98 <UART_SetConfig>
 800562c:	0003      	movs	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e024      	b.n	8005680 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f000 fee7 	bl	8006414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	490d      	ldr	r1, [pc, #52]	; (8005688 <HAL_UART_Init+0xa8>)
 8005652:	400a      	ands	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	212a      	movs	r1, #42	; 0x2a
 8005662:	438a      	bics	r2, r1
 8005664:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2101      	movs	r1, #1
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	0018      	movs	r0, r3
 800567a:	f000 ff7f 	bl	800657c <UART_CheckIdleState>
 800567e:	0003      	movs	r3, r0
}
 8005680:	0018      	movs	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	b002      	add	sp, #8
 8005686:	bd80      	pop	{r7, pc}
 8005688:	ffffb7ff 	.word	0xffffb7ff

0800568c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	1dbb      	adds	r3, r7, #6
 8005698:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	228c      	movs	r2, #140	; 0x8c
 800569e:	589b      	ldr	r3, [r3, r2]
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d14a      	bne.n	800573a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_UART_Receive_IT+0x26>
 80056aa:	1dbb      	adds	r3, r7, #6
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e042      	b.n	800573c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	015b      	lsls	r3, r3, #5
 80056be:	429a      	cmp	r2, r3
 80056c0:	d109      	bne.n	80056d6 <HAL_UART_Receive_IT+0x4a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2201      	movs	r2, #1
 80056ce:	4013      	ands	r3, r2
 80056d0:	d001      	beq.n	80056d6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e032      	b.n	800573c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_UART_Receive_IT+0xb8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d020      	beq.n	8005728 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	4013      	ands	r3, r2
 80056f2:	d019      	beq.n	8005728 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f4:	f3ef 8310 	mrs	r3, PRIMASK
 80056f8:	613b      	str	r3, [r7, #16]
  return(result);
 80056fa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	2301      	movs	r3, #1
 8005700:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f383 8810 	msr	PRIMASK, r3
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	04c9      	lsls	r1, r1, #19
 8005718:	430a      	orrs	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f383 8810 	msr	PRIMASK, r3
}
 8005726:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005728:	1dbb      	adds	r3, r7, #6
 800572a:	881a      	ldrh	r2, [r3, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	0018      	movs	r0, r3
 8005732:	f001 f839 	bl	80067a8 <UART_Start_Receive_IT>
 8005736:	0003      	movs	r3, r0
 8005738:	e000      	b.n	800573c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
  }
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b008      	add	sp, #32
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40008000 	.word	0x40008000

08005748 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	1dbb      	adds	r3, r7, #6
 8005754:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	228c      	movs	r2, #140	; 0x8c
 800575a:	589b      	ldr	r3, [r3, r2]
 800575c:	2b20      	cmp	r3, #32
 800575e:	d14a      	bne.n	80057f6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_UART_Receive_DMA+0x26>
 8005766:	1dbb      	adds	r3, r7, #6
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e042      	b.n	80057f8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	015b      	lsls	r3, r3, #5
 800577a:	429a      	cmp	r2, r3
 800577c:	d109      	bne.n	8005792 <HAL_UART_Receive_DMA+0x4a>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2201      	movs	r2, #1
 800578a:	4013      	ands	r3, r2
 800578c:	d001      	beq.n	8005792 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e032      	b.n	80057f8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_UART_Receive_DMA+0xb8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d020      	beq.n	80057e4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	4013      	ands	r3, r2
 80057ae:	d019      	beq.n	80057e4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b0:	f3ef 8310 	mrs	r3, PRIMASK
 80057b4:	613b      	str	r3, [r7, #16]
  return(result);
 80057b6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	2301      	movs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	04c9      	lsls	r1, r1, #19
 80057d4:	430a      	orrs	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	f383 8810 	msr	PRIMASK, r3
}
 80057e2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057e4:	1dbb      	adds	r3, r7, #6
 80057e6:	881a      	ldrh	r2, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f001 f8ff 	bl	80069f0 <UART_Start_Receive_DMA>
 80057f2:	0003      	movs	r3, r0
 80057f4:	e000      	b.n	80057f8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b008      	add	sp, #32
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40008000 	.word	0x40008000

08005804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005804:	b5b0      	push	{r4, r5, r7, lr}
 8005806:	b0aa      	sub	sp, #168	; 0xa8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	22a4      	movs	r2, #164	; 0xa4
 8005814:	18b9      	adds	r1, r7, r2
 8005816:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	20a0      	movs	r0, #160	; 0xa0
 8005820:	1839      	adds	r1, r7, r0
 8005822:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	249c      	movs	r4, #156	; 0x9c
 800582c:	1939      	adds	r1, r7, r4
 800582e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005830:	0011      	movs	r1, r2
 8005832:	18bb      	adds	r3, r7, r2
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4aa2      	ldr	r2, [pc, #648]	; (8005ac0 <HAL_UART_IRQHandler+0x2bc>)
 8005838:	4013      	ands	r3, r2
 800583a:	2298      	movs	r2, #152	; 0x98
 800583c:	18bd      	adds	r5, r7, r2
 800583e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005840:	18bb      	adds	r3, r7, r2
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11a      	bne.n	800587e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005848:	187b      	adds	r3, r7, r1
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2220      	movs	r2, #32
 800584e:	4013      	ands	r3, r2
 8005850:	d015      	beq.n	800587e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005852:	183b      	adds	r3, r7, r0
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2220      	movs	r2, #32
 8005858:	4013      	ands	r3, r2
 800585a:	d105      	bne.n	8005868 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800585c:	193b      	adds	r3, r7, r4
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	055b      	lsls	r3, r3, #21
 8005864:	4013      	ands	r3, r2
 8005866:	d00a      	beq.n	800587e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586c:	2b00      	cmp	r3, #0
 800586e:	d100      	bne.n	8005872 <HAL_UART_IRQHandler+0x6e>
 8005870:	e2dc      	b.n	8005e2c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	0010      	movs	r0, r2
 800587a:	4798      	blx	r3
      }
      return;
 800587c:	e2d6      	b.n	8005e2c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800587e:	2398      	movs	r3, #152	; 0x98
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d100      	bne.n	800588a <HAL_UART_IRQHandler+0x86>
 8005888:	e122      	b.n	8005ad0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800588a:	239c      	movs	r3, #156	; 0x9c
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a8c      	ldr	r2, [pc, #560]	; (8005ac4 <HAL_UART_IRQHandler+0x2c0>)
 8005892:	4013      	ands	r3, r2
 8005894:	d106      	bne.n	80058a4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005896:	23a0      	movs	r3, #160	; 0xa0
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a8a      	ldr	r2, [pc, #552]	; (8005ac8 <HAL_UART_IRQHandler+0x2c4>)
 800589e:	4013      	ands	r3, r2
 80058a0:	d100      	bne.n	80058a4 <HAL_UART_IRQHandler+0xa0>
 80058a2:	e115      	b.n	8005ad0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058a4:	23a4      	movs	r3, #164	; 0xa4
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2201      	movs	r2, #1
 80058ac:	4013      	ands	r3, r2
 80058ae:	d012      	beq.n	80058d6 <HAL_UART_IRQHandler+0xd2>
 80058b0:	23a0      	movs	r3, #160	; 0xa0
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4013      	ands	r3, r2
 80058bc:	d00b      	beq.n	80058d6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2201      	movs	r2, #1
 80058c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2290      	movs	r2, #144	; 0x90
 80058ca:	589b      	ldr	r3, [r3, r2]
 80058cc:	2201      	movs	r2, #1
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2190      	movs	r1, #144	; 0x90
 80058d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058d6:	23a4      	movs	r3, #164	; 0xa4
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d011      	beq.n	8005906 <HAL_UART_IRQHandler+0x102>
 80058e2:	239c      	movs	r3, #156	; 0x9c
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2201      	movs	r2, #1
 80058ea:	4013      	ands	r3, r2
 80058ec:	d00b      	beq.n	8005906 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2202      	movs	r2, #2
 80058f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2290      	movs	r2, #144	; 0x90
 80058fa:	589b      	ldr	r3, [r3, r2]
 80058fc:	2204      	movs	r2, #4
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2190      	movs	r1, #144	; 0x90
 8005904:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005906:	23a4      	movs	r3, #164	; 0xa4
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2204      	movs	r2, #4
 800590e:	4013      	ands	r3, r2
 8005910:	d011      	beq.n	8005936 <HAL_UART_IRQHandler+0x132>
 8005912:	239c      	movs	r3, #156	; 0x9c
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2201      	movs	r2, #1
 800591a:	4013      	ands	r3, r2
 800591c:	d00b      	beq.n	8005936 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2204      	movs	r2, #4
 8005924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2290      	movs	r2, #144	; 0x90
 800592a:	589b      	ldr	r3, [r3, r2]
 800592c:	2202      	movs	r2, #2
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2190      	movs	r1, #144	; 0x90
 8005934:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005936:	23a4      	movs	r3, #164	; 0xa4
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2208      	movs	r2, #8
 800593e:	4013      	ands	r3, r2
 8005940:	d017      	beq.n	8005972 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005942:	23a0      	movs	r3, #160	; 0xa0
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2220      	movs	r2, #32
 800594a:	4013      	ands	r3, r2
 800594c:	d105      	bne.n	800595a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800594e:	239c      	movs	r3, #156	; 0x9c
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5b      	ldr	r2, [pc, #364]	; (8005ac4 <HAL_UART_IRQHandler+0x2c0>)
 8005956:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005958:	d00b      	beq.n	8005972 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2208      	movs	r2, #8
 8005960:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2290      	movs	r2, #144	; 0x90
 8005966:	589b      	ldr	r3, [r3, r2]
 8005968:	2208      	movs	r2, #8
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2190      	movs	r1, #144	; 0x90
 8005970:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005972:	23a4      	movs	r3, #164	; 0xa4
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	4013      	ands	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_UART_IRQHandler+0x1a4>
 8005980:	23a0      	movs	r3, #160	; 0xa0
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	04db      	lsls	r3, r3, #19
 800598a:	4013      	ands	r3, r2
 800598c:	d00c      	beq.n	80059a8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	0112      	lsls	r2, r2, #4
 8005996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2290      	movs	r2, #144	; 0x90
 800599c:	589b      	ldr	r3, [r3, r2]
 800599e:	2220      	movs	r2, #32
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2190      	movs	r1, #144	; 0x90
 80059a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2290      	movs	r2, #144	; 0x90
 80059ac:	589b      	ldr	r3, [r3, r2]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d100      	bne.n	80059b4 <HAL_UART_IRQHandler+0x1b0>
 80059b2:	e23d      	b.n	8005e30 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059b4:	23a4      	movs	r3, #164	; 0xa4
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2220      	movs	r2, #32
 80059bc:	4013      	ands	r3, r2
 80059be:	d015      	beq.n	80059ec <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059c0:	23a0      	movs	r3, #160	; 0xa0
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2220      	movs	r2, #32
 80059c8:	4013      	ands	r3, r2
 80059ca:	d106      	bne.n	80059da <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059cc:	239c      	movs	r3, #156	; 0x9c
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2380      	movs	r3, #128	; 0x80
 80059d4:	055b      	lsls	r3, r3, #21
 80059d6:	4013      	ands	r3, r2
 80059d8:	d008      	beq.n	80059ec <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	0010      	movs	r0, r2
 80059ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2290      	movs	r2, #144	; 0x90
 80059f0:	589b      	ldr	r3, [r3, r2]
 80059f2:	2194      	movs	r1, #148	; 0x94
 80059f4:	187a      	adds	r2, r7, r1
 80059f6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2240      	movs	r2, #64	; 0x40
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d004      	beq.n	8005a10 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a06:	187b      	adds	r3, r7, r1
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2228      	movs	r2, #40	; 0x28
 8005a0c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a0e:	d04c      	beq.n	8005aaa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f001 f8d2 	bl	8006bbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2240      	movs	r2, #64	; 0x40
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d13c      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a26:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2e:	2090      	movs	r0, #144	; 0x90
 8005a30:	183a      	adds	r2, r7, r0
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	2301      	movs	r3, #1
 8005a36:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a3a:	f383 8810 	msr	PRIMASK, r3
}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2140      	movs	r1, #64	; 0x40
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	183b      	adds	r3, r7, r0
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a58:	f383 8810 	msr	PRIMASK, r3
}
 8005a5c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	589b      	ldr	r3, [r3, r2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2280      	movs	r2, #128	; 0x80
 8005a6c:	589b      	ldr	r3, [r3, r2]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_UART_IRQHandler+0x2c8>)
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	589b      	ldr	r3, [r3, r2]
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7fc ffed 	bl	8002a58 <HAL_DMA_Abort_IT>
 8005a7e:	1e03      	subs	r3, r0, #0
 8005a80:	d01c      	beq.n	8005abc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	589b      	ldr	r3, [r3, r2]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	5852      	ldr	r2, [r2, r1]
 8005a90:	0010      	movs	r0, r2
 8005a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e012      	b.n	8005abc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f000 f9e9 	bl	8005e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9e:	e00d      	b.n	8005abc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f000 f9e4 	bl	8005e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e008      	b.n	8005abc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	0018      	movs	r0, r3
 8005aae:	f000 f9df 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2290      	movs	r2, #144	; 0x90
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005aba:	e1b9      	b.n	8005e30 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	46c0      	nop			; (mov r8, r8)
    return;
 8005abe:	e1b7      	b.n	8005e30 <HAL_UART_IRQHandler+0x62c>
 8005ac0:	0000080f 	.word	0x0000080f
 8005ac4:	10000001 	.word	0x10000001
 8005ac8:	04000120 	.word	0x04000120
 8005acc:	08006e81 	.word	0x08006e81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d000      	beq.n	8005ada <HAL_UART_IRQHandler+0x2d6>
 8005ad8:	e13e      	b.n	8005d58 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ada:	23a4      	movs	r3, #164	; 0xa4
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d100      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x2e4>
 8005ae6:	e137      	b.n	8005d58 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ae8:	23a0      	movs	r3, #160	; 0xa0
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2210      	movs	r2, #16
 8005af0:	4013      	ands	r3, r2
 8005af2:	d100      	bne.n	8005af6 <HAL_UART_IRQHandler+0x2f2>
 8005af4:	e130      	b.n	8005d58 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2210      	movs	r2, #16
 8005afc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2240      	movs	r2, #64	; 0x40
 8005b06:	4013      	ands	r3, r2
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d000      	beq.n	8005b0e <HAL_UART_IRQHandler+0x30a>
 8005b0c:	e0a4      	b.n	8005c58 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2280      	movs	r2, #128	; 0x80
 8005b12:	589b      	ldr	r3, [r3, r2]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	217e      	movs	r1, #126	; 0x7e
 8005b1a:	187b      	adds	r3, r7, r1
 8005b1c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d100      	bne.n	8005b28 <HAL_UART_IRQHandler+0x324>
 8005b26:	e185      	b.n	8005e34 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	225c      	movs	r2, #92	; 0x5c
 8005b2c:	5a9b      	ldrh	r3, [r3, r2]
 8005b2e:	187a      	adds	r2, r7, r1
 8005b30:	8812      	ldrh	r2, [r2, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d300      	bcc.n	8005b38 <HAL_UART_IRQHandler+0x334>
 8005b36:	e17d      	b.n	8005e34 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	187a      	adds	r2, r7, r1
 8005b3c:	215e      	movs	r1, #94	; 0x5e
 8005b3e:	8812      	ldrh	r2, [r2, #0]
 8005b40:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	589b      	ldr	r3, [r3, r2]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d170      	bne.n	8005c34 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b52:	f3ef 8310 	mrs	r3, PRIMASK
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	f383 8810 	msr	PRIMASK, r3
}
 8005b66:	46c0      	nop			; (mov r8, r8)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	49b4      	ldr	r1, [pc, #720]	; (8005e44 <HAL_UART_IRQHandler+0x640>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	f383 8810 	msr	PRIMASK, r3
}
 8005b82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b84:	f3ef 8310 	mrs	r3, PRIMASK
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8c:	677b      	str	r3, [r7, #116]	; 0x74
 8005b8e:	2301      	movs	r3, #1
 8005b90:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b94:	f383 8810 	msr	PRIMASK, r3
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	438a      	bics	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
 8005baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb0:	f383 8810 	msr	PRIMASK, r3
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc6:	f383 8810 	msr	PRIMASK, r3
}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2140      	movs	r1, #64	; 0x40
 8005bd8:	438a      	bics	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bde:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be2:	f383 8810 	msr	PRIMASK, r3
}
 8005be6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	228c      	movs	r2, #140	; 0x8c
 8005bec:	2120      	movs	r1, #32
 8005bee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c00:	2301      	movs	r3, #1
 8005c02:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c06:	f383 8810 	msr	PRIMASK, r3
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2110      	movs	r1, #16
 8005c18:	438a      	bics	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2280      	movs	r2, #128	; 0x80
 8005c2c:	589b      	ldr	r3, [r3, r2]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7fc feb0 	bl	8002994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	225c      	movs	r2, #92	; 0x5c
 8005c3e:	5a9a      	ldrh	r2, [r3, r2]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	215e      	movs	r1, #94	; 0x5e
 8005c44:	5a5b      	ldrh	r3, [r3, r1]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	0011      	movs	r1, r2
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 f915 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c56:	e0ed      	b.n	8005e34 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	225c      	movs	r2, #92	; 0x5c
 8005c5c:	5a99      	ldrh	r1, [r3, r2]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	225e      	movs	r2, #94	; 0x5e
 8005c62:	5a9b      	ldrh	r3, [r3, r2]
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	208e      	movs	r0, #142	; 0x8e
 8005c68:	183b      	adds	r3, r7, r0
 8005c6a:	1a8a      	subs	r2, r1, r2
 8005c6c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	225e      	movs	r2, #94	; 0x5e
 8005c72:	5a9b      	ldrh	r3, [r3, r2]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d100      	bne.n	8005c7c <HAL_UART_IRQHandler+0x478>
 8005c7a:	e0dd      	b.n	8005e38 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005c7c:	183b      	adds	r3, r7, r0
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d100      	bne.n	8005c86 <HAL_UART_IRQHandler+0x482>
 8005c84:	e0d8      	b.n	8005e38 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c86:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c8e:	2488      	movs	r4, #136	; 0x88
 8005c90:	193a      	adds	r2, r7, r4
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	2301      	movs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4967      	ldr	r1, [pc, #412]	; (8005e48 <HAL_UART_IRQHandler+0x644>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	193b      	adds	r3, r7, r4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f383 8810 	msr	PRIMASK, r3
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cc4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cc6:	2484      	movs	r4, #132	; 0x84
 8005cc8:	193a      	adds	r2, r7, r4
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f383 8810 	msr	PRIMASK, r3
}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	495a      	ldr	r1, [pc, #360]	; (8005e4c <HAL_UART_IRQHandler+0x648>)
 8005ce4:	400a      	ands	r2, r1
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	193b      	adds	r3, r7, r4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f383 8810 	msr	PRIMASK, r3
}
 8005cf4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	228c      	movs	r2, #140	; 0x8c
 8005cfa:	2120      	movs	r1, #32
 8005cfc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d12:	2480      	movs	r4, #128	; 0x80
 8005d14:	193a      	adds	r2, r7, r4
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	f383 8810 	msr	PRIMASK, r3
}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2110      	movs	r1, #16
 8005d30:	438a      	bics	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	193b      	adds	r3, r7, r4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d48:	183b      	adds	r3, r7, r0
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	0011      	movs	r1, r2
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 f895 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d56:	e06f      	b.n	8005e38 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d58:	23a4      	movs	r3, #164	; 0xa4
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	035b      	lsls	r3, r3, #13
 8005d62:	4013      	ands	r3, r2
 8005d64:	d010      	beq.n	8005d88 <HAL_UART_IRQHandler+0x584>
 8005d66:	239c      	movs	r3, #156	; 0x9c
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	03db      	lsls	r3, r3, #15
 8005d70:	4013      	ands	r3, r2
 8005d72:	d009      	beq.n	8005d88 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	0352      	lsls	r2, r2, #13
 8005d7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f001 fd21 	bl	80077c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d86:	e05a      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d88:	23a4      	movs	r3, #164	; 0xa4
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2280      	movs	r2, #128	; 0x80
 8005d90:	4013      	ands	r3, r2
 8005d92:	d016      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d94:	23a0      	movs	r3, #160	; 0xa0
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d106      	bne.n	8005dae <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005da0:	239c      	movs	r3, #156	; 0x9c
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	2380      	movs	r3, #128	; 0x80
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	4013      	ands	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d042      	beq.n	8005e3c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	0010      	movs	r0, r2
 8005dbe:	4798      	blx	r3
    }
    return;
 8005dc0:	e03c      	b.n	8005e3c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dc2:	23a4      	movs	r3, #164	; 0xa4
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d00a      	beq.n	8005de4 <HAL_UART_IRQHandler+0x5e0>
 8005dce:	23a0      	movs	r3, #160	; 0xa0
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2240      	movs	r2, #64	; 0x40
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f001 f866 	bl	8006eae <UART_EndTransmit_IT>
    return;
 8005de2:	e02c      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005de4:	23a4      	movs	r3, #164	; 0xa4
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	041b      	lsls	r3, r3, #16
 8005dee:	4013      	ands	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <HAL_UART_IRQHandler+0x606>
 8005df2:	23a0      	movs	r3, #160	; 0xa0
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	05db      	lsls	r3, r3, #23
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	0018      	movs	r0, r3
 8005e04:	f001 fcf0 	bl	80077e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e08:	e019      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e0a:	23a4      	movs	r3, #164	; 0xa4
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	045b      	lsls	r3, r3, #17
 8005e14:	4013      	ands	r3, r2
 8005e16:	d012      	beq.n	8005e3e <HAL_UART_IRQHandler+0x63a>
 8005e18:	23a0      	movs	r3, #160	; 0xa0
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da0d      	bge.n	8005e3e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f001 fcd7 	bl	80077d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e2a:	e008      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
      return;
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	e006      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
    return;
 8005e30:	46c0      	nop			; (mov r8, r8)
 8005e32:	e004      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
      return;
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	e002      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
      return;
 8005e38:	46c0      	nop			; (mov r8, r8)
 8005e3a:	e000      	b.n	8005e3e <HAL_UART_IRQHandler+0x63a>
    return;
 8005e3c:	46c0      	nop			; (mov r8, r8)
  }
}
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b02a      	add	sp, #168	; 0xa8
 8005e42:	bdb0      	pop	{r4, r5, r7, pc}
 8005e44:	fffffeff 	.word	0xfffffeff
 8005e48:	fffffedf 	.word	0xfffffedf
 8005e4c:	effffffe 	.word	0xeffffffe

08005e50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	000a      	movs	r2, r1
 8005e8a:	1cbb      	adds	r3, r7, #2
 8005e8c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e98:	b5b0      	push	{r4, r5, r7, lr}
 8005e9a:	b090      	sub	sp, #64	; 0x40
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ea0:	231a      	movs	r3, #26
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	189b      	adds	r3, r3, r2
 8005ea6:	19db      	adds	r3, r3, r7
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4aaf      	ldr	r2, [pc, #700]	; (8006188 <UART_SetConfig+0x2f0>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	0019      	movs	r1, r3
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4aaa      	ldr	r2, [pc, #680]	; (800618c <UART_SetConfig+0x2f4>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	68d9      	ldr	r1, [r3, #12]
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	0003      	movs	r3, r0
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4aa4      	ldr	r2, [pc, #656]	; (8006190 <UART_SetConfig+0x2f8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a9f      	ldr	r2, [pc, #636]	; (8006194 <UART_SetConfig+0x2fc>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	220f      	movs	r2, #15
 8005f2c:	4393      	bics	r3, r2
 8005f2e:	0018      	movs	r0, r3
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	0003      	movs	r3, r0
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a95      	ldr	r2, [pc, #596]	; (8006198 <UART_SetConfig+0x300>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d131      	bne.n	8005fac <UART_SetConfig+0x114>
 8005f48:	4b94      	ldr	r3, [pc, #592]	; (800619c <UART_SetConfig+0x304>)
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d01d      	beq.n	8005f90 <UART_SetConfig+0xf8>
 8005f54:	d823      	bhi.n	8005f9e <UART_SetConfig+0x106>
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d00c      	beq.n	8005f74 <UART_SetConfig+0xdc>
 8005f5a:	d820      	bhi.n	8005f9e <UART_SetConfig+0x106>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <UART_SetConfig+0xce>
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d00e      	beq.n	8005f82 <UART_SetConfig+0xea>
 8005f64:	e01b      	b.n	8005f9e <UART_SetConfig+0x106>
 8005f66:	231b      	movs	r3, #27
 8005f68:	2220      	movs	r2, #32
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	19db      	adds	r3, r3, r7
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e0b4      	b.n	80060de <UART_SetConfig+0x246>
 8005f74:	231b      	movs	r3, #27
 8005f76:	2220      	movs	r2, #32
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	19db      	adds	r3, r3, r7
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e0ad      	b.n	80060de <UART_SetConfig+0x246>
 8005f82:	231b      	movs	r3, #27
 8005f84:	2220      	movs	r2, #32
 8005f86:	189b      	adds	r3, r3, r2
 8005f88:	19db      	adds	r3, r3, r7
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e0a6      	b.n	80060de <UART_SetConfig+0x246>
 8005f90:	231b      	movs	r3, #27
 8005f92:	2220      	movs	r2, #32
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	19db      	adds	r3, r3, r7
 8005f98:	2208      	movs	r2, #8
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e09f      	b.n	80060de <UART_SetConfig+0x246>
 8005f9e:	231b      	movs	r3, #27
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	189b      	adds	r3, r3, r2
 8005fa4:	19db      	adds	r3, r3, r7
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e098      	b.n	80060de <UART_SetConfig+0x246>
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a7b      	ldr	r2, [pc, #492]	; (80061a0 <UART_SetConfig+0x308>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d131      	bne.n	800601a <UART_SetConfig+0x182>
 8005fb6:	4b79      	ldr	r3, [pc, #484]	; (800619c <UART_SetConfig+0x304>)
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	220c      	movs	r2, #12
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b0c      	cmp	r3, #12
 8005fc0:	d01d      	beq.n	8005ffe <UART_SetConfig+0x166>
 8005fc2:	d823      	bhi.n	800600c <UART_SetConfig+0x174>
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d00c      	beq.n	8005fe2 <UART_SetConfig+0x14a>
 8005fc8:	d820      	bhi.n	800600c <UART_SetConfig+0x174>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <UART_SetConfig+0x13c>
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d00e      	beq.n	8005ff0 <UART_SetConfig+0x158>
 8005fd2:	e01b      	b.n	800600c <UART_SetConfig+0x174>
 8005fd4:	231b      	movs	r3, #27
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	189b      	adds	r3, r3, r2
 8005fda:	19db      	adds	r3, r3, r7
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e07d      	b.n	80060de <UART_SetConfig+0x246>
 8005fe2:	231b      	movs	r3, #27
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	19db      	adds	r3, r3, r7
 8005fea:	2202      	movs	r2, #2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e076      	b.n	80060de <UART_SetConfig+0x246>
 8005ff0:	231b      	movs	r3, #27
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	189b      	adds	r3, r3, r2
 8005ff6:	19db      	adds	r3, r3, r7
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	e06f      	b.n	80060de <UART_SetConfig+0x246>
 8005ffe:	231b      	movs	r3, #27
 8006000:	2220      	movs	r2, #32
 8006002:	189b      	adds	r3, r3, r2
 8006004:	19db      	adds	r3, r3, r7
 8006006:	2208      	movs	r2, #8
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e068      	b.n	80060de <UART_SetConfig+0x246>
 800600c:	231b      	movs	r3, #27
 800600e:	2220      	movs	r2, #32
 8006010:	189b      	adds	r3, r3, r2
 8006012:	19db      	adds	r3, r3, r7
 8006014:	2210      	movs	r2, #16
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e061      	b.n	80060de <UART_SetConfig+0x246>
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a61      	ldr	r2, [pc, #388]	; (80061a4 <UART_SetConfig+0x30c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d106      	bne.n	8006032 <UART_SetConfig+0x19a>
 8006024:	231b      	movs	r3, #27
 8006026:	2220      	movs	r2, #32
 8006028:	189b      	adds	r3, r3, r2
 800602a:	19db      	adds	r3, r3, r7
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	e055      	b.n	80060de <UART_SetConfig+0x246>
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a5c      	ldr	r2, [pc, #368]	; (80061a8 <UART_SetConfig+0x310>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d106      	bne.n	800604a <UART_SetConfig+0x1b2>
 800603c:	231b      	movs	r3, #27
 800603e:	2220      	movs	r2, #32
 8006040:	189b      	adds	r3, r3, r2
 8006042:	19db      	adds	r3, r3, r7
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e049      	b.n	80060de <UART_SetConfig+0x246>
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a50      	ldr	r2, [pc, #320]	; (8006190 <UART_SetConfig+0x2f8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d13e      	bne.n	80060d2 <UART_SetConfig+0x23a>
 8006054:	4b51      	ldr	r3, [pc, #324]	; (800619c <UART_SetConfig+0x304>)
 8006056:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006058:	23c0      	movs	r3, #192	; 0xc0
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	4013      	ands	r3, r2
 800605e:	22c0      	movs	r2, #192	; 0xc0
 8006060:	0112      	lsls	r2, r2, #4
 8006062:	4293      	cmp	r3, r2
 8006064:	d027      	beq.n	80060b6 <UART_SetConfig+0x21e>
 8006066:	22c0      	movs	r2, #192	; 0xc0
 8006068:	0112      	lsls	r2, r2, #4
 800606a:	4293      	cmp	r3, r2
 800606c:	d82a      	bhi.n	80060c4 <UART_SetConfig+0x22c>
 800606e:	2280      	movs	r2, #128	; 0x80
 8006070:	0112      	lsls	r2, r2, #4
 8006072:	4293      	cmp	r3, r2
 8006074:	d011      	beq.n	800609a <UART_SetConfig+0x202>
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	0112      	lsls	r2, r2, #4
 800607a:	4293      	cmp	r3, r2
 800607c:	d822      	bhi.n	80060c4 <UART_SetConfig+0x22c>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <UART_SetConfig+0x1f4>
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	00d2      	lsls	r2, r2, #3
 8006086:	4293      	cmp	r3, r2
 8006088:	d00e      	beq.n	80060a8 <UART_SetConfig+0x210>
 800608a:	e01b      	b.n	80060c4 <UART_SetConfig+0x22c>
 800608c:	231b      	movs	r3, #27
 800608e:	2220      	movs	r2, #32
 8006090:	189b      	adds	r3, r3, r2
 8006092:	19db      	adds	r3, r3, r7
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e021      	b.n	80060de <UART_SetConfig+0x246>
 800609a:	231b      	movs	r3, #27
 800609c:	2220      	movs	r2, #32
 800609e:	189b      	adds	r3, r3, r2
 80060a0:	19db      	adds	r3, r3, r7
 80060a2:	2202      	movs	r2, #2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e01a      	b.n	80060de <UART_SetConfig+0x246>
 80060a8:	231b      	movs	r3, #27
 80060aa:	2220      	movs	r2, #32
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	19db      	adds	r3, r3, r7
 80060b0:	2204      	movs	r2, #4
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	e013      	b.n	80060de <UART_SetConfig+0x246>
 80060b6:	231b      	movs	r3, #27
 80060b8:	2220      	movs	r2, #32
 80060ba:	189b      	adds	r3, r3, r2
 80060bc:	19db      	adds	r3, r3, r7
 80060be:	2208      	movs	r2, #8
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e00c      	b.n	80060de <UART_SetConfig+0x246>
 80060c4:	231b      	movs	r3, #27
 80060c6:	2220      	movs	r2, #32
 80060c8:	189b      	adds	r3, r3, r2
 80060ca:	19db      	adds	r3, r3, r7
 80060cc:	2210      	movs	r2, #16
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e005      	b.n	80060de <UART_SetConfig+0x246>
 80060d2:	231b      	movs	r3, #27
 80060d4:	2220      	movs	r2, #32
 80060d6:	189b      	adds	r3, r3, r2
 80060d8:	19db      	adds	r3, r3, r7
 80060da:	2210      	movs	r2, #16
 80060dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a2b      	ldr	r2, [pc, #172]	; (8006190 <UART_SetConfig+0x2f8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d000      	beq.n	80060ea <UART_SetConfig+0x252>
 80060e8:	e0a9      	b.n	800623e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060ea:	231b      	movs	r3, #27
 80060ec:	2220      	movs	r2, #32
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	19db      	adds	r3, r3, r7
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d015      	beq.n	8006124 <UART_SetConfig+0x28c>
 80060f8:	dc18      	bgt.n	800612c <UART_SetConfig+0x294>
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d00d      	beq.n	800611a <UART_SetConfig+0x282>
 80060fe:	dc15      	bgt.n	800612c <UART_SetConfig+0x294>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <UART_SetConfig+0x272>
 8006104:	2b02      	cmp	r3, #2
 8006106:	d005      	beq.n	8006114 <UART_SetConfig+0x27c>
 8006108:	e010      	b.n	800612c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800610a:	f7fd fccd 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 800610e:	0003      	movs	r3, r0
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006112:	e014      	b.n	800613e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006114:	4b25      	ldr	r3, [pc, #148]	; (80061ac <UART_SetConfig+0x314>)
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006118:	e011      	b.n	800613e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611a:	f7fd fc39 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800611e:	0003      	movs	r3, r0
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006122:	e00c      	b.n	800613e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800612a:	e008      	b.n	800613e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006130:	231a      	movs	r3, #26
 8006132:	2220      	movs	r2, #32
 8006134:	189b      	adds	r3, r3, r2
 8006136:	19db      	adds	r3, r3, r7
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
        break;
 800613c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	2b00      	cmp	r3, #0
 8006142:	d100      	bne.n	8006146 <UART_SetConfig+0x2ae>
 8006144:	e14b      	b.n	80063de <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800614a:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <UART_SetConfig+0x318>)
 800614c:	0052      	lsls	r2, r2, #1
 800614e:	5ad3      	ldrh	r3, [r2, r3]
 8006150:	0019      	movs	r1, r3
 8006152:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006154:	f7f9 ffd6 	bl	8000104 <__udivsi3>
 8006158:	0003      	movs	r3, r0
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	0013      	movs	r3, r2
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	189b      	adds	r3, r3, r2
 8006166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006168:	429a      	cmp	r2, r3
 800616a:	d305      	bcc.n	8006178 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006174:	429a      	cmp	r2, r3
 8006176:	d91d      	bls.n	80061b4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006178:	231a      	movs	r3, #26
 800617a:	2220      	movs	r2, #32
 800617c:	189b      	adds	r3, r3, r2
 800617e:	19db      	adds	r3, r3, r7
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e12b      	b.n	80063de <UART_SetConfig+0x546>
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	cfff69f3 	.word	0xcfff69f3
 800618c:	ffffcfff 	.word	0xffffcfff
 8006190:	40008000 	.word	0x40008000
 8006194:	11fff4ff 	.word	0x11fff4ff
 8006198:	40013800 	.word	0x40013800
 800619c:	40021000 	.word	0x40021000
 80061a0:	40004400 	.word	0x40004400
 80061a4:	40004800 	.word	0x40004800
 80061a8:	40004c00 	.word	0x40004c00
 80061ac:	00f42400 	.word	0x00f42400
 80061b0:	08007b50 	.word	0x08007b50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c0:	4b92      	ldr	r3, [pc, #584]	; (800640c <UART_SetConfig+0x574>)
 80061c2:	0052      	lsls	r2, r2, #1
 80061c4:	5ad3      	ldrh	r3, [r2, r3]
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	69b8      	ldr	r0, [r7, #24]
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	f7fa f90c 	bl	80003f0 <__aeabi_uldivmod>
 80061d8:	0002      	movs	r2, r0
 80061da:	000b      	movs	r3, r1
 80061dc:	0e11      	lsrs	r1, r2, #24
 80061de:	021d      	lsls	r5, r3, #8
 80061e0:	430d      	orrs	r5, r1
 80061e2:	0214      	lsls	r4, r2, #8
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	60bb      	str	r3, [r7, #8]
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68b8      	ldr	r0, [r7, #8]
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	1900      	adds	r0, r0, r4
 80061f6:	4169      	adcs	r1, r5
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	2300      	movs	r3, #0
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f7fa f8f3 	bl	80003f0 <__aeabi_uldivmod>
 800620a:	0002      	movs	r2, r0
 800620c:	000b      	movs	r3, r1
 800620e:	0013      	movs	r3, r2
 8006210:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006214:	23c0      	movs	r3, #192	; 0xc0
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	429a      	cmp	r2, r3
 800621a:	d309      	bcc.n	8006230 <UART_SetConfig+0x398>
 800621c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	035b      	lsls	r3, r3, #13
 8006222:	429a      	cmp	r2, r3
 8006224:	d204      	bcs.n	8006230 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622c:	60da      	str	r2, [r3, #12]
 800622e:	e0d6      	b.n	80063de <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006230:	231a      	movs	r3, #26
 8006232:	2220      	movs	r2, #32
 8006234:	189b      	adds	r3, r3, r2
 8006236:	19db      	adds	r3, r3, r7
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e0cf      	b.n	80063de <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	429a      	cmp	r2, r3
 8006248:	d000      	beq.n	800624c <UART_SetConfig+0x3b4>
 800624a:	e070      	b.n	800632e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800624c:	231b      	movs	r3, #27
 800624e:	2220      	movs	r2, #32
 8006250:	189b      	adds	r3, r3, r2
 8006252:	19db      	adds	r3, r3, r7
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b08      	cmp	r3, #8
 8006258:	d015      	beq.n	8006286 <UART_SetConfig+0x3ee>
 800625a:	dc18      	bgt.n	800628e <UART_SetConfig+0x3f6>
 800625c:	2b04      	cmp	r3, #4
 800625e:	d00d      	beq.n	800627c <UART_SetConfig+0x3e4>
 8006260:	dc15      	bgt.n	800628e <UART_SetConfig+0x3f6>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <UART_SetConfig+0x3d4>
 8006266:	2b02      	cmp	r3, #2
 8006268:	d005      	beq.n	8006276 <UART_SetConfig+0x3de>
 800626a:	e010      	b.n	800628e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800626c:	f7fd fc1c 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8006270:	0003      	movs	r3, r0
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006274:	e014      	b.n	80062a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006276:	4b66      	ldr	r3, [pc, #408]	; (8006410 <UART_SetConfig+0x578>)
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800627a:	e011      	b.n	80062a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627c:	f7fd fb88 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8006280:	0003      	movs	r3, r0
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006284:	e00c      	b.n	80062a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800628c:	e008      	b.n	80062a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006292:	231a      	movs	r3, #26
 8006294:	2220      	movs	r2, #32
 8006296:	189b      	adds	r3, r3, r2
 8006298:	19db      	adds	r3, r3, r7
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
        break;
 800629e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d100      	bne.n	80062a8 <UART_SetConfig+0x410>
 80062a6:	e09a      	b.n	80063de <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ac:	4b57      	ldr	r3, [pc, #348]	; (800640c <UART_SetConfig+0x574>)
 80062ae:	0052      	lsls	r2, r2, #1
 80062b0:	5ad3      	ldrh	r3, [r2, r3]
 80062b2:	0019      	movs	r1, r3
 80062b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062b6:	f7f9 ff25 	bl	8000104 <__udivsi3>
 80062ba:	0003      	movs	r3, r0
 80062bc:	005a      	lsls	r2, r3, #1
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	18d2      	adds	r2, r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	0019      	movs	r1, r3
 80062cc:	0010      	movs	r0, r2
 80062ce:	f7f9 ff19 	bl	8000104 <__udivsi3>
 80062d2:	0003      	movs	r3, r0
 80062d4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	2b0f      	cmp	r3, #15
 80062da:	d921      	bls.n	8006320 <UART_SetConfig+0x488>
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	2380      	movs	r3, #128	; 0x80
 80062e0:	025b      	lsls	r3, r3, #9
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d21c      	bcs.n	8006320 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	200e      	movs	r0, #14
 80062ec:	2420      	movs	r4, #32
 80062ee:	1903      	adds	r3, r0, r4
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	210f      	movs	r1, #15
 80062f4:	438a      	bics	r2, r1
 80062f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2207      	movs	r2, #7
 8006300:	4013      	ands	r3, r2
 8006302:	b299      	uxth	r1, r3
 8006304:	1903      	adds	r3, r0, r4
 8006306:	19db      	adds	r3, r3, r7
 8006308:	1902      	adds	r2, r0, r4
 800630a:	19d2      	adds	r2, r2, r7
 800630c:	8812      	ldrh	r2, [r2, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	1902      	adds	r2, r0, r4
 8006318:	19d2      	adds	r2, r2, r7
 800631a:	8812      	ldrh	r2, [r2, #0]
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	e05e      	b.n	80063de <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006320:	231a      	movs	r3, #26
 8006322:	2220      	movs	r2, #32
 8006324:	189b      	adds	r3, r3, r2
 8006326:	19db      	adds	r3, r3, r7
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e057      	b.n	80063de <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800632e:	231b      	movs	r3, #27
 8006330:	2220      	movs	r2, #32
 8006332:	189b      	adds	r3, r3, r2
 8006334:	19db      	adds	r3, r3, r7
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d015      	beq.n	8006368 <UART_SetConfig+0x4d0>
 800633c:	dc18      	bgt.n	8006370 <UART_SetConfig+0x4d8>
 800633e:	2b04      	cmp	r3, #4
 8006340:	d00d      	beq.n	800635e <UART_SetConfig+0x4c6>
 8006342:	dc15      	bgt.n	8006370 <UART_SetConfig+0x4d8>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <UART_SetConfig+0x4b6>
 8006348:	2b02      	cmp	r3, #2
 800634a:	d005      	beq.n	8006358 <UART_SetConfig+0x4c0>
 800634c:	e010      	b.n	8006370 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800634e:	f7fd fbab 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8006352:	0003      	movs	r3, r0
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006356:	e014      	b.n	8006382 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006358:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <UART_SetConfig+0x578>)
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800635c:	e011      	b.n	8006382 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635e:	f7fd fb17 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8006362:	0003      	movs	r3, r0
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006366:	e00c      	b.n	8006382 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800636e:	e008      	b.n	8006382 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006374:	231a      	movs	r3, #26
 8006376:	2220      	movs	r2, #32
 8006378:	189b      	adds	r3, r3, r2
 800637a:	19db      	adds	r3, r3, r7
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
        break;
 8006380:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	2b00      	cmp	r3, #0
 8006386:	d02a      	beq.n	80063de <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <UART_SetConfig+0x574>)
 800638e:	0052      	lsls	r2, r2, #1
 8006390:	5ad3      	ldrh	r3, [r2, r3]
 8006392:	0019      	movs	r1, r3
 8006394:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006396:	f7f9 feb5 	bl	8000104 <__udivsi3>
 800639a:	0003      	movs	r3, r0
 800639c:	001a      	movs	r2, r3
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	18d2      	adds	r2, r2, r3
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	0019      	movs	r1, r3
 80063ac:	0010      	movs	r0, r2
 80063ae:	f7f9 fea9 	bl	8000104 <__udivsi3>
 80063b2:	0003      	movs	r3, r0
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2b0f      	cmp	r3, #15
 80063ba:	d90a      	bls.n	80063d2 <UART_SetConfig+0x53a>
 80063bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d205      	bcs.n	80063d2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60da      	str	r2, [r3, #12]
 80063d0:	e005      	b.n	80063de <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80063d2:	231a      	movs	r3, #26
 80063d4:	2220      	movs	r2, #32
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	19db      	adds	r3, r3, r7
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	226a      	movs	r2, #106	; 0x6a
 80063e2:	2101      	movs	r1, #1
 80063e4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	2268      	movs	r2, #104	; 0x68
 80063ea:	2101      	movs	r1, #1
 80063ec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	2200      	movs	r2, #0
 80063f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	2200      	movs	r2, #0
 80063f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80063fa:	231a      	movs	r3, #26
 80063fc:	2220      	movs	r2, #32
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	19db      	adds	r3, r3, r7
 8006402:	781b      	ldrb	r3, [r3, #0]
}
 8006404:	0018      	movs	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	b010      	add	sp, #64	; 0x40
 800640a:	bdb0      	pop	{r4, r5, r7, pc}
 800640c:	08007b50 	.word	0x08007b50
 8006410:	00f42400 	.word	0x00f42400

08006414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	2201      	movs	r2, #1
 8006422:	4013      	ands	r3, r2
 8006424:	d00b      	beq.n	800643e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	4a4a      	ldr	r2, [pc, #296]	; (8006558 <UART_AdvFeatureConfig+0x144>)
 800642e:	4013      	ands	r3, r2
 8006430:	0019      	movs	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	2202      	movs	r2, #2
 8006444:	4013      	ands	r3, r2
 8006446:	d00b      	beq.n	8006460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4a43      	ldr	r2, [pc, #268]	; (800655c <UART_AdvFeatureConfig+0x148>)
 8006450:	4013      	ands	r3, r2
 8006452:	0019      	movs	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	2204      	movs	r2, #4
 8006466:	4013      	ands	r3, r2
 8006468:	d00b      	beq.n	8006482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a3b      	ldr	r2, [pc, #236]	; (8006560 <UART_AdvFeatureConfig+0x14c>)
 8006472:	4013      	ands	r3, r2
 8006474:	0019      	movs	r1, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	2208      	movs	r2, #8
 8006488:	4013      	ands	r3, r2
 800648a:	d00b      	beq.n	80064a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4a34      	ldr	r2, [pc, #208]	; (8006564 <UART_AdvFeatureConfig+0x150>)
 8006494:	4013      	ands	r3, r2
 8006496:	0019      	movs	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	2210      	movs	r2, #16
 80064aa:	4013      	ands	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4a2c      	ldr	r2, [pc, #176]	; (8006568 <UART_AdvFeatureConfig+0x154>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	0019      	movs	r1, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	2220      	movs	r2, #32
 80064cc:	4013      	ands	r3, r2
 80064ce:	d00b      	beq.n	80064e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	4a25      	ldr	r2, [pc, #148]	; (800656c <UART_AdvFeatureConfig+0x158>)
 80064d8:	4013      	ands	r3, r2
 80064da:	0019      	movs	r1, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	2240      	movs	r2, #64	; 0x40
 80064ee:	4013      	ands	r3, r2
 80064f0:	d01d      	beq.n	800652e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4a1d      	ldr	r2, [pc, #116]	; (8006570 <UART_AdvFeatureConfig+0x15c>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	0019      	movs	r1, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650e:	2380      	movs	r3, #128	; 0x80
 8006510:	035b      	lsls	r3, r3, #13
 8006512:	429a      	cmp	r2, r3
 8006514:	d10b      	bne.n	800652e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a15      	ldr	r2, [pc, #84]	; (8006574 <UART_AdvFeatureConfig+0x160>)
 800651e:	4013      	ands	r3, r2
 8006520:	0019      	movs	r1, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	2280      	movs	r2, #128	; 0x80
 8006534:	4013      	ands	r3, r2
 8006536:	d00b      	beq.n	8006550 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4a0e      	ldr	r2, [pc, #56]	; (8006578 <UART_AdvFeatureConfig+0x164>)
 8006540:	4013      	ands	r3, r2
 8006542:	0019      	movs	r1, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}
 8006558:	fffdffff 	.word	0xfffdffff
 800655c:	fffeffff 	.word	0xfffeffff
 8006560:	fffbffff 	.word	0xfffbffff
 8006564:	ffff7fff 	.word	0xffff7fff
 8006568:	ffffefff 	.word	0xffffefff
 800656c:	ffffdfff 	.word	0xffffdfff
 8006570:	ffefffff 	.word	0xffefffff
 8006574:	ff9fffff 	.word	0xff9fffff
 8006578:	fff7ffff 	.word	0xfff7ffff

0800657c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af02      	add	r7, sp, #8
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2290      	movs	r2, #144	; 0x90
 8006588:	2100      	movs	r1, #0
 800658a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800658c:	f7fc f80a 	bl	80025a4 <HAL_GetTick>
 8006590:	0003      	movs	r3, r0
 8006592:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2208      	movs	r2, #8
 800659c:	4013      	ands	r3, r2
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d10c      	bne.n	80065bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2280      	movs	r2, #128	; 0x80
 80065a6:	0391      	lsls	r1, r2, #14
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <UART_CheckIdleState+0x98>)
 80065ac:	9200      	str	r2, [sp, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f000 f832 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 80065b4:	1e03      	subs	r3, r0, #0
 80065b6:	d001      	beq.n	80065bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e026      	b.n	800660a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2204      	movs	r2, #4
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d10c      	bne.n	80065e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2280      	movs	r2, #128	; 0x80
 80065ce:	03d1      	lsls	r1, r2, #15
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4a10      	ldr	r2, [pc, #64]	; (8006614 <UART_CheckIdleState+0x98>)
 80065d4:	9200      	str	r2, [sp, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f000 f81e 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 80065dc:	1e03      	subs	r3, r0, #0
 80065de:	d001      	beq.n	80065e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e012      	b.n	800660a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2288      	movs	r2, #136	; 0x88
 80065e8:	2120      	movs	r1, #32
 80065ea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	228c      	movs	r2, #140	; 0x8c
 80065f0:	2120      	movs	r1, #32
 80065f2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2284      	movs	r2, #132	; 0x84
 8006604:	2100      	movs	r1, #0
 8006606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	0018      	movs	r0, r3
 800660c:	46bd      	mov	sp, r7
 800660e:	b004      	add	sp, #16
 8006610:	bd80      	pop	{r7, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	01ffffff 	.word	0x01ffffff

08006618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b094      	sub	sp, #80	; 0x50
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	1dfb      	adds	r3, r7, #7
 8006626:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006628:	e0a7      	b.n	800677a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800662c:	3301      	adds	r3, #1
 800662e:	d100      	bne.n	8006632 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006630:	e0a3      	b.n	800677a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fb ffb7 	bl	80025a4 <HAL_GetTick>
 8006636:	0002      	movs	r2, r0
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <UART_WaitOnFlagUntilTimeout+0x30>
 8006642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006644:	2b00      	cmp	r3, #0
 8006646:	d13f      	bne.n	80066c8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006648:	f3ef 8310 	mrs	r3, PRIMASK
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006650:	647b      	str	r3, [r7, #68]	; 0x44
 8006652:	2301      	movs	r3, #1
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	f383 8810 	msr	PRIMASK, r3
}
 800665c:	46c0      	nop			; (mov r8, r8)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	494e      	ldr	r1, [pc, #312]	; (80067a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800666a:	400a      	ands	r2, r1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006670:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	f383 8810 	msr	PRIMASK, r3
}
 8006678:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667a:	f3ef 8310 	mrs	r3, PRIMASK
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006682:	643b      	str	r3, [r7, #64]	; 0x40
 8006684:	2301      	movs	r3, #1
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	f383 8810 	msr	PRIMASK, r3
}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2101      	movs	r1, #1
 800669c:	438a      	bics	r2, r1
 800669e:	609a      	str	r2, [r3, #8]
 80066a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	f383 8810 	msr	PRIMASK, r3
}
 80066aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2288      	movs	r2, #136	; 0x88
 80066b0:	2120      	movs	r1, #32
 80066b2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	228c      	movs	r2, #140	; 0x8c
 80066b8:	2120      	movs	r1, #32
 80066ba:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2284      	movs	r2, #132	; 0x84
 80066c0:	2100      	movs	r1, #0
 80066c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e069      	b.n	800679c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2204      	movs	r2, #4
 80066d0:	4013      	ands	r3, r2
 80066d2:	d052      	beq.n	800677a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69da      	ldr	r2, [r3, #28]
 80066da:	2380      	movs	r3, #128	; 0x80
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	401a      	ands	r2, r3
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d148      	bne.n	800677a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	0112      	lsls	r2, r2, #4
 80066f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f2:	f3ef 8310 	mrs	r3, PRIMASK
 80066f6:	613b      	str	r3, [r7, #16]
  return(result);
 80066f8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fc:	2301      	movs	r3, #1
 80066fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4924      	ldr	r1, [pc, #144]	; (80067a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006714:	400a      	ands	r2, r1
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f383 8810 	msr	PRIMASK, r3
}
 8006722:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006724:	f3ef 8310 	mrs	r3, PRIMASK
 8006728:	61fb      	str	r3, [r7, #28]
  return(result);
 800672a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	64bb      	str	r3, [r7, #72]	; 0x48
 800672e:	2301      	movs	r3, #1
 8006730:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	f383 8810 	msr	PRIMASK, r3
}
 8006738:	46c0      	nop			; (mov r8, r8)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2101      	movs	r1, #1
 8006746:	438a      	bics	r2, r1
 8006748:	609a      	str	r2, [r3, #8]
 800674a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	f383 8810 	msr	PRIMASK, r3
}
 8006754:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2288      	movs	r2, #136	; 0x88
 800675a:	2120      	movs	r1, #32
 800675c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	228c      	movs	r2, #140	; 0x8c
 8006762:	2120      	movs	r1, #32
 8006764:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2290      	movs	r2, #144	; 0x90
 800676a:	2120      	movs	r1, #32
 800676c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2284      	movs	r2, #132	; 0x84
 8006772:	2100      	movs	r1, #0
 8006774:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e010      	b.n	800679c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	425a      	negs	r2, r3
 800678a:	4153      	adcs	r3, r2
 800678c:	b2db      	uxtb	r3, r3
 800678e:	001a      	movs	r2, r3
 8006790:	1dfb      	adds	r3, r7, #7
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d100      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0x182>
 8006798:	e747      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	0018      	movs	r0, r3
 800679e:	46bd      	mov	sp, r7
 80067a0:	b014      	add	sp, #80	; 0x50
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	fffffe5f 	.word	0xfffffe5f

080067a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b098      	sub	sp, #96	; 0x60
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	1dbb      	adds	r3, r7, #6
 80067b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	1dba      	adds	r2, r7, #6
 80067c0:	215c      	movs	r1, #92	; 0x5c
 80067c2:	8812      	ldrh	r2, [r2, #0]
 80067c4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1dba      	adds	r2, r7, #6
 80067ca:	215e      	movs	r1, #94	; 0x5e
 80067cc:	8812      	ldrh	r2, [r2, #0]
 80067ce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	2380      	movs	r3, #128	; 0x80
 80067dc:	015b      	lsls	r3, r3, #5
 80067de:	429a      	cmp	r2, r3
 80067e0:	d10d      	bne.n	80067fe <UART_Start_Receive_IT+0x56>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <UART_Start_Receive_IT+0x4c>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2260      	movs	r2, #96	; 0x60
 80067ee:	497b      	ldr	r1, [pc, #492]	; (80069dc <UART_Start_Receive_IT+0x234>)
 80067f0:	5299      	strh	r1, [r3, r2]
 80067f2:	e02e      	b.n	8006852 <UART_Start_Receive_IT+0xaa>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2260      	movs	r2, #96	; 0x60
 80067f8:	21ff      	movs	r1, #255	; 0xff
 80067fa:	5299      	strh	r1, [r3, r2]
 80067fc:	e029      	b.n	8006852 <UART_Start_Receive_IT+0xaa>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10d      	bne.n	8006822 <UART_Start_Receive_IT+0x7a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <UART_Start_Receive_IT+0x70>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2260      	movs	r2, #96	; 0x60
 8006812:	21ff      	movs	r1, #255	; 0xff
 8006814:	5299      	strh	r1, [r3, r2]
 8006816:	e01c      	b.n	8006852 <UART_Start_Receive_IT+0xaa>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2260      	movs	r2, #96	; 0x60
 800681c:	217f      	movs	r1, #127	; 0x7f
 800681e:	5299      	strh	r1, [r3, r2]
 8006820:	e017      	b.n	8006852 <UART_Start_Receive_IT+0xaa>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	055b      	lsls	r3, r3, #21
 800682a:	429a      	cmp	r2, r3
 800682c:	d10d      	bne.n	800684a <UART_Start_Receive_IT+0xa2>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <UART_Start_Receive_IT+0x98>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2260      	movs	r2, #96	; 0x60
 800683a:	217f      	movs	r1, #127	; 0x7f
 800683c:	5299      	strh	r1, [r3, r2]
 800683e:	e008      	b.n	8006852 <UART_Start_Receive_IT+0xaa>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2260      	movs	r2, #96	; 0x60
 8006844:	213f      	movs	r1, #63	; 0x3f
 8006846:	5299      	strh	r1, [r3, r2]
 8006848:	e003      	b.n	8006852 <UART_Start_Receive_IT+0xaa>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2260      	movs	r2, #96	; 0x60
 800684e:	2100      	movs	r1, #0
 8006850:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2290      	movs	r2, #144	; 0x90
 8006856:	2100      	movs	r1, #0
 8006858:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	228c      	movs	r2, #140	; 0x8c
 800685e:	2122      	movs	r1, #34	; 0x22
 8006860:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006862:	f3ef 8310 	mrs	r3, PRIMASK
 8006866:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800686c:	2301      	movs	r3, #1
 800686e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006872:	f383 8810 	msr	PRIMASK, r3
}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2101      	movs	r1, #1
 8006884:	430a      	orrs	r2, r1
 8006886:	609a      	str	r2, [r3, #8]
 8006888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800688a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688e:	f383 8810 	msr	PRIMASK, r3
}
 8006892:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	059b      	lsls	r3, r3, #22
 800689c:	429a      	cmp	r2, r3
 800689e:	d150      	bne.n	8006942 <UART_Start_Receive_IT+0x19a>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2268      	movs	r2, #104	; 0x68
 80068a4:	5a9b      	ldrh	r3, [r3, r2]
 80068a6:	1dba      	adds	r2, r7, #6
 80068a8:	8812      	ldrh	r2, [r2, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d349      	bcc.n	8006942 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	015b      	lsls	r3, r3, #5
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d107      	bne.n	80068ca <UART_Start_Receive_IT+0x122>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a46      	ldr	r2, [pc, #280]	; (80069e0 <UART_Start_Receive_IT+0x238>)
 80068c6:	675a      	str	r2, [r3, #116]	; 0x74
 80068c8:	e002      	b.n	80068d0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a45      	ldr	r2, [pc, #276]	; (80069e4 <UART_Start_Receive_IT+0x23c>)
 80068ce:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d019      	beq.n	800690c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068d8:	f3ef 8310 	mrs	r3, PRIMASK
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068e2:	2301      	movs	r3, #1
 80068e4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	f383 8810 	msr	PRIMASK, r3
}
 80068ec:	46c0      	nop			; (mov r8, r8)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2180      	movs	r1, #128	; 0x80
 80068fa:	0049      	lsls	r1, r1, #1
 80068fc:	430a      	orrs	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006906:	f383 8810 	msr	PRIMASK, r3
}
 800690a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800690c:	f3ef 8310 	mrs	r3, PRIMASK
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006914:	657b      	str	r3, [r7, #84]	; 0x54
 8006916:	2301      	movs	r3, #1
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	f383 8810 	msr	PRIMASK, r3
}
 8006920:	46c0      	nop			; (mov r8, r8)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2180      	movs	r1, #128	; 0x80
 800692e:	0549      	lsls	r1, r1, #21
 8006930:	430a      	orrs	r2, r1
 8006932:	609a      	str	r2, [r3, #8]
 8006934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006936:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	f383 8810 	msr	PRIMASK, r3
}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	e047      	b.n	80069d2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	015b      	lsls	r3, r3, #5
 800694a:	429a      	cmp	r2, r3
 800694c:	d107      	bne.n	800695e <UART_Start_Receive_IT+0x1b6>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a23      	ldr	r2, [pc, #140]	; (80069e8 <UART_Start_Receive_IT+0x240>)
 800695a:	675a      	str	r2, [r3, #116]	; 0x74
 800695c:	e002      	b.n	8006964 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a22      	ldr	r2, [pc, #136]	; (80069ec <UART_Start_Receive_IT+0x244>)
 8006962:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d019      	beq.n	80069a0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696c:	f3ef 8310 	mrs	r3, PRIMASK
 8006970:	61fb      	str	r3, [r7, #28]
  return(result);
 8006972:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006976:	2301      	movs	r3, #1
 8006978:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f383 8810 	msr	PRIMASK, r3
}
 8006980:	46c0      	nop			; (mov r8, r8)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2190      	movs	r1, #144	; 0x90
 800698e:	0049      	lsls	r1, r1, #1
 8006990:	430a      	orrs	r2, r1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	f383 8810 	msr	PRIMASK, r3
}
 800699e:	e018      	b.n	80069d2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	613b      	str	r3, [r7, #16]
  return(result);
 80069a6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069a8:	653b      	str	r3, [r7, #80]	; 0x50
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f383 8810 	msr	PRIMASK, r3
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2120      	movs	r1, #32
 80069c2:	430a      	orrs	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	0018      	movs	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b018      	add	sp, #96	; 0x60
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	000001ff 	.word	0x000001ff
 80069e0:	080074dd 	.word	0x080074dd
 80069e4:	080071f1 	.word	0x080071f1
 80069e8:	0800707d 	.word	0x0800707d
 80069ec:	08006f09 	.word	0x08006f09

080069f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b090      	sub	sp, #64	; 0x40
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	1dbb      	adds	r3, r7, #6
 80069fc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	1dba      	adds	r2, r7, #6
 8006a08:	215c      	movs	r1, #92	; 0x5c
 8006a0a:	8812      	ldrh	r2, [r2, #0]
 8006a0c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2290      	movs	r2, #144	; 0x90
 8006a12:	2100      	movs	r1, #0
 8006a14:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	228c      	movs	r2, #140	; 0x8c
 8006a1a:	2122      	movs	r1, #34	; 0x22
 8006a1c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2280      	movs	r2, #128	; 0x80
 8006a22:	589b      	ldr	r3, [r3, r2]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02d      	beq.n	8006a84 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2280      	movs	r2, #128	; 0x80
 8006a2c:	589b      	ldr	r3, [r3, r2]
 8006a2e:	4a40      	ldr	r2, [pc, #256]	; (8006b30 <UART_Start_Receive_DMA+0x140>)
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2280      	movs	r2, #128	; 0x80
 8006a36:	589b      	ldr	r3, [r3, r2]
 8006a38:	4a3e      	ldr	r2, [pc, #248]	; (8006b34 <UART_Start_Receive_DMA+0x144>)
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2280      	movs	r2, #128	; 0x80
 8006a40:	589b      	ldr	r3, [r3, r2]
 8006a42:	4a3d      	ldr	r2, [pc, #244]	; (8006b38 <UART_Start_Receive_DMA+0x148>)
 8006a44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2280      	movs	r2, #128	; 0x80
 8006a4a:	589b      	ldr	r3, [r3, r2]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2280      	movs	r2, #128	; 0x80
 8006a54:	5898      	ldr	r0, [r3, r2]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3324      	adds	r3, #36	; 0x24
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a62:	001a      	movs	r2, r3
 8006a64:	1dbb      	adds	r3, r7, #6
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	f7fb ff0e 	bl	8002888 <HAL_DMA_Start_IT>
 8006a6c:	1e03      	subs	r3, r0, #0
 8006a6e:	d009      	beq.n	8006a84 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2290      	movs	r2, #144	; 0x90
 8006a74:	2110      	movs	r1, #16
 8006a76:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	228c      	movs	r2, #140	; 0x8c
 8006a7c:	2120      	movs	r1, #32
 8006a7e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e050      	b.n	8006b26 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d019      	beq.n	8006ac0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a96:	2301      	movs	r3, #1
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	f383 8810 	msr	PRIMASK, r3
}
 8006aa0:	46c0      	nop			; (mov r8, r8)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	0049      	lsls	r1, r1, #1
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	f383 8810 	msr	PRIMASK, r3
}
 8006abe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ac6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aca:	2301      	movs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f383 8810 	msr	PRIMASK, r3
}
 8006ad4:	46c0      	nop			; (mov r8, r8)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	609a      	str	r2, [r3, #8]
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f383 8810 	msr	PRIMASK, r3
}
 8006af0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af2:	f3ef 8310 	mrs	r3, PRIMASK
 8006af6:	61fb      	str	r3, [r7, #28]
  return(result);
 8006af8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
 8006afc:	2301      	movs	r3, #1
 8006afe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	f383 8810 	msr	PRIMASK, r3
}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2140      	movs	r1, #64	; 0x40
 8006b14:	430a      	orrs	r2, r1
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	f383 8810 	msr	PRIMASK, r3
}
 8006b22:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b010      	add	sp, #64	; 0x40
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	08006c89 	.word	0x08006c89
 8006b34:	08006db9 	.word	0x08006db9
 8006b38:	08006dfb 	.word	0x08006dfb

08006b3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b44:	f3ef 8310 	mrs	r3, PRIMASK
 8006b48:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4e:	2301      	movs	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f383 8810 	msr	PRIMASK, r3
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	21c0      	movs	r1, #192	; 0xc0
 8006b66:	438a      	bics	r2, r1
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f383 8810 	msr	PRIMASK, r3
}
 8006b74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b76:	f3ef 8310 	mrs	r3, PRIMASK
 8006b7a:	617b      	str	r3, [r7, #20]
  return(result);
 8006b7c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	2301      	movs	r3, #1
 8006b82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f383 8810 	msr	PRIMASK, r3
}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4908      	ldr	r1, [pc, #32]	; (8006bb8 <UART_EndTxTransfer+0x7c>)
 8006b98:	400a      	ands	r2, r1
 8006b9a:	609a      	str	r2, [r3, #8]
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f383 8810 	msr	PRIMASK, r3
}
 8006ba6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2288      	movs	r2, #136	; 0x88
 8006bac:	2120      	movs	r1, #32
 8006bae:	5099      	str	r1, [r3, r2]
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b00a      	add	sp, #40	; 0x28
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	ff7fffff 	.word	0xff7fffff

08006bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08e      	sub	sp, #56	; 0x38
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc8:	617b      	str	r3, [r7, #20]
  return(result);
 8006bca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bce:	2301      	movs	r3, #1
 8006bd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	f383 8810 	msr	PRIMASK, r3
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4926      	ldr	r1, [pc, #152]	; (8006c80 <UART_EndRxTransfer+0xc4>)
 8006be6:	400a      	ands	r2, r1
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f383 8810 	msr	PRIMASK, r3
}
 8006bf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bfa:	623b      	str	r3, [r7, #32]
  return(result);
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8006c00:	2301      	movs	r3, #1
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	f383 8810 	msr	PRIMASK, r3
}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	491b      	ldr	r1, [pc, #108]	; (8006c84 <UART_EndRxTransfer+0xc8>)
 8006c18:	400a      	ands	r2, r1
 8006c1a:	609a      	str	r2, [r3, #8]
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	f383 8810 	msr	PRIMASK, r3
}
 8006c26:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d118      	bne.n	8006c62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c30:	f3ef 8310 	mrs	r3, PRIMASK
 8006c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f383 8810 	msr	PRIMASK, r3
}
 8006c44:	46c0      	nop			; (mov r8, r8)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2110      	movs	r1, #16
 8006c52:	438a      	bics	r2, r1
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f383 8810 	msr	PRIMASK, r3
}
 8006c60:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	228c      	movs	r2, #140	; 0x8c
 8006c66:	2120      	movs	r1, #32
 8006c68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b00e      	add	sp, #56	; 0x38
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	fffffedf 	.word	0xfffffedf
 8006c84:	effffffe 	.word	0xeffffffe

08006c88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b094      	sub	sp, #80	; 0x50
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d16f      	bne.n	8006d82 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca4:	225e      	movs	r2, #94	; 0x5e
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006caa:	f3ef 8310 	mrs	r3, PRIMASK
 8006cae:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cb0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f383 8810 	msr	PRIMASK, r3
}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	493a      	ldr	r1, [pc, #232]	; (8006db4 <UART_DMAReceiveCplt+0x12c>)
 8006ccc:	400a      	ands	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	f383 8810 	msr	PRIMASK, r3
}
 8006cda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	f383 8810 	msr	PRIMASK, r3
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	438a      	bics	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]
 8006d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	f383 8810 	msr	PRIMASK, r3
}
 8006d0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d16:	643b      	str	r3, [r7, #64]	; 0x40
 8006d18:	2301      	movs	r3, #1
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	f383 8810 	msr	PRIMASK, r3
}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2140      	movs	r1, #64	; 0x40
 8006d30:	438a      	bics	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]
 8006d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	f383 8810 	msr	PRIMASK, r3
}
 8006d3e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d42:	228c      	movs	r2, #140	; 0x8c
 8006d44:	2120      	movs	r1, #32
 8006d46:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d118      	bne.n	8006d82 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d50:	f3ef 8310 	mrs	r3, PRIMASK
 8006d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d56:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f383 8810 	msr	PRIMASK, r3
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2110      	movs	r1, #16
 8006d72:	438a      	bics	r2, r1
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f383 8810 	msr	PRIMASK, r3
}
 8006d80:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d84:	2200      	movs	r2, #0
 8006d86:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d108      	bne.n	8006da2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d92:	225c      	movs	r2, #92	; 0x5c
 8006d94:	5a9a      	ldrh	r2, [r3, r2]
 8006d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7ff f870 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006da0:	e003      	b.n	8006daa <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da4:	0018      	movs	r0, r3
 8006da6:	f7fa fab1 	bl	800130c <HAL_UART_RxCpltCallback>
}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b014      	add	sp, #80	; 0x50
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	fffffeff 	.word	0xfffffeff

08006db8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d10a      	bne.n	8006dea <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	225c      	movs	r2, #92	; 0x5c
 8006dd8:	5a9b      	ldrh	r3, [r3, r2]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	0011      	movs	r1, r2
 8006de2:	0018      	movs	r0, r3
 8006de4:	f7ff f84c 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006de8:	e003      	b.n	8006df2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f7ff f837 	bl	8005e60 <HAL_UART_RxHalfCpltCallback>
}
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b004      	add	sp, #16
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2288      	movs	r2, #136	; 0x88
 8006e0c:	589b      	ldr	r3, [r3, r2]
 8006e0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	228c      	movs	r2, #140	; 0x8c
 8006e14:	589b      	ldr	r3, [r3, r2]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b80      	cmp	r3, #128	; 0x80
 8006e24:	d10a      	bne.n	8006e3c <UART_DMAError+0x42>
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b21      	cmp	r3, #33	; 0x21
 8006e2a:	d107      	bne.n	8006e3c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2256      	movs	r2, #86	; 0x56
 8006e30:	2100      	movs	r1, #0
 8006e32:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7ff fe80 	bl	8006b3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2240      	movs	r2, #64	; 0x40
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d10a      	bne.n	8006e60 <UART_DMAError+0x66>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b22      	cmp	r3, #34	; 0x22
 8006e4e:	d107      	bne.n	8006e60 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	225e      	movs	r2, #94	; 0x5e
 8006e54:	2100      	movs	r1, #0
 8006e56:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7ff feae 	bl	8006bbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2290      	movs	r2, #144	; 0x90
 8006e64:	589b      	ldr	r3, [r3, r2]
 8006e66:	2210      	movs	r2, #16
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2190      	movs	r1, #144	; 0x90
 8006e6e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7fe fffc 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b006      	add	sp, #24
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	225e      	movs	r2, #94	; 0x5e
 8006e92:	2100      	movs	r1, #0
 8006e94:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2256      	movs	r2, #86	; 0x56
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7fe ffe5 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b004      	add	sp, #16
 8006eac:	bd80      	pop	{r7, pc}

08006eae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eba:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f383 8810 	msr	PRIMASK, r3
}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2140      	movs	r1, #64	; 0x40
 8006ed8:	438a      	bics	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f383 8810 	msr	PRIMASK, r3
}
 8006ee6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2288      	movs	r2, #136	; 0x88
 8006eec:	2120      	movs	r1, #32
 8006eee:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f7fe ffa9 	bl	8005e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b006      	add	sp, #24
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b090      	sub	sp, #64	; 0x40
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f10:	203e      	movs	r0, #62	; 0x3e
 8006f12:	183b      	adds	r3, r7, r0
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	2160      	movs	r1, #96	; 0x60
 8006f18:	5a52      	ldrh	r2, [r2, r1]
 8006f1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	228c      	movs	r2, #140	; 0x8c
 8006f20:	589b      	ldr	r3, [r3, r2]
 8006f22:	2b22      	cmp	r3, #34	; 0x22
 8006f24:	d000      	beq.n	8006f28 <UART_RxISR_8BIT+0x20>
 8006f26:	e09a      	b.n	800705e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f2e:	213c      	movs	r1, #60	; 0x3c
 8006f30:	187b      	adds	r3, r7, r1
 8006f32:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f34:	187b      	adds	r3, r7, r1
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	183b      	adds	r3, r7, r0
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b2d9      	uxtb	r1, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f44:	400a      	ands	r2, r1
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	225e      	movs	r2, #94	; 0x5e
 8006f58:	5a9b      	ldrh	r3, [r3, r2]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b299      	uxth	r1, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	225e      	movs	r2, #94	; 0x5e
 8006f64:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	225e      	movs	r2, #94	; 0x5e
 8006f6a:	5a9b      	ldrh	r3, [r3, r2]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d000      	beq.n	8006f74 <UART_RxISR_8BIT+0x6c>
 8006f72:	e07c      	b.n	800706e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f74:	f3ef 8310 	mrs	r3, PRIMASK
 8006f78:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f7e:	2301      	movs	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f383 8810 	msr	PRIMASK, r3
}
 8006f88:	46c0      	nop			; (mov r8, r8)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4938      	ldr	r1, [pc, #224]	; (8007078 <UART_RxISR_8BIT+0x170>)
 8006f96:	400a      	ands	r2, r1
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	f383 8810 	msr	PRIMASK, r3
}
 8006fa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	f383 8810 	msr	PRIMASK, r3
}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	438a      	bics	r2, r1
 8006fca:	609a      	str	r2, [r3, #8]
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	f383 8810 	msr	PRIMASK, r3
}
 8006fd6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	228c      	movs	r2, #140	; 0x8c
 8006fdc:	2120      	movs	r1, #32
 8006fde:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d12f      	bne.n	8007054 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8006ffe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007000:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007002:	633b      	str	r3, [r7, #48]	; 0x30
 8007004:	2301      	movs	r3, #1
 8007006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f383 8810 	msr	PRIMASK, r3
}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2110      	movs	r1, #16
 800701c:	438a      	bics	r2, r1
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f383 8810 	msr	PRIMASK, r3
}
 800702a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	2210      	movs	r2, #16
 8007034:	4013      	ands	r3, r2
 8007036:	2b10      	cmp	r3, #16
 8007038:	d103      	bne.n	8007042 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2210      	movs	r2, #16
 8007040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	225c      	movs	r2, #92	; 0x5c
 8007046:	5a9a      	ldrh	r2, [r3, r2]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	0011      	movs	r1, r2
 800704c:	0018      	movs	r0, r3
 800704e:	f7fe ff17 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007052:	e00c      	b.n	800706e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	0018      	movs	r0, r3
 8007058:	f7fa f958 	bl	800130c <HAL_UART_RxCpltCallback>
}
 800705c:	e007      	b.n	800706e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2108      	movs	r1, #8
 800706a:	430a      	orrs	r2, r1
 800706c:	619a      	str	r2, [r3, #24]
}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	46bd      	mov	sp, r7
 8007072:	b010      	add	sp, #64	; 0x40
 8007074:	bd80      	pop	{r7, pc}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	fffffedf 	.word	0xfffffedf

0800707c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b090      	sub	sp, #64	; 0x40
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007084:	203e      	movs	r0, #62	; 0x3e
 8007086:	183b      	adds	r3, r7, r0
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	2160      	movs	r1, #96	; 0x60
 800708c:	5a52      	ldrh	r2, [r2, r1]
 800708e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	228c      	movs	r2, #140	; 0x8c
 8007094:	589b      	ldr	r3, [r3, r2]
 8007096:	2b22      	cmp	r3, #34	; 0x22
 8007098:	d000      	beq.n	800709c <UART_RxISR_16BIT+0x20>
 800709a:	e09a      	b.n	80071d2 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070a2:	213c      	movs	r1, #60	; 0x3c
 80070a4:	187b      	adds	r3, r7, r1
 80070a6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80070ae:	187b      	adds	r3, r7, r1
 80070b0:	183a      	adds	r2, r7, r0
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	8812      	ldrh	r2, [r2, #0]
 80070b6:	4013      	ands	r3, r2
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c2:	1c9a      	adds	r2, r3, #2
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	225e      	movs	r2, #94	; 0x5e
 80070cc:	5a9b      	ldrh	r3, [r3, r2]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b299      	uxth	r1, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	225e      	movs	r2, #94	; 0x5e
 80070d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	225e      	movs	r2, #94	; 0x5e
 80070de:	5a9b      	ldrh	r3, [r3, r2]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d000      	beq.n	80070e8 <UART_RxISR_16BIT+0x6c>
 80070e6:	e07c      	b.n	80071e2 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ec:	617b      	str	r3, [r7, #20]
  return(result);
 80070ee:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
 80070f2:	2301      	movs	r3, #1
 80070f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	f383 8810 	msr	PRIMASK, r3
}
 80070fc:	46c0      	nop			; (mov r8, r8)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4938      	ldr	r1, [pc, #224]	; (80071ec <UART_RxISR_16BIT+0x170>)
 800710a:	400a      	ands	r2, r1
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007110:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f383 8810 	msr	PRIMASK, r3
}
 8007118:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800711a:	f3ef 8310 	mrs	r3, PRIMASK
 800711e:	623b      	str	r3, [r7, #32]
  return(result);
 8007120:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
 8007124:	2301      	movs	r3, #1
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	f383 8810 	msr	PRIMASK, r3
}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2101      	movs	r1, #1
 800713c:	438a      	bics	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	f383 8810 	msr	PRIMASK, r3
}
 800714a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	228c      	movs	r2, #140	; 0x8c
 8007150:	2120      	movs	r1, #32
 8007152:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d12f      	bne.n	80071c8 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716e:	f3ef 8310 	mrs	r3, PRIMASK
 8007172:	60bb      	str	r3, [r7, #8]
  return(result);
 8007174:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007178:	2301      	movs	r3, #1
 800717a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f383 8810 	msr	PRIMASK, r3
}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2110      	movs	r1, #16
 8007190:	438a      	bics	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f383 8810 	msr	PRIMASK, r3
}
 800719e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	2210      	movs	r2, #16
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d103      	bne.n	80071b6 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2210      	movs	r2, #16
 80071b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	225c      	movs	r2, #92	; 0x5c
 80071ba:	5a9a      	ldrh	r2, [r3, r2]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	0011      	movs	r1, r2
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7fe fe5d 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071c6:	e00c      	b.n	80071e2 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	0018      	movs	r0, r3
 80071cc:	f7fa f89e 	bl	800130c <HAL_UART_RxCpltCallback>
}
 80071d0:	e007      	b.n	80071e2 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2108      	movs	r1, #8
 80071de:	430a      	orrs	r2, r1
 80071e0:	619a      	str	r2, [r3, #24]
}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b010      	add	sp, #64	; 0x40
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	fffffedf 	.word	0xfffffedf

080071f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b09c      	sub	sp, #112	; 0x70
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80071f8:	236a      	movs	r3, #106	; 0x6a
 80071fa:	18fb      	adds	r3, r7, r3
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	2160      	movs	r1, #96	; 0x60
 8007200:	5a52      	ldrh	r2, [r2, r1]
 8007202:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	228c      	movs	r2, #140	; 0x8c
 8007220:	589b      	ldr	r3, [r3, r2]
 8007222:	2b22      	cmp	r3, #34	; 0x22
 8007224:	d000      	beq.n	8007228 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007226:	e144      	b.n	80074b2 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007228:	235e      	movs	r3, #94	; 0x5e
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	2168      	movs	r1, #104	; 0x68
 8007230:	5a52      	ldrh	r2, [r2, r1]
 8007232:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007234:	e0eb      	b.n	800740e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800723c:	215c      	movs	r1, #92	; 0x5c
 800723e:	187b      	adds	r3, r7, r1
 8007240:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007242:	187b      	adds	r3, r7, r1
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b2da      	uxtb	r2, r3
 8007248:	236a      	movs	r3, #106	; 0x6a
 800724a:	18fb      	adds	r3, r7, r3
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b2d9      	uxtb	r1, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007254:	400a      	ands	r2, r1
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	225e      	movs	r2, #94	; 0x5e
 8007268:	5a9b      	ldrh	r3, [r3, r2]
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b299      	uxth	r1, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	225e      	movs	r2, #94	; 0x5e
 8007274:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800727e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007280:	2207      	movs	r2, #7
 8007282:	4013      	ands	r3, r2
 8007284:	d049      	beq.n	800731a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007288:	2201      	movs	r2, #1
 800728a:	4013      	ands	r3, r2
 800728c:	d010      	beq.n	80072b0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800728e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4013      	ands	r3, r2
 8007296:	d00b      	beq.n	80072b0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2201      	movs	r2, #1
 800729e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2290      	movs	r2, #144	; 0x90
 80072a4:	589b      	ldr	r3, [r3, r2]
 80072a6:	2201      	movs	r2, #1
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2190      	movs	r1, #144	; 0x90
 80072ae:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b2:	2202      	movs	r2, #2
 80072b4:	4013      	ands	r3, r2
 80072b6:	d00f      	beq.n	80072d8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80072b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ba:	2201      	movs	r2, #1
 80072bc:	4013      	ands	r3, r2
 80072be:	d00b      	beq.n	80072d8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2202      	movs	r2, #2
 80072c6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2290      	movs	r2, #144	; 0x90
 80072cc:	589b      	ldr	r3, [r3, r2]
 80072ce:	2204      	movs	r2, #4
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2190      	movs	r1, #144	; 0x90
 80072d6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072da:	2204      	movs	r2, #4
 80072dc:	4013      	ands	r3, r2
 80072de:	d00f      	beq.n	8007300 <UART_RxISR_8BIT_FIFOEN+0x110>
 80072e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e2:	2201      	movs	r2, #1
 80072e4:	4013      	ands	r3, r2
 80072e6:	d00b      	beq.n	8007300 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2204      	movs	r2, #4
 80072ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2290      	movs	r2, #144	; 0x90
 80072f4:	589b      	ldr	r3, [r3, r2]
 80072f6:	2202      	movs	r2, #2
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2190      	movs	r1, #144	; 0x90
 80072fe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2290      	movs	r2, #144	; 0x90
 8007304:	589b      	ldr	r3, [r3, r2]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	0018      	movs	r0, r3
 800730e:	f7fe fdaf 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2290      	movs	r2, #144	; 0x90
 8007316:	2100      	movs	r1, #0
 8007318:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	225e      	movs	r2, #94	; 0x5e
 800731e:	5a9b      	ldrh	r3, [r3, r2]
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d173      	bne.n	800740e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007326:	f3ef 8310 	mrs	r3, PRIMASK
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800732e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007330:	2301      	movs	r3, #1
 8007332:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	f383 8810 	msr	PRIMASK, r3
}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4961      	ldr	r1, [pc, #388]	; (80074cc <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007348:	400a      	ands	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800734e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007358:	f3ef 8310 	mrs	r3, PRIMASK
 800735c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007360:	657b      	str	r3, [r7, #84]	; 0x54
 8007362:	2301      	movs	r3, #1
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007368:	f383 8810 	msr	PRIMASK, r3
}
 800736c:	46c0      	nop			; (mov r8, r8)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4955      	ldr	r1, [pc, #340]	; (80074d0 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800737a:	400a      	ands	r2, r1
 800737c:	609a      	str	r2, [r3, #8]
 800737e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007380:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007384:	f383 8810 	msr	PRIMASK, r3
}
 8007388:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	228c      	movs	r2, #140	; 0x8c
 800738e:	2120      	movs	r1, #32
 8007390:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d12f      	bne.n	8007406 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ac:	f3ef 8310 	mrs	r3, PRIMASK
 80073b0:	623b      	str	r3, [r7, #32]
  return(result);
 80073b2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b4:	653b      	str	r3, [r7, #80]	; 0x50
 80073b6:	2301      	movs	r3, #1
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	f383 8810 	msr	PRIMASK, r3
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2110      	movs	r1, #16
 80073ce:	438a      	bics	r2, r1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	f383 8810 	msr	PRIMASK, r3
}
 80073dc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	2210      	movs	r2, #16
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d103      	bne.n	80073f4 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2210      	movs	r2, #16
 80073f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	225c      	movs	r2, #92	; 0x5c
 80073f8:	5a9a      	ldrh	r2, [r3, r2]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	0011      	movs	r1, r2
 80073fe:	0018      	movs	r0, r3
 8007400:	f7fe fd3e 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
 8007404:	e003      	b.n	800740e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0018      	movs	r0, r3
 800740a:	f7f9 ff7f 	bl	800130c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800740e:	235e      	movs	r3, #94	; 0x5e
 8007410:	18fb      	adds	r3, r7, r3
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741a:	2220      	movs	r2, #32
 800741c:	4013      	ands	r3, r2
 800741e:	d000      	beq.n	8007422 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007420:	e709      	b.n	8007236 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007422:	204e      	movs	r0, #78	; 0x4e
 8007424:	183b      	adds	r3, r7, r0
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	215e      	movs	r1, #94	; 0x5e
 800742a:	5a52      	ldrh	r2, [r2, r1]
 800742c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800742e:	0001      	movs	r1, r0
 8007430:	187b      	adds	r3, r7, r1
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d044      	beq.n	80074c2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2268      	movs	r2, #104	; 0x68
 800743c:	5a9b      	ldrh	r3, [r3, r2]
 800743e:	187a      	adds	r2, r7, r1
 8007440:	8812      	ldrh	r2, [r2, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d23d      	bcs.n	80074c2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007446:	f3ef 8310 	mrs	r3, PRIMASK
 800744a:	60bb      	str	r3, [r7, #8]
  return(result);
 800744c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800744e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007450:	2301      	movs	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f383 8810 	msr	PRIMASK, r3
}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	491b      	ldr	r1, [pc, #108]	; (80074d4 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007468:	400a      	ands	r2, r1
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f383 8810 	msr	PRIMASK, r3
}
 8007476:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800747c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800747e:	f3ef 8310 	mrs	r3, PRIMASK
 8007482:	617b      	str	r3, [r7, #20]
  return(result);
 8007484:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007486:	647b      	str	r3, [r7, #68]	; 0x44
 8007488:	2301      	movs	r3, #1
 800748a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	f383 8810 	msr	PRIMASK, r3
}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2120      	movs	r1, #32
 80074a0:	430a      	orrs	r2, r1
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f383 8810 	msr	PRIMASK, r3
}
 80074ae:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074b0:	e007      	b.n	80074c2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2108      	movs	r1, #8
 80074be:	430a      	orrs	r2, r1
 80074c0:	619a      	str	r2, [r3, #24]
}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	46bd      	mov	sp, r7
 80074c6:	b01c      	add	sp, #112	; 0x70
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	46c0      	nop			; (mov r8, r8)
 80074cc:	fffffeff 	.word	0xfffffeff
 80074d0:	effffffe 	.word	0xeffffffe
 80074d4:	efffffff 	.word	0xefffffff
 80074d8:	08006f09 	.word	0x08006f09

080074dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b09e      	sub	sp, #120	; 0x78
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80074e4:	2372      	movs	r3, #114	; 0x72
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	2160      	movs	r1, #96	; 0x60
 80074ec:	5a52      	ldrh	r2, [r2, r1]
 80074ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	228c      	movs	r2, #140	; 0x8c
 800750c:	589b      	ldr	r3, [r3, r2]
 800750e:	2b22      	cmp	r3, #34	; 0x22
 8007510:	d000      	beq.n	8007514 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007512:	e144      	b.n	800779e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007514:	2366      	movs	r3, #102	; 0x66
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	2168      	movs	r1, #104	; 0x68
 800751c:	5a52      	ldrh	r2, [r2, r1]
 800751e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007520:	e0eb      	b.n	80076fa <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007528:	2164      	movs	r1, #100	; 0x64
 800752a:	187b      	adds	r3, r7, r1
 800752c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007532:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007534:	187b      	adds	r3, r7, r1
 8007536:	2272      	movs	r2, #114	; 0x72
 8007538:	18ba      	adds	r2, r7, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	8812      	ldrh	r2, [r2, #0]
 800753e:	4013      	ands	r3, r2
 8007540:	b29a      	uxth	r2, r3
 8007542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007544:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754a:	1c9a      	adds	r2, r3, #2
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	225e      	movs	r2, #94	; 0x5e
 8007554:	5a9b      	ldrh	r3, [r3, r2]
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b299      	uxth	r1, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	225e      	movs	r2, #94	; 0x5e
 8007560:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800756a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800756c:	2207      	movs	r2, #7
 800756e:	4013      	ands	r3, r2
 8007570:	d049      	beq.n	8007606 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007574:	2201      	movs	r2, #1
 8007576:	4013      	ands	r3, r2
 8007578:	d010      	beq.n	800759c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800757a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4013      	ands	r3, r2
 8007582:	d00b      	beq.n	800759c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2201      	movs	r2, #1
 800758a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2290      	movs	r2, #144	; 0x90
 8007590:	589b      	ldr	r3, [r3, r2]
 8007592:	2201      	movs	r2, #1
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2190      	movs	r1, #144	; 0x90
 800759a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800759c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800759e:	2202      	movs	r2, #2
 80075a0:	4013      	ands	r3, r2
 80075a2:	d00f      	beq.n	80075c4 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80075a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075a6:	2201      	movs	r2, #1
 80075a8:	4013      	ands	r3, r2
 80075aa:	d00b      	beq.n	80075c4 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2202      	movs	r2, #2
 80075b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2290      	movs	r2, #144	; 0x90
 80075b8:	589b      	ldr	r3, [r3, r2]
 80075ba:	2204      	movs	r2, #4
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2190      	movs	r1, #144	; 0x90
 80075c2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075c6:	2204      	movs	r2, #4
 80075c8:	4013      	ands	r3, r2
 80075ca:	d00f      	beq.n	80075ec <UART_RxISR_16BIT_FIFOEN+0x110>
 80075cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075ce:	2201      	movs	r2, #1
 80075d0:	4013      	ands	r3, r2
 80075d2:	d00b      	beq.n	80075ec <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2204      	movs	r2, #4
 80075da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2290      	movs	r2, #144	; 0x90
 80075e0:	589b      	ldr	r3, [r3, r2]
 80075e2:	2202      	movs	r2, #2
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2190      	movs	r1, #144	; 0x90
 80075ea:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2290      	movs	r2, #144	; 0x90
 80075f0:	589b      	ldr	r3, [r3, r2]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0018      	movs	r0, r3
 80075fa:	f7fe fc39 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2290      	movs	r2, #144	; 0x90
 8007602:	2100      	movs	r1, #0
 8007604:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	225e      	movs	r2, #94	; 0x5e
 800760a:	5a9b      	ldrh	r3, [r3, r2]
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d173      	bne.n	80076fa <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007612:	f3ef 8310 	mrs	r3, PRIMASK
 8007616:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800761c:	2301      	movs	r3, #1
 800761e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	f383 8810 	msr	PRIMASK, r3
}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4961      	ldr	r1, [pc, #388]	; (80077b8 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007634:	400a      	ands	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	f383 8810 	msr	PRIMASK, r3
}
 8007642:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007644:	f3ef 8310 	mrs	r3, PRIMASK
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800764a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800764c:	65bb      	str	r3, [r7, #88]	; 0x58
 800764e:	2301      	movs	r3, #1
 8007650:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007654:	f383 8810 	msr	PRIMASK, r3
}
 8007658:	46c0      	nop			; (mov r8, r8)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4955      	ldr	r1, [pc, #340]	; (80077bc <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8007666:	400a      	ands	r2, r1
 8007668:	609a      	str	r2, [r3, #8]
 800766a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800766c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007670:	f383 8810 	msr	PRIMASK, r3
}
 8007674:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	228c      	movs	r2, #140	; 0x8c
 800767a:	2120      	movs	r1, #32
 800767c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d12f      	bne.n	80076f2 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007698:	f3ef 8310 	mrs	r3, PRIMASK
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a0:	657b      	str	r3, [r7, #84]	; 0x54
 80076a2:	2301      	movs	r3, #1
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	f383 8810 	msr	PRIMASK, r3
}
 80076ac:	46c0      	nop			; (mov r8, r8)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2110      	movs	r1, #16
 80076ba:	438a      	bics	r2, r1
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	f383 8810 	msr	PRIMASK, r3
}
 80076c8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2210      	movs	r2, #16
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d103      	bne.n	80076e0 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2210      	movs	r2, #16
 80076de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	225c      	movs	r2, #92	; 0x5c
 80076e4:	5a9a      	ldrh	r2, [r3, r2]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	0011      	movs	r1, r2
 80076ea:	0018      	movs	r0, r3
 80076ec:	f7fe fbc8 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
 80076f0:	e003      	b.n	80076fa <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f7f9 fe09 	bl	800130c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076fa:	2366      	movs	r3, #102	; 0x66
 80076fc:	18fb      	adds	r3, r7, r3
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <UART_RxISR_16BIT_FIFOEN+0x232>
 8007704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007706:	2220      	movs	r2, #32
 8007708:	4013      	ands	r3, r2
 800770a:	d000      	beq.n	800770e <UART_RxISR_16BIT_FIFOEN+0x232>
 800770c:	e709      	b.n	8007522 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800770e:	2052      	movs	r0, #82	; 0x52
 8007710:	183b      	adds	r3, r7, r0
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	215e      	movs	r1, #94	; 0x5e
 8007716:	5a52      	ldrh	r2, [r2, r1]
 8007718:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800771a:	0001      	movs	r1, r0
 800771c:	187b      	adds	r3, r7, r1
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d044      	beq.n	80077ae <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2268      	movs	r2, #104	; 0x68
 8007728:	5a9b      	ldrh	r3, [r3, r2]
 800772a:	187a      	adds	r2, r7, r1
 800772c:	8812      	ldrh	r2, [r2, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d23d      	bcs.n	80077ae <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007732:	f3ef 8310 	mrs	r3, PRIMASK
 8007736:	60fb      	str	r3, [r7, #12]
  return(result);
 8007738:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773c:	2301      	movs	r3, #1
 800773e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f383 8810 	msr	PRIMASK, r3
}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	491b      	ldr	r1, [pc, #108]	; (80077c0 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8007754:	400a      	ands	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f383 8810 	msr	PRIMASK, r3
}
 8007762:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8007768:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800776a:	f3ef 8310 	mrs	r3, PRIMASK
 800776e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007770:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007772:	64bb      	str	r3, [r7, #72]	; 0x48
 8007774:	2301      	movs	r3, #1
 8007776:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	f383 8810 	msr	PRIMASK, r3
}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2120      	movs	r1, #32
 800778c:	430a      	orrs	r2, r1
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007792:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800779c:	e007      	b.n	80077ae <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2108      	movs	r1, #8
 80077aa:	430a      	orrs	r2, r1
 80077ac:	619a      	str	r2, [r3, #24]
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b01e      	add	sp, #120	; 0x78
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	fffffeff 	.word	0xfffffeff
 80077bc:	effffffe 	.word	0xeffffffe
 80077c0:	efffffff 	.word	0xefffffff
 80077c4:	0800707d 	.word	0x0800707d

080077c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077d0:	46c0      	nop			; (mov r8, r8)
 80077d2:	46bd      	mov	sp, r7
 80077d4:	b002      	add	sp, #8
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b002      	add	sp, #8
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80077f0:	46c0      	nop			; (mov r8, r8)
 80077f2:	46bd      	mov	sp, r7
 80077f4:	b002      	add	sp, #8
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2284      	movs	r2, #132	; 0x84
 8007804:	5c9b      	ldrb	r3, [r3, r2]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_UARTEx_DisableFifoMode+0x16>
 800780a:	2302      	movs	r3, #2
 800780c:	e027      	b.n	800785e <HAL_UARTEx_DisableFifoMode+0x66>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2284      	movs	r2, #132	; 0x84
 8007812:	2101      	movs	r1, #1
 8007814:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2288      	movs	r2, #136	; 0x88
 800781a:	2124      	movs	r1, #36	; 0x24
 800781c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2101      	movs	r1, #1
 8007832:	438a      	bics	r2, r1
 8007834:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4a0b      	ldr	r2, [pc, #44]	; (8007868 <HAL_UARTEx_DisableFifoMode+0x70>)
 800783a:	4013      	ands	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2288      	movs	r2, #136	; 0x88
 8007850:	2120      	movs	r1, #32
 8007852:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2284      	movs	r2, #132	; 0x84
 8007858:	2100      	movs	r1, #0
 800785a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	0018      	movs	r0, r3
 8007860:	46bd      	mov	sp, r7
 8007862:	b004      	add	sp, #16
 8007864:	bd80      	pop	{r7, pc}
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	dfffffff 	.word	0xdfffffff

0800786c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2284      	movs	r2, #132	; 0x84
 800787a:	5c9b      	ldrb	r3, [r3, r2]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007880:	2302      	movs	r3, #2
 8007882:	e02e      	b.n	80078e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2284      	movs	r2, #132	; 0x84
 8007888:	2101      	movs	r1, #1
 800788a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2288      	movs	r2, #136	; 0x88
 8007890:	2124      	movs	r1, #36	; 0x24
 8007892:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2101      	movs	r1, #1
 80078a8:	438a      	bics	r2, r1
 80078aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	08d9      	lsrs	r1, r3, #3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 f854 	bl	8007970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2288      	movs	r2, #136	; 0x88
 80078d4:	2120      	movs	r1, #32
 80078d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2284      	movs	r2, #132	; 0x84
 80078dc:	2100      	movs	r1, #0
 80078de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	0018      	movs	r0, r3
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b004      	add	sp, #16
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2284      	movs	r2, #132	; 0x84
 80078fa:	5c9b      	ldrb	r3, [r3, r2]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007900:	2302      	movs	r3, #2
 8007902:	e02f      	b.n	8007964 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2284      	movs	r2, #132	; 0x84
 8007908:	2101      	movs	r1, #1
 800790a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2288      	movs	r2, #136	; 0x88
 8007910:	2124      	movs	r1, #36	; 0x24
 8007912:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2101      	movs	r1, #1
 8007928:	438a      	bics	r2, r1
 800792a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	4a0e      	ldr	r2, [pc, #56]	; (800796c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007934:	4013      	ands	r3, r2
 8007936:	0019      	movs	r1, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	0018      	movs	r0, r3
 8007946:	f000 f813 	bl	8007970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2288      	movs	r2, #136	; 0x88
 8007956:	2120      	movs	r1, #32
 8007958:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2284      	movs	r2, #132	; 0x84
 800795e:	2100      	movs	r1, #0
 8007960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	0018      	movs	r0, r3
 8007966:	46bd      	mov	sp, r7
 8007968:	b004      	add	sp, #16
 800796a:	bd80      	pop	{r7, pc}
 800796c:	f1ffffff 	.word	0xf1ffffff

08007970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797c:	2b00      	cmp	r3, #0
 800797e:	d108      	bne.n	8007992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	226a      	movs	r2, #106	; 0x6a
 8007984:	2101      	movs	r1, #1
 8007986:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2268      	movs	r2, #104	; 0x68
 800798c:	2101      	movs	r1, #1
 800798e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007990:	e043      	b.n	8007a1a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007992:	260f      	movs	r6, #15
 8007994:	19bb      	adds	r3, r7, r6
 8007996:	2208      	movs	r2, #8
 8007998:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800799a:	200e      	movs	r0, #14
 800799c:	183b      	adds	r3, r7, r0
 800799e:	2208      	movs	r2, #8
 80079a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	0e5b      	lsrs	r3, r3, #25
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	240d      	movs	r4, #13
 80079ae:	193b      	adds	r3, r7, r4
 80079b0:	2107      	movs	r1, #7
 80079b2:	400a      	ands	r2, r1
 80079b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	0f5b      	lsrs	r3, r3, #29
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	250c      	movs	r5, #12
 80079c2:	197b      	adds	r3, r7, r5
 80079c4:	2107      	movs	r1, #7
 80079c6:	400a      	ands	r2, r1
 80079c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079ca:	183b      	adds	r3, r7, r0
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	197a      	adds	r2, r7, r5
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	4914      	ldr	r1, [pc, #80]	; (8007a24 <UARTEx_SetNbDataToProcess+0xb4>)
 80079d4:	5c8a      	ldrb	r2, [r1, r2]
 80079d6:	435a      	muls	r2, r3
 80079d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80079da:	197b      	adds	r3, r7, r5
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	4a12      	ldr	r2, [pc, #72]	; (8007a28 <UARTEx_SetNbDataToProcess+0xb8>)
 80079e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079e2:	0019      	movs	r1, r3
 80079e4:	f7f8 fc18 	bl	8000218 <__divsi3>
 80079e8:	0003      	movs	r3, r0
 80079ea:	b299      	uxth	r1, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	226a      	movs	r2, #106	; 0x6a
 80079f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079f2:	19bb      	adds	r3, r7, r6
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	193a      	adds	r2, r7, r4
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	490a      	ldr	r1, [pc, #40]	; (8007a24 <UARTEx_SetNbDataToProcess+0xb4>)
 80079fc:	5c8a      	ldrb	r2, [r1, r2]
 80079fe:	435a      	muls	r2, r3
 8007a00:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a02:	193b      	adds	r3, r7, r4
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a0a:	0019      	movs	r1, r3
 8007a0c:	f7f8 fc04 	bl	8000218 <__divsi3>
 8007a10:	0003      	movs	r3, r0
 8007a12:	b299      	uxth	r1, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2268      	movs	r2, #104	; 0x68
 8007a18:	5299      	strh	r1, [r3, r2]
}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	b005      	add	sp, #20
 8007a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	08007b68 	.word	0x08007b68
 8007a28:	08007b70 	.word	0x08007b70

08007a2c <__libc_init_array>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	2600      	movs	r6, #0
 8007a30:	4d0c      	ldr	r5, [pc, #48]	; (8007a64 <__libc_init_array+0x38>)
 8007a32:	4c0d      	ldr	r4, [pc, #52]	; (8007a68 <__libc_init_array+0x3c>)
 8007a34:	1b64      	subs	r4, r4, r5
 8007a36:	10a4      	asrs	r4, r4, #2
 8007a38:	42a6      	cmp	r6, r4
 8007a3a:	d109      	bne.n	8007a50 <__libc_init_array+0x24>
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	f000 f821 	bl	8007a84 <_init>
 8007a42:	4d0a      	ldr	r5, [pc, #40]	; (8007a6c <__libc_init_array+0x40>)
 8007a44:	4c0a      	ldr	r4, [pc, #40]	; (8007a70 <__libc_init_array+0x44>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	42a6      	cmp	r6, r4
 8007a4c:	d105      	bne.n	8007a5a <__libc_init_array+0x2e>
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	00b3      	lsls	r3, r6, #2
 8007a52:	58eb      	ldr	r3, [r5, r3]
 8007a54:	4798      	blx	r3
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7ee      	b.n	8007a38 <__libc_init_array+0xc>
 8007a5a:	00b3      	lsls	r3, r6, #2
 8007a5c:	58eb      	ldr	r3, [r5, r3]
 8007a5e:	4798      	blx	r3
 8007a60:	3601      	adds	r6, #1
 8007a62:	e7f2      	b.n	8007a4a <__libc_init_array+0x1e>
 8007a64:	08007b80 	.word	0x08007b80
 8007a68:	08007b80 	.word	0x08007b80
 8007a6c:	08007b80 	.word	0x08007b80
 8007a70:	08007b84 	.word	0x08007b84

08007a74 <memset>:
 8007a74:	0003      	movs	r3, r0
 8007a76:	1882      	adds	r2, r0, r2
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d100      	bne.n	8007a7e <memset+0xa>
 8007a7c:	4770      	bx	lr
 8007a7e:	7019      	strb	r1, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	e7f9      	b.n	8007a78 <memset+0x4>

08007a84 <_init>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	46c0      	nop			; (mov r8, r8)
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr

08007a90 <_fini>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a96:	bc08      	pop	{r3}
 8007a98:	469e      	mov	lr, r3
 8007a9a:	4770      	bx	lr
