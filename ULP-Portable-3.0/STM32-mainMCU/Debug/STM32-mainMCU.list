
STM32-mainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb58  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ce24  0800ce24  0000de24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ce7c  0800ce7c  0000de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800ce80  0800ce80  0000de80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000104  24000000  0800ce84  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ccc  24000104  0800cf88  0000e104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001dd0  0800cf88  0000edd0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a05c  00000000  00000000  0000e132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ede  00000000  00000000  0002818e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015c0  00000000  00000000  0002c070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001089  00000000  00000000  0002d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00005ea6  00000000  00000000  0002e6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f2e4  00000000  00000000  0003455f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00148cbe  00000000  00000000  00053843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0019c501  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000059b4  00000000  00000000  0019c544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  001a1ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000104 	.word	0x24000104
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800ce0c 	.word	0x0800ce0c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000108 	.word	0x24000108
 8000308:	0800ce0c 	.word	0x0800ce0c

0800030c <strip_startup_init>:

// strip counter which points to number diode, max 21
uint8_t strip_startup_counter = 0;

void strip_startup_init()
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	strip_startup_counter = 0;
 8000310:	4b03      	ldr	r3, [pc, #12]	@ (8000320 <strip_startup_init+0x14>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	24000120 	.word	0x24000120

08000324 <run_strip_startup_effect>:

// run and write effect to colour array and return 0 when startup end
uint8_t run_strip_startup_effect(uint8_t colour_array[][3], uint8_t strip_length)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]

	// first diode
	if (strip_startup_counter < strip_length)
 8000330:	4ba7      	ldr	r3, [pc, #668]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	78fa      	ldrb	r2, [r7, #3]
 8000336:	429a      	cmp	r2, r3
 8000338:	d944      	bls.n	80003c4 <run_strip_startup_effect+0xa0>
	{
		// blue
		colour_array[strip_startup_counter][0] = 29;
 800033a:	4ba5      	ldr	r3, [pc, #660]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	221d      	movs	r2, #29
 800034c:	701a      	strb	r2, [r3, #0]
		colour_array[strip_startup_counter][1] = 71;
 800034e:	4ba0      	ldr	r3, [pc, #640]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	4613      	mov	r3, r2
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	4413      	add	r3, r2
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	2247      	movs	r2, #71	@ 0x47
 8000360:	705a      	strb	r2, [r3, #1]
		colour_array[strip_startup_counter][2] = 196;
 8000362:	4b9b      	ldr	r3, [pc, #620]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	461a      	mov	r2, r3
 8000368:	4613      	mov	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	4413      	add	r3, r2
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	22c4      	movs	r2, #196	@ 0xc4
 8000374:	709a      	strb	r2, [r3, #2]

		//red
		colour_array[strip_length - strip_startup_counter - 1][0] = 196;
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	4a95      	ldr	r2, [pc, #596]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	1a9b      	subs	r3, r3, r2
 800037e:	461a      	mov	r2, r3
 8000380:	4613      	mov	r3, r2
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	4413      	add	r3, r2
 8000386:	3b03      	subs	r3, #3
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4413      	add	r3, r2
 800038c:	22c4      	movs	r2, #196	@ 0xc4
 800038e:	701a      	strb	r2, [r3, #0]
		colour_array[strip_length - strip_startup_counter - 1][1] = 29;
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	4a8f      	ldr	r2, [pc, #572]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000394:	7812      	ldrb	r2, [r2, #0]
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	461a      	mov	r2, r3
 800039a:	4613      	mov	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4413      	add	r3, r2
 80003a0:	3b03      	subs	r3, #3
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	221d      	movs	r2, #29
 80003a8:	705a      	strb	r2, [r3, #1]
		colour_array[strip_length - strip_startup_counter - 1][2] = 91;
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	4a88      	ldr	r2, [pc, #544]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80003ae:	7812      	ldrb	r2, [r2, #0]
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	461a      	mov	r2, r3
 80003b4:	4613      	mov	r3, r2
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	4413      	add	r3, r2
 80003ba:	3b03      	subs	r3, #3
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	225b      	movs	r2, #91	@ 0x5b
 80003c2:	709a      	strb	r2, [r3, #2]
	}

	// second diode
	if (strip_startup_counter - 1 >= 0 && strip_startup_counter - 1 < strip_length)
 80003c4:	4b82      	ldr	r3, [pc, #520]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d049      	beq.n	8000460 <run_strip_startup_effect+0x13c>
 80003cc:	4b80      	ldr	r3, [pc, #512]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	78fa      	ldrb	r2, [r7, #3]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d344      	bcc.n	8000460 <run_strip_startup_effect+0x13c>
	{
		// blue
		colour_array[strip_startup_counter - 1][0] = 14;
 80003d6:	4b7e      	ldr	r3, [pc, #504]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	461a      	mov	r2, r3
 80003dc:	4613      	mov	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	3b03      	subs	r3, #3
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	4413      	add	r3, r2
 80003e8:	220e      	movs	r2, #14
 80003ea:	701a      	strb	r2, [r3, #0]
		colour_array[strip_startup_counter - 1][1] = 35;
 80003ec:	4b78      	ldr	r3, [pc, #480]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	461a      	mov	r2, r3
 80003f2:	4613      	mov	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	3b03      	subs	r3, #3
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	2223      	movs	r2, #35	@ 0x23
 8000400:	705a      	strb	r2, [r3, #1]
		colour_array[strip_startup_counter - 1][2] = 98;
 8000402:	4b73      	ldr	r3, [pc, #460]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	4613      	mov	r3, r2
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	4413      	add	r3, r2
 800040e:	3b03      	subs	r3, #3
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	2262      	movs	r2, #98	@ 0x62
 8000416:	709a      	strb	r2, [r3, #2]

		//red
		colour_array[strip_length - strip_startup_counter][0] = 98;
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	4a6d      	ldr	r2, [pc, #436]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800041c:	7812      	ldrb	r2, [r2, #0]
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	461a      	mov	r2, r3
 8000422:	4613      	mov	r3, r2
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	4413      	add	r3, r2
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	4413      	add	r3, r2
 800042c:	2262      	movs	r2, #98	@ 0x62
 800042e:	701a      	strb	r2, [r3, #0]
		colour_array[strip_length - strip_startup_counter][1] = 14;
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	4a67      	ldr	r2, [pc, #412]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000434:	7812      	ldrb	r2, [r2, #0]
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	461a      	mov	r2, r3
 800043a:	4613      	mov	r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	4413      	add	r3, r2
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	4413      	add	r3, r2
 8000444:	220e      	movs	r2, #14
 8000446:	705a      	strb	r2, [r3, #1]
		colour_array[strip_length - strip_startup_counter][2] = 45;
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	4a61      	ldr	r2, [pc, #388]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800044c:	7812      	ldrb	r2, [r2, #0]
 800044e:	1a9b      	subs	r3, r3, r2
 8000450:	461a      	mov	r2, r3
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	4413      	add	r3, r2
 800045c:	222d      	movs	r2, #45	@ 0x2d
 800045e:	709a      	strb	r2, [r3, #2]
	}

	// third diode
	if (strip_startup_counter - 2 >= 0 && strip_startup_counter - 2 < strip_length)
 8000460:	4b5b      	ldr	r3, [pc, #364]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d94a      	bls.n	80004fe <run_strip_startup_effect+0x1da>
 8000468:	4b59      	ldr	r3, [pc, #356]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	429a      	cmp	r2, r3
 8000472:	dc44      	bgt.n	80004fe <run_strip_startup_effect+0x1da>
	{
		// blue
		colour_array[strip_startup_counter - 2][0] = 7;
 8000474:	4b56      	ldr	r3, [pc, #344]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4613      	mov	r3, r2
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4413      	add	r3, r2
 8000480:	3b06      	subs	r3, #6
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	2207      	movs	r2, #7
 8000488:	701a      	strb	r2, [r3, #0]
		colour_array[strip_startup_counter - 2][1] = 18;
 800048a:	4b51      	ldr	r3, [pc, #324]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	461a      	mov	r2, r3
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	3b06      	subs	r3, #6
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	2212      	movs	r2, #18
 800049e:	705a      	strb	r2, [r3, #1]
		colour_array[strip_startup_counter - 2][2] = 49;
 80004a0:	4b4b      	ldr	r3, [pc, #300]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4613      	mov	r3, r2
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	4413      	add	r3, r2
 80004ac:	3b06      	subs	r3, #6
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	2231      	movs	r2, #49	@ 0x31
 80004b4:	709a      	strb	r2, [r3, #2]

		//red
		colour_array[strip_length - strip_startup_counter + 1][0] = 49;
 80004b6:	78fb      	ldrb	r3, [r7, #3]
 80004b8:	4a45      	ldr	r2, [pc, #276]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80004ba:	7812      	ldrb	r2, [r2, #0]
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	2231      	movs	r2, #49	@ 0x31
 80004cc:	701a      	strb	r2, [r3, #0]
		colour_array[strip_length - strip_startup_counter + 1][1] = 7;
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	4a3f      	ldr	r2, [pc, #252]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80004d2:	7812      	ldrb	r2, [r2, #0]
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	4613      	mov	r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4413      	add	r3, r2
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	2207      	movs	r2, #7
 80004e4:	705a      	strb	r2, [r3, #1]
		colour_array[strip_length - strip_startup_counter + 1][2] = 23;
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	4a39      	ldr	r2, [pc, #228]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80004ea:	7812      	ldrb	r2, [r2, #0]
 80004ec:	1a9b      	subs	r3, r3, r2
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	2217      	movs	r2, #23
 80004fc:	709a      	strb	r2, [r3, #2]
	}

	// fourth diode
	if (strip_startup_counter - 3 >= 0 && strip_startup_counter - 3 < strip_length)
 80004fe:	4b34      	ldr	r3, [pc, #208]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b02      	cmp	r3, #2
 8000504:	d94d      	bls.n	80005a2 <run_strip_startup_effect+0x27e>
 8000506:	4b32      	ldr	r3, [pc, #200]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	1e9a      	subs	r2, r3, #2
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	429a      	cmp	r2, r3
 8000510:	dc47      	bgt.n	80005a2 <run_strip_startup_effect+0x27e>
	{
		// blue
		colour_array[strip_startup_counter - 3][0] = 0;
 8000512:	4b2f      	ldr	r3, [pc, #188]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4613      	mov	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4413      	add	r3, r2
 800051e:	3b09      	subs	r3, #9
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
		colour_array[strip_startup_counter - 3][1] = 0;
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	3b09      	subs	r3, #9
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	2200      	movs	r2, #0
 800053c:	705a      	strb	r2, [r3, #1]
		colour_array[strip_startup_counter - 3][2] = 0;
 800053e:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	3b09      	subs	r3, #9
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	2200      	movs	r2, #0
 8000552:	709a      	strb	r2, [r3, #2]

		//red
		colour_array[strip_length - strip_startup_counter + 2][0] = 0;
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	4a1e      	ldr	r2, [pc, #120]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	461a      	mov	r2, r3
 800055e:	4613      	mov	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4413      	add	r3, r2
 8000564:	3306      	adds	r3, #6
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		colour_array[strip_length - strip_startup_counter + 2][1] = 0;
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	461a      	mov	r2, r3
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	3306      	adds	r3, #6
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	705a      	strb	r2, [r3, #1]
		colour_array[strip_length - strip_startup_counter + 2][2] = 0;
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4613      	mov	r3, r2
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	4413      	add	r3, r2
 8000598:	3306      	adds	r3, #6
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	709a      	strb	r2, [r3, #2]
	}

	strip_startup_counter += 1;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80005ac:	701a      	strb	r2, [r3, #0]

	// end
	if (strip_startup_counter - 3 == strip_length+2)
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <run_strip_startup_effect+0x2ac>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	1eda      	subs	r2, r3, #3
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	3302      	adds	r3, #2
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d101      	bne.n	80005c0 <run_strip_startup_effect+0x29c>
		return 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	e000      	b.n	80005c2 <run_strip_startup_effect+0x29e>

	return 1;
 80005c0:	2301      	movs	r3, #1
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	24000120 	.word	0x24000120

080005d4 <gradient_function>:

uint8_t gradient_function(uint8_t a1, uint8_t a2, uint8_t x)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	460b      	mov	r3, r1
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	4613      	mov	r3, r2
 80005e4:	717b      	strb	r3, [r7, #5]
	// multiplication by 100 to avoid float calculations

	int16_t data = a1;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	81fb      	strh	r3, [r7, #14]
	data *= 100;
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	461a      	mov	r2, r3
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	461a      	mov	r2, r3
 80005f4:	0091      	lsls	r1, r2, #2
 80005f6:	461a      	mov	r2, r3
 80005f8:	460b      	mov	r3, r1
 80005fa:	4413      	add	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	b29b      	uxth	r3, r3
 8000600:	81fb      	strh	r3, [r7, #14]

	data += (a1 - a2)*((-x*100)/20);
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	b29a      	uxth	r2, r3
 8000606:	79f9      	ldrb	r1, [r7, #7]
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	1acb      	subs	r3, r1, r3
 800060c:	b29b      	uxth	r3, r3
 800060e:	fb12 f303 	smulbb	r3, r2, r3
 8000612:	b29b      	uxth	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	0392      	lsls	r2, r2, #14
 8000618:	1ad2      	subs	r2, r2, r3
 800061a:	0092      	lsls	r2, r2, #2
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	b29a      	uxth	r2, r3
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	4413      	add	r3, r2
 8000624:	b29b      	uxth	r3, r3
 8000626:	81fb      	strh	r3, [r7, #14]

	return (uint8_t)(data / 100);
 8000628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800062c:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <gradient_function+0x74>)
 800062e:	fb82 1203 	smull	r1, r2, r2, r3
 8000632:	1152      	asrs	r2, r2, #5
 8000634:	17db      	asrs	r3, r3, #31
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	b21b      	sxth	r3, r3
 800063a:	b2db      	uxtb	r3, r3

}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	51eb851f 	.word	0x51eb851f

0800064c <get_gradient>:

void get_gradient(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2, uint8_t b2, uint8_t colour_array[][3], uint8_t strip_length)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	4604      	mov	r4, r0
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	461a      	mov	r2, r3
 800065a:	4623      	mov	r3, r4
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	4603      	mov	r3, r0
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	460b      	mov	r3, r1
 8000664:	717b      	strb	r3, [r7, #5]
 8000666:	4613      	mov	r3, r2
 8000668:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = 0; i < strip_length; i++)
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e02e      	b.n	80006ce <get_gradient+0x82>
	{
		colour_array[i][0] = gradient_function(r1, r2, i);
 8000670:	7bfa      	ldrb	r2, [r7, #15]
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800067a:	18d4      	adds	r4, r2, r3
 800067c:	7bfa      	ldrb	r2, [r7, #15]
 800067e:	7939      	ldrb	r1, [r7, #4]
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffa6 	bl	80005d4 <gradient_function>
 8000688:	4603      	mov	r3, r0
 800068a:	7023      	strb	r3, [r4, #0]
		colour_array[i][1] = gradient_function(g1, g2, i);
 800068c:	7bfa      	ldrb	r2, [r7, #15]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000696:	18d4      	adds	r4, r2, r3
 8000698:	7bfa      	ldrb	r2, [r7, #15]
 800069a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff97 	bl	80005d4 <gradient_function>
 80006a6:	4603      	mov	r3, r0
 80006a8:	7063      	strb	r3, [r4, #1]
		colour_array[i][2] = gradient_function(b1, b2, i);
 80006aa:	7bfa      	ldrb	r2, [r7, #15]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006b4:	18d4      	adds	r4, r2, r3
 80006b6:	7bfa      	ldrb	r2, [r7, #15]
 80006b8:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff88 	bl	80005d4 <gradient_function>
 80006c4:	4603      	mov	r3, r0
 80006c6:	70a3      	strb	r3, [r4, #2]
	for (uint8_t i = 0; i < strip_length; i++)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	3301      	adds	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	7bfa      	ldrb	r2, [r7, #15]
 80006d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3cb      	bcc.n	8000670 <get_gradient+0x24>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd90      	pop	{r4, r7, pc}

080006e2 <move_pixel_right>:

void move_pixel_right(uint8_t colour_array[][3], uint8_t strip_length)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	460b      	mov	r3, r1
 80006ec:	70fb      	strb	r3, [r7, #3]
	uint8_t r_save = colour_array[strip_length-1][0];
 80006ee:	78fa      	ldrb	r2, [r7, #3]
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	3b03      	subs	r3, #3
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	737b      	strb	r3, [r7, #13]
	uint8_t g_save = colour_array[strip_length-1][1];
 8000700:	78fa      	ldrb	r2, [r7, #3]
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	3b03      	subs	r3, #3
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	733b      	strb	r3, [r7, #12]
	uint8_t b_save = colour_array[strip_length-1][2];
 8000712:	78fa      	ldrb	r2, [r7, #3]
 8000714:	4613      	mov	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	3b03      	subs	r3, #3
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	789b      	ldrb	r3, [r3, #2]
 8000722:	72fb      	strb	r3, [r7, #11]


	for (uint8_t i=0; i < strip_length-1; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e023      	b.n	8000772 <move_pixel_right+0x90>
	{
		for (uint8_t j=0; j < 3; j++)
 800072a:	2300      	movs	r3, #0
 800072c:	73bb      	strb	r3, [r7, #14]
 800072e:	e01a      	b.n	8000766 <move_pixel_right+0x84>
		{
			colour_array[strip_length-1-i][j] = colour_array[strip_length-2-i][j];
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	1e9a      	subs	r2, r3, #2
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	461a      	mov	r2, r3
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	18d0      	adds	r0, r2, r3
 8000744:	7bb9      	ldrb	r1, [r7, #14]
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	461a      	mov	r2, r3
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	441a      	add	r2, r3
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	5c41      	ldrb	r1, [r0, r1]
 800075e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t j=0; j < 3; j++)
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	3301      	adds	r3, #1
 8000764:	73bb      	strb	r3, [r7, #14]
 8000766:	7bbb      	ldrb	r3, [r7, #14]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d9e1      	bls.n	8000730 <move_pixel_right+0x4e>
	for (uint8_t i=0; i < strip_length-1; i++)
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfa      	ldrb	r2, [r7, #15]
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	3b01      	subs	r3, #1
 8000778:	429a      	cmp	r2, r3
 800077a:	dbd6      	blt.n	800072a <move_pixel_right+0x48>
		}
	}

	colour_array[0][0] = r_save;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7b7a      	ldrb	r2, [r7, #13]
 8000780:	701a      	strb	r2, [r3, #0]
	colour_array[0][1] = g_save;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7b3a      	ldrb	r2, [r7, #12]
 8000786:	705a      	strb	r2, [r3, #1]
	colour_array[0][2] = b_save;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7afa      	ldrb	r2, [r7, #11]
 800078c:	709a      	strb	r2, [r3, #2]
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <colorPixel>:
#include "ULP_ws2812b.h"

uint16_t colorPixel(uint8_t r, uint8_t g, uint8_t b, uint16_t buffer[], uint16_t offset)
{
 800079a:	b480      	push	{r7}
 800079c:	b085      	sub	sp, #20
 800079e:	af00      	add	r7, sp, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	460b      	mov	r3, r1
 80007a8:	71bb      	strb	r3, [r7, #6]
 80007aa:	4613      	mov	r3, r2
 80007ac:	717b      	strb	r3, [r7, #5]
	uint8_t j;

	// green color
	j = 7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 128; i >= 1; i /= 2)
 80007b2:	2380      	movs	r3, #128	@ 0x80
 80007b4:	73bb      	strb	r3, [r7, #14]
 80007b6:	e01a      	b.n	80007ee <colorPixel+0x54>
	{
		buffer[offset++] = (((g & i) >> j) == 1 ? MAX_LED_VALUE : MIN_LED_VALUE);
 80007b8:	79ba      	ldrb	r2, [r7, #6]
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	4013      	ands	r3, r2
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	fa42 f303 	asr.w	r3, r2, r3
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d101      	bne.n	80007d0 <colorPixel+0x36>
 80007cc:	2135      	movs	r1, #53	@ 0x35
 80007ce:	e000      	b.n	80007d2 <colorPixel+0x38>
 80007d0:	211b      	movs	r1, #27
 80007d2:	8b3b      	ldrh	r3, [r7, #24]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	833a      	strh	r2, [r7, #24]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	460a      	mov	r2, r1
 80007e0:	801a      	strh	r2, [r3, #0]
	    j -= 1;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 128; i >= 1; i /= 2)
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	085b      	lsrs	r3, r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1e1      	bne.n	80007b8 <colorPixel+0x1e>
	}

	// red color
	j = 7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 128; i >= 1; i /= 2)
 80007f8:	2380      	movs	r3, #128	@ 0x80
 80007fa:	737b      	strb	r3, [r7, #13]
 80007fc:	e01a      	b.n	8000834 <colorPixel+0x9a>
	{
		buffer[offset++] = (((r & i) >> j) == 1 ? MAX_LED_VALUE : MIN_LED_VALUE);
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	7b7b      	ldrb	r3, [r7, #13]
 8000802:	4013      	ands	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	fa42 f303 	asr.w	r3, r2, r3
 800080e:	2b01      	cmp	r3, #1
 8000810:	d101      	bne.n	8000816 <colorPixel+0x7c>
 8000812:	2135      	movs	r1, #53	@ 0x35
 8000814:	e000      	b.n	8000818 <colorPixel+0x7e>
 8000816:	211b      	movs	r1, #27
 8000818:	8b3b      	ldrh	r3, [r7, #24]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	833a      	strh	r2, [r7, #24]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4413      	add	r3, r2
 8000824:	460a      	mov	r2, r1
 8000826:	801a      	strh	r2, [r3, #0]
		j -= 1;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	3b01      	subs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 128; i >= 1; i /= 2)
 800082e:	7b7b      	ldrb	r3, [r7, #13]
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	737b      	strb	r3, [r7, #13]
 8000834:	7b7b      	ldrb	r3, [r7, #13]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1e1      	bne.n	80007fe <colorPixel+0x64>
	}

	// blue color
	j = 7;
 800083a:	2307      	movs	r3, #7
 800083c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 128; i >= 1; i /= 2)
 800083e:	2380      	movs	r3, #128	@ 0x80
 8000840:	733b      	strb	r3, [r7, #12]
 8000842:	e01a      	b.n	800087a <colorPixel+0xe0>
	{
		buffer[offset++] = (((b & i) >> j) == 1 ? MAX_LED_VALUE : MIN_LED_VALUE);
 8000844:	797a      	ldrb	r2, [r7, #5]
 8000846:	7b3b      	ldrb	r3, [r7, #12]
 8000848:	4013      	ands	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	fa42 f303 	asr.w	r3, r2, r3
 8000854:	2b01      	cmp	r3, #1
 8000856:	d101      	bne.n	800085c <colorPixel+0xc2>
 8000858:	2135      	movs	r1, #53	@ 0x35
 800085a:	e000      	b.n	800085e <colorPixel+0xc4>
 800085c:	211b      	movs	r1, #27
 800085e:	8b3b      	ldrh	r3, [r7, #24]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	833a      	strh	r2, [r7, #24]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	4413      	add	r3, r2
 800086a:	460a      	mov	r2, r1
 800086c:	801a      	strh	r2, [r3, #0]
		j -= 1;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	3b01      	subs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 128; i >= 1; i /= 2)
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	085b      	lsrs	r3, r3, #1
 8000878:	733b      	strb	r3, [r7, #12]
 800087a:	7b3b      	ldrb	r3, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1e1      	bne.n	8000844 <colorPixel+0xaa>
	}

	// return first index value for next pixel
	return offset;
 8000880:	8b3b      	ldrh	r3, [r7, #24]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <convert_brightness>:

uint8_t convert_brightness(uint8_t color, uint8_t b) {
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
	uint16_t temp = color * b;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	fb12 f303 	smulbb	r3, r2, r3
 80008ac:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)(temp / 255);
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <convert_brightness+0x38>)
 80008b2:	fba2 2303 	umull	r2, r3, r2, r3
 80008b6:	09db      	lsrs	r3, r3, #7
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	80808081 	.word	0x80808081

080008cc <color_array_to_pixels>:
 * color_arr[number pixel][r, g, b] - color array
 * pixel_array[] - pixel buffer to send. Length array: (24 * length strip + 44 (reset time) + 1(stop flag))
 * brightness 0 to 255
 */
void color_array_to_pixels(uint8_t color_arr[][3], uint16_t pixel_buffer[], uint16_t led_length, uint8_t brightness)
{
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	460b      	mov	r3, r1
 80008dc:	80fb      	strh	r3, [r7, #6]
 80008de:	4613      	mov	r3, r2
 80008e0:	717b      	strb	r3, [r7, #5]
	uint16_t indx_pixel_array = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i=0; i < led_length; i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	82bb      	strh	r3, [r7, #20]
 80008ea:	e035      	b.n	8000958 <color_array_to_pixels+0x8c>
		indx_pixel_array = colorPixel(convert_brightness(color_arr[i][0], brightness), convert_brightness(color_arr[i][1], brightness), convert_brightness(color_arr[i][2], brightness), pixel_buffer, indx_pixel_array);
 80008ec:	8aba      	ldrh	r2, [r7, #20]
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	4413      	add	r3, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	797a      	ldrb	r2, [r7, #5]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffc6 	bl	8000890 <convert_brightness>
 8000904:	4603      	mov	r3, r0
 8000906:	461c      	mov	r4, r3
 8000908:	8aba      	ldrh	r2, [r7, #20]
 800090a:	4613      	mov	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	785b      	ldrb	r3, [r3, #1]
 8000916:	797a      	ldrb	r2, [r7, #5]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffb8 	bl	8000890 <convert_brightness>
 8000920:	4603      	mov	r3, r0
 8000922:	461d      	mov	r5, r3
 8000924:	8aba      	ldrh	r2, [r7, #20]
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	797a      	ldrb	r2, [r7, #5]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ffaa 	bl	8000890 <convert_brightness>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	8afb      	ldrh	r3, [r7, #22]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4629      	mov	r1, r5
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff ff26 	bl	800079a <colorPixel>
 800094e:	4603      	mov	r3, r0
 8000950:	82fb      	strh	r3, [r7, #22]
	for (uint16_t i=0; i < led_length; i++)
 8000952:	8abb      	ldrh	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	82bb      	strh	r3, [r7, #20]
 8000958:	8aba      	ldrh	r2, [r7, #20]
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3c5      	bcc.n	80008ec <color_array_to_pixels+0x20>

	for (uint8_t i=0; i < 45; i++)
 8000960:	2300      	movs	r3, #0
 8000962:	74fb      	strb	r3, [r7, #19]
 8000964:	e00a      	b.n	800097c <color_array_to_pixels+0xb0>
		pixel_buffer[indx_pixel_array++] = 0;
 8000966:	8afb      	ldrh	r3, [r7, #22]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	82fa      	strh	r2, [r7, #22]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	4413      	add	r3, r2
 8000972:	2200      	movs	r2, #0
 8000974:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0; i < 45; i++)
 8000976:	7cfb      	ldrb	r3, [r7, #19]
 8000978:	3301      	adds	r3, #1
 800097a:	74fb      	strb	r3, [r7, #19]
 800097c:	7cfb      	ldrb	r3, [r7, #19]
 800097e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000980:	d9f1      	bls.n	8000966 <color_array_to_pixels+0x9a>
}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bdb0      	pop	{r4, r5, r7, pc}

0800098c <set_color_strip>:

/**
 * set one color on strip
 */
void set_color_strip(uint8_t color_arr[][3], uint8_t r, uint8_t g, uint8_t b, uint16_t length)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4608      	mov	r0, r1
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	4603      	mov	r3, r0
 800099c:	70fb      	strb	r3, [r7, #3]
 800099e:	460b      	mov	r3, r1
 80009a0:	70bb      	strb	r3, [r7, #2]
 80009a2:	4613      	mov	r3, r2
 80009a4:	707b      	strb	r3, [r7, #1]
	for (uint16_t i=0; i < length; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	81fb      	strh	r3, [r7, #14]
 80009aa:	e01a      	b.n	80009e2 <set_color_strip+0x56>
	{
		color_arr[i][0] = r;
 80009ac:	89fa      	ldrh	r2, [r7, #14]
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	78fa      	ldrb	r2, [r7, #3]
 80009ba:	701a      	strb	r2, [r3, #0]
		color_arr[i][1] = g;
 80009bc:	89fa      	ldrh	r2, [r7, #14]
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	78ba      	ldrb	r2, [r7, #2]
 80009ca:	705a      	strb	r2, [r3, #1]
		color_arr[i][2] = b;
 80009cc:	89fa      	ldrh	r2, [r7, #14]
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	787a      	ldrb	r2, [r7, #1]
 80009da:	709a      	strb	r2, [r3, #2]
	for (uint16_t i=0; i < length; i++)
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	3301      	adds	r3, #1
 80009e0:	81fb      	strh	r3, [r7, #14]
 80009e2:	89fa      	ldrh	r2, [r7, #14]
 80009e4:	8b3b      	ldrh	r3, [r7, #24]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3e0      	bcc.n	80009ac <set_color_strip+0x20>
	}
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <clear_led_strip>:

void clear_led_strip(uint8_t color_arr[][3], uint16_t length)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	807b      	strh	r3, [r7, #2]
	set_color_strip(color_arr, 0, 0, 0, length);
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffbc 	bl	800098c <set_color_strip>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <buffer_size>:

/**
 * return buffer size, input number pixel
 */
uint16_t buffer_size(uint16_t led_count)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	// 24bit color + 44 bit reset time + 1bit null for stop pwm
	return (led_count * 24) + 45;
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	0052      	lsls	r2, r2, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	332d      	adds	r3, #45	@ 0x2d
 8000a34:	b29b      	uxth	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <MX_DMA_Init+0x3c>)
 8000a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a50:	4a0b      	ldr	r2, [pc, #44]	@ (8000a80 <MX_DMA_Init+0x3c>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_DMA_Init+0x3c>)
 8000a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	200b      	movs	r0, #11
 8000a6e:	f000 fd6c 	bl	800154a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a72:	200b      	movs	r0, #11
 8000a74:	f000 fd83 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	58024400 	.word	0x58024400

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a90:	4a26      	ldr	r2, [pc, #152]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9a:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aae:	4a1f      	ldr	r2, [pc, #124]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_GPIO_Init+0xa8>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

}
 8000b20:	bf00      	nop
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	58024400 	.word	0x58024400

08000b30 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE BEGIN 0 */

volatile uint8_t dma_flag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f006 fe0c 	bl	8007758 <HAL_TIM_PWM_Stop>
	dma_flag = 0;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	24000121 	.word	0x24000121

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 8000b5a:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b5c:	f000 f8f6 	bl	8000d4c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 fb62 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f880 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f7ff ff8c 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f7ff ff6a 	bl	8000a44 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000b70:	f00b fc32 	bl	800c3d8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000b74:	f000 f9f2 	bl	8000f5c <MX_TIM1_Init>
  uint8_t color_array[21][3];
  uint16_t pixel_bit_buffer[(21 * 24) + 45];



  strip_startup_init();
 8000b78:	f7ff fbc8 	bl	800030c <strip_startup_init>
  clear_led_strip(color_array, 21);
 8000b7c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000b80:	2115      	movs	r1, #21
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff38 	bl	80009f8 <clear_led_strip>

  while(1)
  {
	  color_array_to_pixels(color_array, pixel_bit_buffer, 21, 100);
 8000b88:	1d39      	adds	r1, r7, #4
 8000b8a:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 8000b8e:	2364      	movs	r3, #100	@ 0x64
 8000b90:	2215      	movs	r2, #21
 8000b92:	f7ff fe9b 	bl	80008cc <color_array_to_pixels>
	  if (!run_strip_startup_effect(color_array, 21))
 8000b96:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000b9a:	2115      	movs	r1, #21
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fbc1 	bl	8000324 <run_strip_startup_effect>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d015      	beq.n	8000bd4 <main+0x80>
		  break;

	  while(dma_flag);
 8000ba8:	bf00      	nop
 8000baa:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <main+0x10c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1fa      	bne.n	8000baa <main+0x56>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pixel_bit_buffer, buffer_size(21));
 8000bb4:	2015      	movs	r0, #21
 8000bb6:	f7ff ff31 	bl	8000a1c <buffer_size>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	1d3a      	adds	r2, r7, #4
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4828      	ldr	r0, [pc, #160]	@ (8000c64 <main+0x110>)
 8000bc2:	f006 fe5f 	bl	8007884 <HAL_TIM_PWM_Start_DMA>
	  dma_flag = 1;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <main+0x10c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(25);
 8000bcc:	2019      	movs	r0, #25
 8000bce:	f000 fbbd 	bl	800134c <HAL_Delay>
	  color_array_to_pixels(color_array, pixel_bit_buffer, 21, 100);
 8000bd2:	e7d9      	b.n	8000b88 <main+0x34>
		  break;
 8000bd4:	bf00      	nop
  }


  get_gradient(0, 0, 255, 255, 0, 0, color_array, 21);
 8000bd6:	2315      	movs	r3, #21
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2300      	movs	r3, #0
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	23ff      	movs	r3, #255	@ 0xff
 8000bea:	22ff      	movs	r2, #255	@ 0xff
 8000bec:	2100      	movs	r1, #0
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fd2c 	bl	800064c <get_gradient>

  color_array_to_pixels(color_array, pixel_bit_buffer, 21, 100);
 8000bf4:	1d39      	adds	r1, r7, #4
 8000bf6:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	2215      	movs	r2, #21
 8000bfe:	f7ff fe65 	bl	80008cc <color_array_to_pixels>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pixel_bit_buffer, buffer_size(21));
 8000c02:	2015      	movs	r0, #21
 8000c04:	f7ff ff0a 	bl	8000a1c <buffer_size>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	1d3a      	adds	r2, r7, #4
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4815      	ldr	r0, [pc, #84]	@ (8000c64 <main+0x110>)
 8000c10:	f006 fe38 	bl	8007884 <HAL_TIM_PWM_Start_DMA>
  while(dma_flag);
 8000c14:	bf00      	nop
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <main+0x10c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1fa      	bne.n	8000c16 <main+0xc2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  move_pixel_right(color_array, 21);
 8000c20:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000c24:	2115      	movs	r1, #21
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd5b 	bl	80006e2 <move_pixel_right>
	  color_array_to_pixels(color_array, pixel_bit_buffer, 21, 100);
 8000c2c:	1d39      	adds	r1, r7, #4
 8000c2e:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 8000c32:	2364      	movs	r3, #100	@ 0x64
 8000c34:	2215      	movs	r2, #21
 8000c36:	f7ff fe49 	bl	80008cc <color_array_to_pixels>
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pixel_bit_buffer, buffer_size(21));
 8000c3a:	2015      	movs	r0, #21
 8000c3c:	f7ff feee 	bl	8000a1c <buffer_size>
 8000c40:	4603      	mov	r3, r0
 8000c42:	1d3a      	adds	r2, r7, #4
 8000c44:	2100      	movs	r1, #0
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <main+0x110>)
 8000c48:	f006 fe1c 	bl	8007884 <HAL_TIM_PWM_Start_DMA>
	  while(dma_flag);
 8000c4c:	bf00      	nop
 8000c4e:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <main+0x10c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1fa      	bne.n	8000c4e <main+0xfa>
	  HAL_Delay(20);
 8000c58:	2014      	movs	r0, #20
 8000c5a:	f000 fb77 	bl	800134c <HAL_Delay>
	  move_pixel_right(color_array, 21);
 8000c5e:	e7df      	b.n	8000c20 <main+0xcc>
 8000c60:	24000121 	.word	0x24000121
 8000c64:	24000124 	.word	0x24000124

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09c      	sub	sp, #112	@ 0x70
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	224c      	movs	r2, #76	@ 0x4c
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00c f89c 	bl	800cdb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2220      	movs	r2, #32
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00c f896 	bl	800cdb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f004 fa25 	bl	80050d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <SystemClock_Config+0xe0>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d48 <SystemClock_Config+0xe0>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <SystemClock_Config+0xe0>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cae:	bf00      	nop
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <SystemClock_Config+0xe0>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cbc:	d1f8      	bne.n	8000cb0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000ccc:	2340      	movs	r3, #64	@ 0x40
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000cdc:	2330      	movs	r3, #48	@ 0x30
 8000cde:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000cec:	2308      	movs	r3, #8
 8000cee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fa35 	bl	800516c <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d08:	f000 f84c 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	233f      	movs	r3, #63	@ 0x3f
 8000d0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fdf5 	bl	8005920 <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d3c:	f000 f832 	bl	8000da4 <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3770      	adds	r7, #112	@ 0x70
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58024800 	.word	0x58024800

08000d4c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d5e:	f000 fc29 	bl	80015b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d6e:	231f      	movs	r3, #31
 8000d70:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d72:	2387      	movs	r3, #135	@ 0x87
 8000d74:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fc47 	bl	8001624 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d96:	2004      	movs	r0, #4
 8000d98:	f000 fc24 	bl	80015e4 <HAL_MPU_Enable>

}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_MspInit+0x30>)
 8000db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dbc:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_MspInit+0x30>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_MspInit+0x30>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	58024400 	.word	0x58024400

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3a:	f000 fa67 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <DMA1_Stream0_IRQHandler+0x10>)
 8000e4a:	f001 f9ed 	bl	8002228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000170 	.word	0x24000170

08000e58 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <OTG_HS_IRQHandler+0x10>)
 8000e5e:	f002 ffde 	bl	8003e1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	240016cc 	.word	0x240016cc

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <SystemInit+0xd0>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e76:	4a31      	ldr	r2, [pc, #196]	@ (8000f3c <SystemInit+0xd0>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e80:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <SystemInit+0xd4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	d807      	bhi.n	8000e9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <SystemInit+0xd4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 030f 	bic.w	r3, r3, #15
 8000e94:	4a2a      	ldr	r2, [pc, #168]	@ (8000f40 <SystemInit+0xd4>)
 8000e96:	f043 0307 	orr.w	r3, r3, #7
 8000e9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <SystemInit+0xd8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a28      	ldr	r2, [pc, #160]	@ (8000f44 <SystemInit+0xd8>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <SystemInit+0xd8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <SystemInit+0xd8>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4924      	ldr	r1, [pc, #144]	@ (8000f44 <SystemInit+0xd8>)
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <SystemInit+0xdc>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <SystemInit+0xd4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <SystemInit+0xd4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 030f 	bic.w	r3, r3, #15
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <SystemInit+0xd4>)
 8000ed0:	f043 0307 	orr.w	r3, r3, #7
 8000ed4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <SystemInit+0xd8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <SystemInit+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <SystemInit+0xd8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <SystemInit+0xd8>)
 8000eea:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <SystemInit+0xe0>)
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <SystemInit+0xd8>)
 8000ef0:	4a17      	ldr	r2, [pc, #92]	@ (8000f50 <SystemInit+0xe4>)
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <SystemInit+0xd8>)
 8000ef6:	4a17      	ldr	r2, [pc, #92]	@ (8000f54 <SystemInit+0xe8>)
 8000ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <SystemInit+0xd8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <SystemInit+0xd8>)
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <SystemInit+0xe8>)
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <SystemInit+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <SystemInit+0xd8>)
 8000f0e:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <SystemInit+0xe8>)
 8000f10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <SystemInit+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <SystemInit+0xd8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <SystemInit+0xd8>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <SystemInit+0xd8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <SystemInit+0xec>)
 8000f2c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	52002000 	.word	0x52002000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f4c:	02020200 	.word	0x02020200
 8000f50:	01ff0000 	.word	0x01ff0000
 8000f54:	01010280 	.word	0x01010280
 8000f58:	52004000 	.word	0x52004000

08000f5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09c      	sub	sp, #112	@ 0x70
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2234      	movs	r2, #52	@ 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f00b ff0c 	bl	800cdb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9c:	4b43      	ldr	r3, [pc, #268]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000f9e:	4a44      	ldr	r2, [pc, #272]	@ (80010b0 <MX_TIM1_Init+0x154>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa2:	4b42      	ldr	r3, [pc, #264]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b40      	ldr	r3, [pc, #256]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80;
 8000fae:	4b3f      	ldr	r3, [pc, #252]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000fb0:	2250      	movs	r2, #80	@ 0x50
 8000fb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fba:	4b3c      	ldr	r3, [pc, #240]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc6:	4839      	ldr	r0, [pc, #228]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000fc8:	f006 fb0e 	bl	80075e8 <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fd2:	f7ff fee7 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fda:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fdc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4832      	ldr	r0, [pc, #200]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000fe4:	f006 ff96 	bl	8007f14 <HAL_TIM_ConfigClockSource>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fee:	f7ff fed9 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff2:	482e      	ldr	r0, [pc, #184]	@ (80010ac <MX_TIM1_Init+0x150>)
 8000ff4:	f006 fb4f 	bl	8007696 <HAL_TIM_PWM_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ffe:	f7ff fed1 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001012:	4619      	mov	r1, r3
 8001014:	4825      	ldr	r0, [pc, #148]	@ (80010ac <MX_TIM1_Init+0x150>)
 8001016:	f007 fda7 	bl	8008b68 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001020:	f7ff fec0 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	@ 0x60
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001030:	2300      	movs	r3, #0
 8001032:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001040:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	4818      	ldr	r0, [pc, #96]	@ (80010ac <MX_TIM1_Init+0x150>)
 800104a:	f006 fe4f 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001054:	f7ff fea6 	bl	8000da4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800106c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001070:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800107a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	@ (80010ac <MX_TIM1_Init+0x150>)
 800108e:	f007 fe07 	bl	8008ca0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001098:	f7ff fe84 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800109c:	4803      	ldr	r0, [pc, #12]	@ (80010ac <MX_TIM1_Init+0x150>)
 800109e:	f000 f85d 	bl	800115c <HAL_TIM_MspPostInit>

}
 80010a2:	bf00      	nop
 80010a4:	3770      	adds	r7, #112	@ 0x70
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	24000124 	.word	0x24000124
 80010b0:	40010000 	.word	0x40010000

080010b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a22      	ldr	r2, [pc, #136]	@ (800114c <HAL_TIM_Base_MspInit+0x98>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d13d      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c6:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <HAL_TIM_Base_MspInit+0x9c>)
 80010c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010cc:	4a20      	ldr	r2, [pc, #128]	@ (8001150 <HAL_TIM_Base_MspInit+0x9c>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_TIM_Base_MspInit+0x9c>)
 80010d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 80010e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <HAL_TIM_Base_MspInit+0xa4>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 80010ec:	220b      	movs	r2, #11
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001102:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 8001106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 800110e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001112:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001126:	480b      	ldr	r0, [pc, #44]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 8001128:	f000 fabc 	bl	80016a4 <HAL_DMA_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001132:	f7ff fe37 	bl	8000da4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
 800113c:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <HAL_TIM_Base_MspInit+0xa0>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	58024400 	.word	0x58024400
 8001154:	24000170 	.word	0x24000170
 8001158:	40020010 	.word	0x40020010

0800115c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_TIM_MspPostInit+0x6c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11f      	bne.n	80011be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <HAL_TIM_MspPostInit+0x70>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_TIM_MspPostInit+0x70>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_TIM_MspPostInit+0x70>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800119c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_TIM_MspPostInit+0x74>)
 80011ba:	f002 fb47 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010000 	.word	0x40010000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58021000 	.word	0x58021000

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d8:	f7ff fe48 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f00b fddf 	bl	800cdc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fca5 	bl	8000b54 <main>
  bx  lr
 800120a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001210:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001214:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001218:	0800ce84 	.word	0x0800ce84
  ldr r2, =_sbss
 800121c:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8001220:	24001dd0 	.word	0x24001dd0

08001224 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC3_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122e:	2003      	movs	r0, #3
 8001230:	f000 f980 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001234:	f004 fd2a 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8001238:	4602      	mov	r2, r0
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_Init+0x68>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	4913      	ldr	r1, [pc, #76]	@ (8001294 <HAL_Init+0x6c>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_Init+0x68>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	4a0e      	ldr	r2, [pc, #56]	@ (8001294 <HAL_Init+0x6c>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <HAL_Init+0x70>)
 800126a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_Init+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f814 	bl	80012a0 <HAL_InitTick>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e002      	b.n	8001288 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001282:	f7ff fd95 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024400 	.word	0x58024400
 8001294:	0800ce64 	.word	0x0800ce64
 8001298:	24000004 	.word	0x24000004
 800129c:	24000000 	.word	0x24000000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_InitTick+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e021      	b.n	80012f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <HAL_InitTick+0x64>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_InitTick+0x60>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f965 	bl	800159a <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f000 f92f 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	@ (8001308 <HAL_InitTick+0x68>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2400000c 	.word	0x2400000c
 8001304:	24000000 	.word	0x24000000
 8001308:	24000008 	.word	0x24000008

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2400000c 	.word	0x2400000c
 8001330:	240001e8 	.word	0x240001e8

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	240001e8 	.word	0x240001e8

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2400000c 	.word	0x2400000c

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	05fa0000 	.word	0x05fa0000

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	@ (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff29 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff40 	bl	80013dc <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff90 	bl	8001488 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5f 	bl	8001434 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff33 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa4 	bl	80014f0 <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015b8:	f3bf 8f5f 	dmb	sy
}
 80015bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <HAL_MPU_Disable+0x28>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_MPU_Disable+0x28>)
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015ca:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_MPU_Disable+0x2c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	e000ed90 	.word	0xe000ed90

080015e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_MPU_Enable+0x38>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_MPU_Enable+0x3c>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <HAL_MPU_Enable+0x3c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001602:	f3bf 8f4f 	dsb	sy
}
 8001606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001608:	f3bf 8f6f 	isb	sy
}
 800160c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed90 	.word	0xe000ed90
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	785a      	ldrb	r2, [r3, #1]
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001632:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4a19      	ldr	r2, [pc, #100]	@ (80016a0 <HAL_MPU_ConfigRegion+0x7c>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001640:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7adb      	ldrb	r3, [r3, #11]
 8001652:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7a9b      	ldrb	r3, [r3, #10]
 800165a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800165c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7b5b      	ldrb	r3, [r3, #13]
 8001662:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001664:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7b9b      	ldrb	r3, [r3, #14]
 800166a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800166c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7bdb      	ldrb	r3, [r3, #15]
 8001672:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001674:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7a5b      	ldrb	r3, [r3, #9]
 800167a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800167c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7a1b      	ldrb	r3, [r3, #8]
 8001682:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001684:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800168e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001690:	6113      	str	r3, [r2, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed90 	.word	0xe000ed90

080016a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff fe42 	bl	8001334 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e312      	b.n	8001ce2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a66      	ldr	r2, [pc, #408]	@ (800185c <HAL_DMA_Init+0x1b8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d04a      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a65      	ldr	r2, [pc, #404]	@ (8001860 <HAL_DMA_Init+0x1bc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d045      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a63      	ldr	r2, [pc, #396]	@ (8001864 <HAL_DMA_Init+0x1c0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d040      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a62      	ldr	r2, [pc, #392]	@ (8001868 <HAL_DMA_Init+0x1c4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d03b      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a60      	ldr	r2, [pc, #384]	@ (800186c <HAL_DMA_Init+0x1c8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d036      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001870 <HAL_DMA_Init+0x1cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d031      	beq.n	800175c <HAL_DMA_Init+0xb8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001874 <HAL_DMA_Init+0x1d0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d02c      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a5c      	ldr	r2, [pc, #368]	@ (8001878 <HAL_DMA_Init+0x1d4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d027      	beq.n	800175c <HAL_DMA_Init+0xb8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a5a      	ldr	r2, [pc, #360]	@ (800187c <HAL_DMA_Init+0x1d8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d022      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a59      	ldr	r2, [pc, #356]	@ (8001880 <HAL_DMA_Init+0x1dc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d01d      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a57      	ldr	r2, [pc, #348]	@ (8001884 <HAL_DMA_Init+0x1e0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d018      	beq.n	800175c <HAL_DMA_Init+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a56      	ldr	r2, [pc, #344]	@ (8001888 <HAL_DMA_Init+0x1e4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a54      	ldr	r2, [pc, #336]	@ (800188c <HAL_DMA_Init+0x1e8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00e      	beq.n	800175c <HAL_DMA_Init+0xb8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a53      	ldr	r2, [pc, #332]	@ (8001890 <HAL_DMA_Init+0x1ec>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d009      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a51      	ldr	r2, [pc, #324]	@ (8001894 <HAL_DMA_Init+0x1f0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d004      	beq.n	800175c <HAL_DMA_Init+0xb8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a50      	ldr	r2, [pc, #320]	@ (8001898 <HAL_DMA_Init+0x1f4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_DMA_Init+0xbc>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_DMA_Init+0xbe>
 8001760:	2300      	movs	r3, #0
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 813c 	beq.w	80019e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a37      	ldr	r2, [pc, #220]	@ (800185c <HAL_DMA_Init+0x1b8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d04a      	beq.n	8001818 <HAL_DMA_Init+0x174>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a36      	ldr	r2, [pc, #216]	@ (8001860 <HAL_DMA_Init+0x1bc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d045      	beq.n	8001818 <HAL_DMA_Init+0x174>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a34      	ldr	r2, [pc, #208]	@ (8001864 <HAL_DMA_Init+0x1c0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d040      	beq.n	8001818 <HAL_DMA_Init+0x174>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a33      	ldr	r2, [pc, #204]	@ (8001868 <HAL_DMA_Init+0x1c4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d03b      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a31      	ldr	r2, [pc, #196]	@ (800186c <HAL_DMA_Init+0x1c8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d036      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a30      	ldr	r2, [pc, #192]	@ (8001870 <HAL_DMA_Init+0x1cc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d031      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001874 <HAL_DMA_Init+0x1d0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d02c      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001878 <HAL_DMA_Init+0x1d4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d027      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2b      	ldr	r2, [pc, #172]	@ (800187c <HAL_DMA_Init+0x1d8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d022      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001880 <HAL_DMA_Init+0x1dc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d01d      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_DMA_Init+0x1e0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d018      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a27      	ldr	r2, [pc, #156]	@ (8001888 <HAL_DMA_Init+0x1e4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d013      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a25      	ldr	r2, [pc, #148]	@ (800188c <HAL_DMA_Init+0x1e8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00e      	beq.n	8001818 <HAL_DMA_Init+0x174>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a24      	ldr	r2, [pc, #144]	@ (8001890 <HAL_DMA_Init+0x1ec>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d009      	beq.n	8001818 <HAL_DMA_Init+0x174>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a22      	ldr	r2, [pc, #136]	@ (8001894 <HAL_DMA_Init+0x1f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d004      	beq.n	8001818 <HAL_DMA_Init+0x174>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <HAL_DMA_Init+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d108      	bne.n	800182a <HAL_DMA_Init+0x186>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e007      	b.n	800183a <HAL_DMA_Init+0x196>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800183a:	e02f      	b.n	800189c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183c:	f7ff fd7a 	bl	8001334 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b05      	cmp	r3, #5
 8001848:	d928      	bls.n	800189c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e242      	b.n	8001ce2 <HAL_DMA_Init+0x63e>
 800185c:	40020010 	.word	0x40020010
 8001860:	40020028 	.word	0x40020028
 8001864:	40020040 	.word	0x40020040
 8001868:	40020058 	.word	0x40020058
 800186c:	40020070 	.word	0x40020070
 8001870:	40020088 	.word	0x40020088
 8001874:	400200a0 	.word	0x400200a0
 8001878:	400200b8 	.word	0x400200b8
 800187c:	40020410 	.word	0x40020410
 8001880:	40020428 	.word	0x40020428
 8001884:	40020440 	.word	0x40020440
 8001888:	40020458 	.word	0x40020458
 800188c:	40020470 	.word	0x40020470
 8001890:	40020488 	.word	0x40020488
 8001894:	400204a0 	.word	0x400204a0
 8001898:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1c8      	bne.n	800183c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4b83      	ldr	r3, [pc, #524]	@ (8001ac4 <HAL_DMA_Init+0x420>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d107      	bne.n	8001900 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	4313      	orrs	r3, r2
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b28      	cmp	r3, #40	@ 0x28
 8001906:	d903      	bls.n	8001910 <HAL_DMA_Init+0x26c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b2e      	cmp	r3, #46	@ 0x2e
 800190e:	d91f      	bls.n	8001950 <HAL_DMA_Init+0x2ac>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b3e      	cmp	r3, #62	@ 0x3e
 8001916:	d903      	bls.n	8001920 <HAL_DMA_Init+0x27c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b42      	cmp	r3, #66	@ 0x42
 800191e:	d917      	bls.n	8001950 <HAL_DMA_Init+0x2ac>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b46      	cmp	r3, #70	@ 0x46
 8001926:	d903      	bls.n	8001930 <HAL_DMA_Init+0x28c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b48      	cmp	r3, #72	@ 0x48
 800192e:	d90f      	bls.n	8001950 <HAL_DMA_Init+0x2ac>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b4e      	cmp	r3, #78	@ 0x4e
 8001936:	d903      	bls.n	8001940 <HAL_DMA_Init+0x29c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b52      	cmp	r3, #82	@ 0x52
 800193e:	d907      	bls.n	8001950 <HAL_DMA_Init+0x2ac>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b73      	cmp	r3, #115	@ 0x73
 8001946:	d905      	bls.n	8001954 <HAL_DMA_Init+0x2b0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b77      	cmp	r3, #119	@ 0x77
 800194e:	d801      	bhi.n	8001954 <HAL_DMA_Init+0x2b0>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_DMA_Init+0x2b2>
 8001954:	2300      	movs	r3, #0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001960:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f023 0307 	bic.w	r3, r3, #7
 8001978:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	2b04      	cmp	r3, #4
 800198a:	d117      	bne.n	80019bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00e      	beq.n	80019bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f001 fdca 	bl	8003538 <DMA_CheckFifoParam>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2240      	movs	r2, #64	@ 0x40
 80019ae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e192      	b.n	8001ce2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f001 fd05 	bl	80033d4 <DMA_CalcBaseAndBitshift>
 80019ca:	4603      	mov	r3, r0
 80019cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	223f      	movs	r2, #63	@ 0x3f
 80019d8:	409a      	lsls	r2, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	e0c8      	b.n	8001b72 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a38      	ldr	r2, [pc, #224]	@ (8001ac8 <HAL_DMA_Init+0x424>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d022      	beq.n	8001a30 <HAL_DMA_Init+0x38c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a37      	ldr	r2, [pc, #220]	@ (8001acc <HAL_DMA_Init+0x428>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d01d      	beq.n	8001a30 <HAL_DMA_Init+0x38c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a35      	ldr	r2, [pc, #212]	@ (8001ad0 <HAL_DMA_Init+0x42c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d018      	beq.n	8001a30 <HAL_DMA_Init+0x38c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a34      	ldr	r2, [pc, #208]	@ (8001ad4 <HAL_DMA_Init+0x430>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d013      	beq.n	8001a30 <HAL_DMA_Init+0x38c>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a32      	ldr	r2, [pc, #200]	@ (8001ad8 <HAL_DMA_Init+0x434>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00e      	beq.n	8001a30 <HAL_DMA_Init+0x38c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a31      	ldr	r2, [pc, #196]	@ (8001adc <HAL_DMA_Init+0x438>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d009      	beq.n	8001a30 <HAL_DMA_Init+0x38c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae0 <HAL_DMA_Init+0x43c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d004      	beq.n	8001a30 <HAL_DMA_Init+0x38c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <HAL_DMA_Init+0x440>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_DMA_Init+0x390>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_DMA_Init+0x392>
 8001a34:	2300      	movs	r3, #0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8092 	beq.w	8001b60 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a21      	ldr	r2, [pc, #132]	@ (8001ac8 <HAL_DMA_Init+0x424>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d021      	beq.n	8001a8a <HAL_DMA_Init+0x3e6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a20      	ldr	r2, [pc, #128]	@ (8001acc <HAL_DMA_Init+0x428>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d01c      	beq.n	8001a8a <HAL_DMA_Init+0x3e6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad0 <HAL_DMA_Init+0x42c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d017      	beq.n	8001a8a <HAL_DMA_Init+0x3e6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad4 <HAL_DMA_Init+0x430>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d012      	beq.n	8001a8a <HAL_DMA_Init+0x3e6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad8 <HAL_DMA_Init+0x434>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_DMA_Init+0x3e6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1a      	ldr	r2, [pc, #104]	@ (8001adc <HAL_DMA_Init+0x438>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Init+0x3e6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ae0 <HAL_DMA_Init+0x43c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_DMA_Init+0x3e6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <HAL_DMA_Init+0x440>)
 8001a88:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_DMA_Init+0x444>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b40      	cmp	r3, #64	@ 0x40
 8001ab0:	d01c      	beq.n	8001aec <HAL_DMA_Init+0x448>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b80      	cmp	r3, #128	@ 0x80
 8001ab8:	d102      	bne.n	8001ac0 <HAL_DMA_Init+0x41c>
 8001aba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001abe:	e016      	b.n	8001aee <HAL_DMA_Init+0x44a>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e014      	b.n	8001aee <HAL_DMA_Init+0x44a>
 8001ac4:	fe10803f 	.word	0xfe10803f
 8001ac8:	58025408 	.word	0x58025408
 8001acc:	5802541c 	.word	0x5802541c
 8001ad0:	58025430 	.word	0x58025430
 8001ad4:	58025444 	.word	0x58025444
 8001ad8:	58025458 	.word	0x58025458
 8001adc:	5802546c 	.word	0x5802546c
 8001ae0:	58025480 	.word	0x58025480
 8001ae4:	58025494 	.word	0x58025494
 8001ae8:	fffe000f 	.word	0xfffe000f
 8001aec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68d2      	ldr	r2, [r2, #12]
 8001af2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b6e      	ldr	r3, [pc, #440]	@ (8001cec <HAL_DMA_Init+0x648>)
 8001b34:	4413      	add	r3, r2
 8001b36:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf0 <HAL_DMA_Init+0x64c>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	009a      	lsls	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f001 fc45 	bl	80033d4 <DMA_CalcBaseAndBitshift>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	2201      	movs	r2, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	e008      	b.n	8001b72 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2240      	movs	r2, #64	@ 0x40
 8001b64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0b7      	b.n	8001ce2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf4 <HAL_DMA_Init+0x650>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d072      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf8 <HAL_DMA_Init+0x654>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d06d      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cfc <HAL_DMA_Init+0x658>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d068      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5a      	ldr	r2, [pc, #360]	@ (8001d00 <HAL_DMA_Init+0x65c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d063      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a59      	ldr	r2, [pc, #356]	@ (8001d04 <HAL_DMA_Init+0x660>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d05e      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a57      	ldr	r2, [pc, #348]	@ (8001d08 <HAL_DMA_Init+0x664>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d059      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a56      	ldr	r2, [pc, #344]	@ (8001d0c <HAL_DMA_Init+0x668>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d054      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a54      	ldr	r2, [pc, #336]	@ (8001d10 <HAL_DMA_Init+0x66c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d04f      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a53      	ldr	r2, [pc, #332]	@ (8001d14 <HAL_DMA_Init+0x670>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d04a      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	@ (8001d18 <HAL_DMA_Init+0x674>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d045      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a50      	ldr	r2, [pc, #320]	@ (8001d1c <HAL_DMA_Init+0x678>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d040      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d20 <HAL_DMA_Init+0x67c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d03b      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a4d      	ldr	r2, [pc, #308]	@ (8001d24 <HAL_DMA_Init+0x680>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d036      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d28 <HAL_DMA_Init+0x684>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d031      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a4a      	ldr	r2, [pc, #296]	@ (8001d2c <HAL_DMA_Init+0x688>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d02c      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a48      	ldr	r2, [pc, #288]	@ (8001d30 <HAL_DMA_Init+0x68c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d027      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a47      	ldr	r2, [pc, #284]	@ (8001d34 <HAL_DMA_Init+0x690>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a45      	ldr	r2, [pc, #276]	@ (8001d38 <HAL_DMA_Init+0x694>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01d      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a44      	ldr	r2, [pc, #272]	@ (8001d3c <HAL_DMA_Init+0x698>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a42      	ldr	r2, [pc, #264]	@ (8001d40 <HAL_DMA_Init+0x69c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a41      	ldr	r2, [pc, #260]	@ (8001d44 <HAL_DMA_Init+0x6a0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a3f      	ldr	r2, [pc, #252]	@ (8001d48 <HAL_DMA_Init+0x6a4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d009      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3e      	ldr	r2, [pc, #248]	@ (8001d4c <HAL_DMA_Init+0x6a8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_Init+0x5be>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d50 <HAL_DMA_Init+0x6ac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_Init+0x5c2>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_DMA_Init+0x5c4>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d032      	beq.n	8001cd2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f001 fcdf 	bl	8003630 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b80      	cmp	r3, #128	@ 0x80
 8001c78:	d102      	bne.n	8001c80 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d010      	beq.n	8001cc0 <HAL_DMA_Init+0x61c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d80c      	bhi.n	8001cc0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f001 fd5c 	bl	8003764 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	e008      	b.n	8001cd2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	a7fdabf8 	.word	0xa7fdabf8
 8001cf0:	cccccccd 	.word	0xcccccccd
 8001cf4:	40020010 	.word	0x40020010
 8001cf8:	40020028 	.word	0x40020028
 8001cfc:	40020040 	.word	0x40020040
 8001d00:	40020058 	.word	0x40020058
 8001d04:	40020070 	.word	0x40020070
 8001d08:	40020088 	.word	0x40020088
 8001d0c:	400200a0 	.word	0x400200a0
 8001d10:	400200b8 	.word	0x400200b8
 8001d14:	40020410 	.word	0x40020410
 8001d18:	40020428 	.word	0x40020428
 8001d1c:	40020440 	.word	0x40020440
 8001d20:	40020458 	.word	0x40020458
 8001d24:	40020470 	.word	0x40020470
 8001d28:	40020488 	.word	0x40020488
 8001d2c:	400204a0 	.word	0x400204a0
 8001d30:	400204b8 	.word	0x400204b8
 8001d34:	58025408 	.word	0x58025408
 8001d38:	5802541c 	.word	0x5802541c
 8001d3c:	58025430 	.word	0x58025430
 8001d40:	58025444 	.word	0x58025444
 8001d44:	58025458 	.word	0x58025458
 8001d48:	5802546c 	.word	0x5802546c
 8001d4c:	58025480 	.word	0x58025480
 8001d50:	58025494 	.word	0x58025494

08001d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e226      	b.n	80021be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Start_IT+0x2a>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e21f      	b.n	80021be <HAL_DMA_Start_IT+0x46a>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	f040 820a 	bne.w	80021a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a68      	ldr	r2, [pc, #416]	@ (8001f48 <HAL_DMA_Start_IT+0x1f4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d04a      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a66      	ldr	r2, [pc, #408]	@ (8001f4c <HAL_DMA_Start_IT+0x1f8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d045      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a65      	ldr	r2, [pc, #404]	@ (8001f50 <HAL_DMA_Start_IT+0x1fc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d040      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a63      	ldr	r2, [pc, #396]	@ (8001f54 <HAL_DMA_Start_IT+0x200>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d03b      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a62      	ldr	r2, [pc, #392]	@ (8001f58 <HAL_DMA_Start_IT+0x204>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d036      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a60      	ldr	r2, [pc, #384]	@ (8001f5c <HAL_DMA_Start_IT+0x208>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d031      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f60 <HAL_DMA_Start_IT+0x20c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d02c      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5d      	ldr	r2, [pc, #372]	@ (8001f64 <HAL_DMA_Start_IT+0x210>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d027      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_DMA_Start_IT+0x214>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d022      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5a      	ldr	r2, [pc, #360]	@ (8001f6c <HAL_DMA_Start_IT+0x218>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01d      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a59      	ldr	r2, [pc, #356]	@ (8001f70 <HAL_DMA_Start_IT+0x21c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d018      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a57      	ldr	r2, [pc, #348]	@ (8001f74 <HAL_DMA_Start_IT+0x220>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_DMA_Start_IT+0x224>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00e      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a54      	ldr	r2, [pc, #336]	@ (8001f7c <HAL_DMA_Start_IT+0x228>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a53      	ldr	r2, [pc, #332]	@ (8001f80 <HAL_DMA_Start_IT+0x22c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <HAL_DMA_Start_IT+0xee>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a51      	ldr	r2, [pc, #324]	@ (8001f84 <HAL_DMA_Start_IT+0x230>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d108      	bne.n	8001e54 <HAL_DMA_Start_IT+0x100>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0201 	bic.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e007      	b.n	8001e64 <HAL_DMA_Start_IT+0x110>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f001 f906 	bl	800307c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a34      	ldr	r2, [pc, #208]	@ (8001f48 <HAL_DMA_Start_IT+0x1f4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d04a      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a33      	ldr	r2, [pc, #204]	@ (8001f4c <HAL_DMA_Start_IT+0x1f8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d045      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a31      	ldr	r2, [pc, #196]	@ (8001f50 <HAL_DMA_Start_IT+0x1fc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d040      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a30      	ldr	r2, [pc, #192]	@ (8001f54 <HAL_DMA_Start_IT+0x200>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d03b      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <HAL_DMA_Start_IT+0x204>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d036      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f5c <HAL_DMA_Start_IT+0x208>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d031      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f60 <HAL_DMA_Start_IT+0x20c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02c      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a2a      	ldr	r2, [pc, #168]	@ (8001f64 <HAL_DMA_Start_IT+0x210>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d027      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	@ (8001f68 <HAL_DMA_Start_IT+0x214>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d022      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <HAL_DMA_Start_IT+0x218>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d01d      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	@ (8001f70 <HAL_DMA_Start_IT+0x21c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d018      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <HAL_DMA_Start_IT+0x220>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a22      	ldr	r2, [pc, #136]	@ (8001f78 <HAL_DMA_Start_IT+0x224>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00e      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <HAL_DMA_Start_IT+0x228>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1f      	ldr	r2, [pc, #124]	@ (8001f80 <HAL_DMA_Start_IT+0x22c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_DMA_Start_IT+0x1bc>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <HAL_DMA_Start_IT+0x230>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_DMA_Start_IT+0x1c0>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_DMA_Start_IT+0x1c2>
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d036      	beq.n	8001f88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 021e 	bic.w	r2, r3, #30
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0216 	orr.w	r2, r2, #22
 8001f2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03e      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0208 	orr.w	r2, r2, #8
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e035      	b.n	8001fb4 <HAL_DMA_Start_IT+0x260>
 8001f48:	40020010 	.word	0x40020010
 8001f4c:	40020028 	.word	0x40020028
 8001f50:	40020040 	.word	0x40020040
 8001f54:	40020058 	.word	0x40020058
 8001f58:	40020070 	.word	0x40020070
 8001f5c:	40020088 	.word	0x40020088
 8001f60:	400200a0 	.word	0x400200a0
 8001f64:	400200b8 	.word	0x400200b8
 8001f68:	40020410 	.word	0x40020410
 8001f6c:	40020428 	.word	0x40020428
 8001f70:	40020440 	.word	0x40020440
 8001f74:	40020458 	.word	0x40020458
 8001f78:	40020470 	.word	0x40020470
 8001f7c:	40020488 	.word	0x40020488
 8001f80:	400204a0 	.word	0x400204a0
 8001f84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 020e 	bic.w	r2, r3, #14
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 020a 	orr.w	r2, r2, #10
 8001f9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0204 	orr.w	r2, r2, #4
 8001fb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a83      	ldr	r2, [pc, #524]	@ (80021c8 <HAL_DMA_Start_IT+0x474>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d072      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a82      	ldr	r2, [pc, #520]	@ (80021cc <HAL_DMA_Start_IT+0x478>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d06d      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a80      	ldr	r2, [pc, #512]	@ (80021d0 <HAL_DMA_Start_IT+0x47c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d068      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7f      	ldr	r2, [pc, #508]	@ (80021d4 <HAL_DMA_Start_IT+0x480>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d063      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7d      	ldr	r2, [pc, #500]	@ (80021d8 <HAL_DMA_Start_IT+0x484>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d05e      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7c      	ldr	r2, [pc, #496]	@ (80021dc <HAL_DMA_Start_IT+0x488>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d059      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a7a      	ldr	r2, [pc, #488]	@ (80021e0 <HAL_DMA_Start_IT+0x48c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d054      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a79      	ldr	r2, [pc, #484]	@ (80021e4 <HAL_DMA_Start_IT+0x490>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04f      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a77      	ldr	r2, [pc, #476]	@ (80021e8 <HAL_DMA_Start_IT+0x494>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d04a      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a76      	ldr	r2, [pc, #472]	@ (80021ec <HAL_DMA_Start_IT+0x498>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d045      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a74      	ldr	r2, [pc, #464]	@ (80021f0 <HAL_DMA_Start_IT+0x49c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d040      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a73      	ldr	r2, [pc, #460]	@ (80021f4 <HAL_DMA_Start_IT+0x4a0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d03b      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a71      	ldr	r2, [pc, #452]	@ (80021f8 <HAL_DMA_Start_IT+0x4a4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d036      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a70      	ldr	r2, [pc, #448]	@ (80021fc <HAL_DMA_Start_IT+0x4a8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d031      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6e      	ldr	r2, [pc, #440]	@ (8002200 <HAL_DMA_Start_IT+0x4ac>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02c      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6d      	ldr	r2, [pc, #436]	@ (8002204 <HAL_DMA_Start_IT+0x4b0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d027      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a6b      	ldr	r2, [pc, #428]	@ (8002208 <HAL_DMA_Start_IT+0x4b4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d022      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6a      	ldr	r2, [pc, #424]	@ (800220c <HAL_DMA_Start_IT+0x4b8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d01d      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a68      	ldr	r2, [pc, #416]	@ (8002210 <HAL_DMA_Start_IT+0x4bc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d018      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a67      	ldr	r2, [pc, #412]	@ (8002214 <HAL_DMA_Start_IT+0x4c0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a65      	ldr	r2, [pc, #404]	@ (8002218 <HAL_DMA_Start_IT+0x4c4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a64      	ldr	r2, [pc, #400]	@ (800221c <HAL_DMA_Start_IT+0x4c8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a62      	ldr	r2, [pc, #392]	@ (8002220 <HAL_DMA_Start_IT+0x4cc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_DMA_Start_IT+0x350>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a61      	ldr	r2, [pc, #388]	@ (8002224 <HAL_DMA_Start_IT+0x4d0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_DMA_Start_IT+0x354>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_DMA_Start_IT+0x356>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01a      	beq.n	80020e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a37      	ldr	r2, [pc, #220]	@ (80021c8 <HAL_DMA_Start_IT+0x474>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04a      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a36      	ldr	r2, [pc, #216]	@ (80021cc <HAL_DMA_Start_IT+0x478>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d045      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a34      	ldr	r2, [pc, #208]	@ (80021d0 <HAL_DMA_Start_IT+0x47c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d040      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a33      	ldr	r2, [pc, #204]	@ (80021d4 <HAL_DMA_Start_IT+0x480>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d03b      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a31      	ldr	r2, [pc, #196]	@ (80021d8 <HAL_DMA_Start_IT+0x484>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d036      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <HAL_DMA_Start_IT+0x488>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d031      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2e      	ldr	r2, [pc, #184]	@ (80021e0 <HAL_DMA_Start_IT+0x48c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d02c      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2d      	ldr	r2, [pc, #180]	@ (80021e4 <HAL_DMA_Start_IT+0x490>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d027      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2b      	ldr	r2, [pc, #172]	@ (80021e8 <HAL_DMA_Start_IT+0x494>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d022      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2a      	ldr	r2, [pc, #168]	@ (80021ec <HAL_DMA_Start_IT+0x498>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d01d      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a28      	ldr	r2, [pc, #160]	@ (80021f0 <HAL_DMA_Start_IT+0x49c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d018      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <HAL_DMA_Start_IT+0x4a0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a25      	ldr	r2, [pc, #148]	@ (80021f8 <HAL_DMA_Start_IT+0x4a4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00e      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a24      	ldr	r2, [pc, #144]	@ (80021fc <HAL_DMA_Start_IT+0x4a8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a22      	ldr	r2, [pc, #136]	@ (8002200 <HAL_DMA_Start_IT+0x4ac>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_DMA_Start_IT+0x430>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <HAL_DMA_Start_IT+0x4b0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <HAL_DMA_Start_IT+0x442>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e012      	b.n	80021bc <HAL_DMA_Start_IT+0x468>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e009      	b.n	80021bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020010 	.word	0x40020010
 80021cc:	40020028 	.word	0x40020028
 80021d0:	40020040 	.word	0x40020040
 80021d4:	40020058 	.word	0x40020058
 80021d8:	40020070 	.word	0x40020070
 80021dc:	40020088 	.word	0x40020088
 80021e0:	400200a0 	.word	0x400200a0
 80021e4:	400200b8 	.word	0x400200b8
 80021e8:	40020410 	.word	0x40020410
 80021ec:	40020428 	.word	0x40020428
 80021f0:	40020440 	.word	0x40020440
 80021f4:	40020458 	.word	0x40020458
 80021f8:	40020470 	.word	0x40020470
 80021fc:	40020488 	.word	0x40020488
 8002200:	400204a0 	.word	0x400204a0
 8002204:	400204b8 	.word	0x400204b8
 8002208:	58025408 	.word	0x58025408
 800220c:	5802541c 	.word	0x5802541c
 8002210:	58025430 	.word	0x58025430
 8002214:	58025444 	.word	0x58025444
 8002218:	58025458 	.word	0x58025458
 800221c:	5802546c 	.word	0x5802546c
 8002220:	58025480 	.word	0x58025480
 8002224:	58025494 	.word	0x58025494

08002228 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002234:	4b67      	ldr	r3, [pc, #412]	@ (80023d4 <HAL_DMA_IRQHandler+0x1ac>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a67      	ldr	r2, [pc, #412]	@ (80023d8 <HAL_DMA_IRQHandler+0x1b0>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5f      	ldr	r2, [pc, #380]	@ (80023dc <HAL_DMA_IRQHandler+0x1b4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d04a      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5d      	ldr	r2, [pc, #372]	@ (80023e0 <HAL_DMA_IRQHandler+0x1b8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d045      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5c      	ldr	r2, [pc, #368]	@ (80023e4 <HAL_DMA_IRQHandler+0x1bc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d040      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5a      	ldr	r2, [pc, #360]	@ (80023e8 <HAL_DMA_IRQHandler+0x1c0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d03b      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a59      	ldr	r2, [pc, #356]	@ (80023ec <HAL_DMA_IRQHandler+0x1c4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d036      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a57      	ldr	r2, [pc, #348]	@ (80023f0 <HAL_DMA_IRQHandler+0x1c8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a56      	ldr	r2, [pc, #344]	@ (80023f4 <HAL_DMA_IRQHandler+0x1cc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d02c      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a54      	ldr	r2, [pc, #336]	@ (80023f8 <HAL_DMA_IRQHandler+0x1d0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d027      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a53      	ldr	r2, [pc, #332]	@ (80023fc <HAL_DMA_IRQHandler+0x1d4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a51      	ldr	r2, [pc, #324]	@ (8002400 <HAL_DMA_IRQHandler+0x1d8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01d      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a50      	ldr	r2, [pc, #320]	@ (8002404 <HAL_DMA_IRQHandler+0x1dc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002408 <HAL_DMA_IRQHandler+0x1e0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a4d      	ldr	r2, [pc, #308]	@ (800240c <HAL_DMA_IRQHandler+0x1e4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00e      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002410 <HAL_DMA_IRQHandler+0x1e8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002414 <HAL_DMA_IRQHandler+0x1ec>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_DMA_IRQHandler+0xd2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a48      	ldr	r2, [pc, #288]	@ (8002418 <HAL_DMA_IRQHandler+0x1f0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_DMA_IRQHandler+0xd6>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_DMA_IRQHandler+0xd8>
 80022fe:	2300      	movs	r3, #0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 842b 	beq.w	8002b5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2208      	movs	r2, #8
 8002310:	409a      	lsls	r2, r3
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80a2 	beq.w	8002460 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2e      	ldr	r2, [pc, #184]	@ (80023dc <HAL_DMA_IRQHandler+0x1b4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04a      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2d      	ldr	r2, [pc, #180]	@ (80023e0 <HAL_DMA_IRQHandler+0x1b8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d045      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2b      	ldr	r2, [pc, #172]	@ (80023e4 <HAL_DMA_IRQHandler+0x1bc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d040      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <HAL_DMA_IRQHandler+0x1c0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d03b      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a28      	ldr	r2, [pc, #160]	@ (80023ec <HAL_DMA_IRQHandler+0x1c4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d036      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a27      	ldr	r2, [pc, #156]	@ (80023f0 <HAL_DMA_IRQHandler+0x1c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d031      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a25      	ldr	r2, [pc, #148]	@ (80023f4 <HAL_DMA_IRQHandler+0x1cc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02c      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a24      	ldr	r2, [pc, #144]	@ (80023f8 <HAL_DMA_IRQHandler+0x1d0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d027      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a22      	ldr	r2, [pc, #136]	@ (80023fc <HAL_DMA_IRQHandler+0x1d4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d022      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	@ (8002400 <HAL_DMA_IRQHandler+0x1d8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d01d      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1f      	ldr	r2, [pc, #124]	@ (8002404 <HAL_DMA_IRQHandler+0x1dc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d018      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1e      	ldr	r2, [pc, #120]	@ (8002408 <HAL_DMA_IRQHandler+0x1e0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1c      	ldr	r2, [pc, #112]	@ (800240c <HAL_DMA_IRQHandler+0x1e4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00e      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002410 <HAL_DMA_IRQHandler+0x1e8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a19      	ldr	r2, [pc, #100]	@ (8002414 <HAL_DMA_IRQHandler+0x1ec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_DMA_IRQHandler+0x194>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <HAL_DMA_IRQHandler+0x1f0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d12f      	bne.n	800241c <HAL_DMA_IRQHandler+0x1f4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e02e      	b.n	8002430 <HAL_DMA_IRQHandler+0x208>
 80023d2:	bf00      	nop
 80023d4:	24000000 	.word	0x24000000
 80023d8:	1b4e81b5 	.word	0x1b4e81b5
 80023dc:	40020010 	.word	0x40020010
 80023e0:	40020028 	.word	0x40020028
 80023e4:	40020040 	.word	0x40020040
 80023e8:	40020058 	.word	0x40020058
 80023ec:	40020070 	.word	0x40020070
 80023f0:	40020088 	.word	0x40020088
 80023f4:	400200a0 	.word	0x400200a0
 80023f8:	400200b8 	.word	0x400200b8
 80023fc:	40020410 	.word	0x40020410
 8002400:	40020428 	.word	0x40020428
 8002404:	40020440 	.word	0x40020440
 8002408:	40020458 	.word	0x40020458
 800240c:	40020470 	.word	0x40020470
 8002410:	40020488 	.word	0x40020488
 8002414:	400204a0 	.word	0x400204a0
 8002418:	400204b8 	.word	0x400204b8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2208      	movs	r2, #8
 800244e:	409a      	lsls	r2, r3
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d06e      	beq.n	8002554 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a69      	ldr	r2, [pc, #420]	@ (8002620 <HAL_DMA_IRQHandler+0x3f8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d04a      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a67      	ldr	r2, [pc, #412]	@ (8002624 <HAL_DMA_IRQHandler+0x3fc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d045      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a66      	ldr	r2, [pc, #408]	@ (8002628 <HAL_DMA_IRQHandler+0x400>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d040      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a64      	ldr	r2, [pc, #400]	@ (800262c <HAL_DMA_IRQHandler+0x404>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d03b      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a63      	ldr	r2, [pc, #396]	@ (8002630 <HAL_DMA_IRQHandler+0x408>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d036      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a61      	ldr	r2, [pc, #388]	@ (8002634 <HAL_DMA_IRQHandler+0x40c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d031      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a60      	ldr	r2, [pc, #384]	@ (8002638 <HAL_DMA_IRQHandler+0x410>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d02c      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a5e      	ldr	r2, [pc, #376]	@ (800263c <HAL_DMA_IRQHandler+0x414>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d027      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002640 <HAL_DMA_IRQHandler+0x418>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d022      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5b      	ldr	r2, [pc, #364]	@ (8002644 <HAL_DMA_IRQHandler+0x41c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01d      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5a      	ldr	r2, [pc, #360]	@ (8002648 <HAL_DMA_IRQHandler+0x420>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d018      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a58      	ldr	r2, [pc, #352]	@ (800264c <HAL_DMA_IRQHandler+0x424>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a57      	ldr	r2, [pc, #348]	@ (8002650 <HAL_DMA_IRQHandler+0x428>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00e      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a55      	ldr	r2, [pc, #340]	@ (8002654 <HAL_DMA_IRQHandler+0x42c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a54      	ldr	r2, [pc, #336]	@ (8002658 <HAL_DMA_IRQHandler+0x430>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2ee>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a52      	ldr	r2, [pc, #328]	@ (800265c <HAL_DMA_IRQHandler+0x434>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10a      	bne.n	800252c <HAL_DMA_IRQHandler+0x304>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e003      	b.n	8002534 <HAL_DMA_IRQHandler+0x30c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	f043 0202 	orr.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2204      	movs	r2, #4
 800255e:	409a      	lsls	r2, r3
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 808f 	beq.w	8002688 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2c      	ldr	r2, [pc, #176]	@ (8002620 <HAL_DMA_IRQHandler+0x3f8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d04a      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2a      	ldr	r2, [pc, #168]	@ (8002624 <HAL_DMA_IRQHandler+0x3fc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d045      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a29      	ldr	r2, [pc, #164]	@ (8002628 <HAL_DMA_IRQHandler+0x400>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d040      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a27      	ldr	r2, [pc, #156]	@ (800262c <HAL_DMA_IRQHandler+0x404>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d03b      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a26      	ldr	r2, [pc, #152]	@ (8002630 <HAL_DMA_IRQHandler+0x408>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d036      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a24      	ldr	r2, [pc, #144]	@ (8002634 <HAL_DMA_IRQHandler+0x40c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a23      	ldr	r2, [pc, #140]	@ (8002638 <HAL_DMA_IRQHandler+0x410>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d02c      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a21      	ldr	r2, [pc, #132]	@ (800263c <HAL_DMA_IRQHandler+0x414>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d027      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a20      	ldr	r2, [pc, #128]	@ (8002640 <HAL_DMA_IRQHandler+0x418>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <HAL_DMA_IRQHandler+0x41c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002648 <HAL_DMA_IRQHandler+0x420>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1b      	ldr	r2, [pc, #108]	@ (800264c <HAL_DMA_IRQHandler+0x424>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002650 <HAL_DMA_IRQHandler+0x428>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <HAL_DMA_IRQHandler+0x42c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a17      	ldr	r2, [pc, #92]	@ (8002658 <HAL_DMA_IRQHandler+0x430>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_DMA_IRQHandler+0x3e2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a15      	ldr	r2, [pc, #84]	@ (800265c <HAL_DMA_IRQHandler+0x434>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d12a      	bne.n	8002660 <HAL_DMA_IRQHandler+0x438>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e023      	b.n	8002668 <HAL_DMA_IRQHandler+0x440>
 8002620:	40020010 	.word	0x40020010
 8002624:	40020028 	.word	0x40020028
 8002628:	40020040 	.word	0x40020040
 800262c:	40020058 	.word	0x40020058
 8002630:	40020070 	.word	0x40020070
 8002634:	40020088 	.word	0x40020088
 8002638:	400200a0 	.word	0x400200a0
 800263c:	400200b8 	.word	0x400200b8
 8002640:	40020410 	.word	0x40020410
 8002644:	40020428 	.word	0x40020428
 8002648:	40020440 	.word	0x40020440
 800264c:	40020458 	.word	0x40020458
 8002650:	40020470 	.word	0x40020470
 8002654:	40020488 	.word	0x40020488
 8002658:	400204a0 	.word	0x400204a0
 800265c:	400204b8 	.word	0x400204b8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2204      	movs	r2, #4
 8002676:	409a      	lsls	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2210      	movs	r2, #16
 8002692:	409a      	lsls	r2, r3
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a6 	beq.w	80027ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a85      	ldr	r2, [pc, #532]	@ (80028b8 <HAL_DMA_IRQHandler+0x690>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d04a      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a83      	ldr	r2, [pc, #524]	@ (80028bc <HAL_DMA_IRQHandler+0x694>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d045      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a82      	ldr	r2, [pc, #520]	@ (80028c0 <HAL_DMA_IRQHandler+0x698>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d040      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a80      	ldr	r2, [pc, #512]	@ (80028c4 <HAL_DMA_IRQHandler+0x69c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d03b      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7f      	ldr	r2, [pc, #508]	@ (80028c8 <HAL_DMA_IRQHandler+0x6a0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d036      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7d      	ldr	r2, [pc, #500]	@ (80028cc <HAL_DMA_IRQHandler+0x6a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d031      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7c      	ldr	r2, [pc, #496]	@ (80028d0 <HAL_DMA_IRQHandler+0x6a8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d02c      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7a      	ldr	r2, [pc, #488]	@ (80028d4 <HAL_DMA_IRQHandler+0x6ac>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d027      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a79      	ldr	r2, [pc, #484]	@ (80028d8 <HAL_DMA_IRQHandler+0x6b0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d022      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a77      	ldr	r2, [pc, #476]	@ (80028dc <HAL_DMA_IRQHandler+0x6b4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01d      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a76      	ldr	r2, [pc, #472]	@ (80028e0 <HAL_DMA_IRQHandler+0x6b8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d018      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a74      	ldr	r2, [pc, #464]	@ (80028e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a73      	ldr	r2, [pc, #460]	@ (80028e8 <HAL_DMA_IRQHandler+0x6c0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00e      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a71      	ldr	r2, [pc, #452]	@ (80028ec <HAL_DMA_IRQHandler+0x6c4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d009      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a70      	ldr	r2, [pc, #448]	@ (80028f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d004      	beq.n	800273e <HAL_DMA_IRQHandler+0x516>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6e      	ldr	r2, [pc, #440]	@ (80028f4 <HAL_DMA_IRQHandler+0x6cc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10a      	bne.n	8002754 <HAL_DMA_IRQHandler+0x52c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e009      	b.n	8002768 <HAL_DMA_IRQHandler+0x540>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf14      	ite	ne
 8002762:	2301      	movne	r3, #1
 8002764:	2300      	moveq	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03e      	beq.n	80027ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2210      	movs	r2, #16
 8002776:	409a      	lsls	r2, r3
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d018      	beq.n	80027bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d108      	bne.n	80027aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d024      	beq.n	80027ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	e01f      	b.n	80027ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01b      	beq.n	80027ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e016      	b.n	80027ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0208 	bic.w	r2, r2, #8
 80027d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2220      	movs	r2, #32
 80027f4:	409a      	lsls	r2, r3
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8110 	beq.w	8002a20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2c      	ldr	r2, [pc, #176]	@ (80028b8 <HAL_DMA_IRQHandler+0x690>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d04a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2b      	ldr	r2, [pc, #172]	@ (80028bc <HAL_DMA_IRQHandler+0x694>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d045      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a29      	ldr	r2, [pc, #164]	@ (80028c0 <HAL_DMA_IRQHandler+0x698>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d040      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a28      	ldr	r2, [pc, #160]	@ (80028c4 <HAL_DMA_IRQHandler+0x69c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d03b      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a26      	ldr	r2, [pc, #152]	@ (80028c8 <HAL_DMA_IRQHandler+0x6a0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d036      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a25      	ldr	r2, [pc, #148]	@ (80028cc <HAL_DMA_IRQHandler+0x6a4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d031      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a23      	ldr	r2, [pc, #140]	@ (80028d0 <HAL_DMA_IRQHandler+0x6a8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d02c      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a22      	ldr	r2, [pc, #136]	@ (80028d4 <HAL_DMA_IRQHandler+0x6ac>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d027      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a20      	ldr	r2, [pc, #128]	@ (80028d8 <HAL_DMA_IRQHandler+0x6b0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <HAL_DMA_IRQHandler+0x6b4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01d      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <HAL_DMA_IRQHandler+0x6b8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d018      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1a      	ldr	r2, [pc, #104]	@ (80028e8 <HAL_DMA_IRQHandler+0x6c0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_DMA_IRQHandler+0x6c4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x678>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a16      	ldr	r2, [pc, #88]	@ (80028f4 <HAL_DMA_IRQHandler+0x6cc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d12b      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x6d0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	e02a      	b.n	800290c <HAL_DMA_IRQHandler+0x6e4>
 80028b6:	bf00      	nop
 80028b8:	40020010 	.word	0x40020010
 80028bc:	40020028 	.word	0x40020028
 80028c0:	40020040 	.word	0x40020040
 80028c4:	40020058 	.word	0x40020058
 80028c8:	40020070 	.word	0x40020070
 80028cc:	40020088 	.word	0x40020088
 80028d0:	400200a0 	.word	0x400200a0
 80028d4:	400200b8 	.word	0x400200b8
 80028d8:	40020410 	.word	0x40020410
 80028dc:	40020428 	.word	0x40020428
 80028e0:	40020440 	.word	0x40020440
 80028e4:	40020458 	.word	0x40020458
 80028e8:	40020470 	.word	0x40020470
 80028ec:	40020488 	.word	0x40020488
 80028f0:	400204a0 	.word	0x400204a0
 80028f4:	400204b8 	.word	0x400204b8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8087 	beq.w	8002a20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2220      	movs	r2, #32
 800291c:	409a      	lsls	r2, r3
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b04      	cmp	r3, #4
 800292c:	d139      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0216 	bic.w	r2, r2, #22
 800293c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800294c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_DMA_IRQHandler+0x736>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0208 	bic.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	223f      	movs	r2, #63	@ 0x3f
 8002978:	409a      	lsls	r2, r3
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 834a 	beq.w	800302c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
          }
          return;
 80029a0:	e344      	b.n	800302c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d018      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02c      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
 80029ce:	e027      	b.n	8002a20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d023      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
 80029e0:	e01e      	b.n	8002a20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10f      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0210 	bic.w	r2, r2, #16
 80029fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8306 	beq.w	8003036 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8088 	beq.w	8002b48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7a      	ldr	r2, [pc, #488]	@ (8002c30 <HAL_DMA_IRQHandler+0xa08>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a79      	ldr	r2, [pc, #484]	@ (8002c34 <HAL_DMA_IRQHandler+0xa0c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d045      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a77      	ldr	r2, [pc, #476]	@ (8002c38 <HAL_DMA_IRQHandler+0xa10>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a76      	ldr	r2, [pc, #472]	@ (8002c3c <HAL_DMA_IRQHandler+0xa14>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d03b      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a74      	ldr	r2, [pc, #464]	@ (8002c40 <HAL_DMA_IRQHandler+0xa18>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d036      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a73      	ldr	r2, [pc, #460]	@ (8002c44 <HAL_DMA_IRQHandler+0xa1c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a71      	ldr	r2, [pc, #452]	@ (8002c48 <HAL_DMA_IRQHandler+0xa20>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02c      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a70      	ldr	r2, [pc, #448]	@ (8002c4c <HAL_DMA_IRQHandler+0xa24>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d027      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6e      	ldr	r2, [pc, #440]	@ (8002c50 <HAL_DMA_IRQHandler+0xa28>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c54 <HAL_DMA_IRQHandler+0xa2c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8002c58 <HAL_DMA_IRQHandler+0xa30>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6a      	ldr	r2, [pc, #424]	@ (8002c5c <HAL_DMA_IRQHandler+0xa34>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a68      	ldr	r2, [pc, #416]	@ (8002c60 <HAL_DMA_IRQHandler+0xa38>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a67      	ldr	r2, [pc, #412]	@ (8002c64 <HAL_DMA_IRQHandler+0xa3c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a65      	ldr	r2, [pc, #404]	@ (8002c68 <HAL_DMA_IRQHandler+0xa40>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x8b8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a64      	ldr	r2, [pc, #400]	@ (8002c6c <HAL_DMA_IRQHandler+0xa44>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <HAL_DMA_IRQHandler+0x8ca>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e007      	b.n	8002b02 <HAL_DMA_IRQHandler+0x8da>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d307      	bcc.n	8002b1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f2      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x8da>
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002b1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2203      	movs	r2, #3
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002b36:	e003      	b.n	8002b40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8272 	beq.w	8003036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
 8002b5a:	e26c      	b.n	8003036 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a43      	ldr	r2, [pc, #268]	@ (8002c70 <HAL_DMA_IRQHandler+0xa48>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d022      	beq.n	8002bac <HAL_DMA_IRQHandler+0x984>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a42      	ldr	r2, [pc, #264]	@ (8002c74 <HAL_DMA_IRQHandler+0xa4c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01d      	beq.n	8002bac <HAL_DMA_IRQHandler+0x984>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <HAL_DMA_IRQHandler+0xa50>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d018      	beq.n	8002bac <HAL_DMA_IRQHandler+0x984>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c7c <HAL_DMA_IRQHandler+0xa54>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_DMA_IRQHandler+0x984>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3d      	ldr	r2, [pc, #244]	@ (8002c80 <HAL_DMA_IRQHandler+0xa58>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_DMA_IRQHandler+0x984>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3c      	ldr	r2, [pc, #240]	@ (8002c84 <HAL_DMA_IRQHandler+0xa5c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_DMA_IRQHandler+0x984>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c88 <HAL_DMA_IRQHandler+0xa60>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_DMA_IRQHandler+0x984>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a39      	ldr	r2, [pc, #228]	@ (8002c8c <HAL_DMA_IRQHandler+0xa64>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x988>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_DMA_IRQHandler+0x98a>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 823f 	beq.w	8003036 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2204      	movs	r2, #4
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80cd 	beq.w	8002d70 <HAL_DMA_IRQHandler+0xb48>
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80c7 	beq.w	8002d70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2204      	movs	r2, #4
 8002bec:	409a      	lsls	r2, r3
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d049      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8210 	beq.w	8003030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c18:	e20a      	b.n	8003030 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8206 	beq.w	8003030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c2c:	e200      	b.n	8003030 <HAL_DMA_IRQHandler+0xe08>
 8002c2e:	bf00      	nop
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8
 8002c70:	58025408 	.word	0x58025408
 8002c74:	5802541c 	.word	0x5802541c
 8002c78:	58025430 	.word	0x58025430
 8002c7c:	58025444 	.word	0x58025444
 8002c80:	58025458 	.word	0x58025458
 8002c84:	5802546c 	.word	0x5802546c
 8002c88:	58025480 	.word	0x58025480
 8002c8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d160      	bne.n	8002d5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7f      	ldr	r2, [pc, #508]	@ (8002e9c <HAL_DMA_IRQHandler+0xc74>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d04a      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea0 <HAL_DMA_IRQHandler+0xc78>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d045      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d040      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a7a      	ldr	r2, [pc, #488]	@ (8002ea8 <HAL_DMA_IRQHandler+0xc80>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d03b      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a79      	ldr	r2, [pc, #484]	@ (8002eac <HAL_DMA_IRQHandler+0xc84>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d036      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a77      	ldr	r2, [pc, #476]	@ (8002eb0 <HAL_DMA_IRQHandler+0xc88>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d031      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a76      	ldr	r2, [pc, #472]	@ (8002eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d02c      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a74      	ldr	r2, [pc, #464]	@ (8002eb8 <HAL_DMA_IRQHandler+0xc90>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d027      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a73      	ldr	r2, [pc, #460]	@ (8002ebc <HAL_DMA_IRQHandler+0xc94>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a71      	ldr	r2, [pc, #452]	@ (8002ec0 <HAL_DMA_IRQHandler+0xc98>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01d      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a70      	ldr	r2, [pc, #448]	@ (8002ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec8 <HAL_DMA_IRQHandler+0xca0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6d      	ldr	r2, [pc, #436]	@ (8002ecc <HAL_DMA_IRQHandler+0xca4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00e      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6b      	ldr	r2, [pc, #428]	@ (8002ed0 <HAL_DMA_IRQHandler+0xca8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d009      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed4 <HAL_DMA_IRQHandler+0xcac>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d004      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xb12>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a68      	ldr	r2, [pc, #416]	@ (8002ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d108      	bne.n	8002d4c <HAL_DMA_IRQHandler+0xb24>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0208 	bic.w	r2, r2, #8
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e007      	b.n	8002d5c <HAL_DMA_IRQHandler+0xb34>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8165 	beq.w	8003030 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d6e:	e15f      	b.n	8003030 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	2202      	movs	r2, #2
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80c5 	beq.w	8002f10 <HAL_DMA_IRQHandler+0xce8>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80bf 	beq.w	8002f10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d018      	beq.n	8002dde <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 813a 	beq.w	8003034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dc8:	e134      	b.n	8003034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8130 	beq.w	8003034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ddc:	e12a      	b.n	8003034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 8089 	bne.w	8002efc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	@ (8002e9c <HAL_DMA_IRQHandler+0xc74>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d04a      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a29      	ldr	r2, [pc, #164]	@ (8002ea0 <HAL_DMA_IRQHandler+0xc78>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d045      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a28      	ldr	r2, [pc, #160]	@ (8002ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d040      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ea8 <HAL_DMA_IRQHandler+0xc80>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d03b      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a25      	ldr	r2, [pc, #148]	@ (8002eac <HAL_DMA_IRQHandler+0xc84>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d036      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <HAL_DMA_IRQHandler+0xc88>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d031      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a22      	ldr	r2, [pc, #136]	@ (8002eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d02c      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a20      	ldr	r2, [pc, #128]	@ (8002eb8 <HAL_DMA_IRQHandler+0xc90>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d027      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <HAL_DMA_IRQHandler+0xc94>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d022      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec0 <HAL_DMA_IRQHandler+0xc98>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01d      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d018      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec8 <HAL_DMA_IRQHandler+0xca0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a19      	ldr	r2, [pc, #100]	@ (8002ecc <HAL_DMA_IRQHandler+0xca4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <HAL_DMA_IRQHandler+0xca8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a16      	ldr	r2, [pc, #88]	@ (8002ed4 <HAL_DMA_IRQHandler+0xcac>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xc62>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a14      	ldr	r2, [pc, #80]	@ (8002ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d128      	bne.n	8002edc <HAL_DMA_IRQHandler+0xcb4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0214 	bic.w	r2, r2, #20
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e027      	b.n	8002eec <HAL_DMA_IRQHandler+0xcc4>
 8002e9c:	40020010 	.word	0x40020010
 8002ea0:	40020028 	.word	0x40020028
 8002ea4:	40020040 	.word	0x40020040
 8002ea8:	40020058 	.word	0x40020058
 8002eac:	40020070 	.word	0x40020070
 8002eb0:	40020088 	.word	0x40020088
 8002eb4:	400200a0 	.word	0x400200a0
 8002eb8:	400200b8 	.word	0x400200b8
 8002ebc:	40020410 	.word	0x40020410
 8002ec0:	40020428 	.word	0x40020428
 8002ec4:	40020440 	.word	0x40020440
 8002ec8:	40020458 	.word	0x40020458
 8002ecc:	40020470 	.word	0x40020470
 8002ed0:	40020488 	.word	0x40020488
 8002ed4:	400204a0 	.word	0x400204a0
 8002ed8:	400204b8 	.word	0x400204b8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020a 	bic.w	r2, r2, #10
 8002eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f0e:	e091      	b.n	8003034 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2208      	movs	r2, #8
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8088 	beq.w	8003036 <HAL_DMA_IRQHandler+0xe0e>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8082 	beq.w	8003036 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a41      	ldr	r2, [pc, #260]	@ (800303c <HAL_DMA_IRQHandler+0xe14>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3f      	ldr	r2, [pc, #252]	@ (8003040 <HAL_DMA_IRQHandler+0xe18>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003044 <HAL_DMA_IRQHandler+0xe1c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a3c      	ldr	r2, [pc, #240]	@ (8003048 <HAL_DMA_IRQHandler+0xe20>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800304c <HAL_DMA_IRQHandler+0xe24>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a39      	ldr	r2, [pc, #228]	@ (8003050 <HAL_DMA_IRQHandler+0xe28>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a38      	ldr	r2, [pc, #224]	@ (8003054 <HAL_DMA_IRQHandler+0xe2c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a36      	ldr	r2, [pc, #216]	@ (8003058 <HAL_DMA_IRQHandler+0xe30>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a35      	ldr	r2, [pc, #212]	@ (800305c <HAL_DMA_IRQHandler+0xe34>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a33      	ldr	r2, [pc, #204]	@ (8003060 <HAL_DMA_IRQHandler+0xe38>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a32      	ldr	r2, [pc, #200]	@ (8003064 <HAL_DMA_IRQHandler+0xe3c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a30      	ldr	r2, [pc, #192]	@ (8003068 <HAL_DMA_IRQHandler+0xe40>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2f      	ldr	r2, [pc, #188]	@ (800306c <HAL_DMA_IRQHandler+0xe44>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003070 <HAL_DMA_IRQHandler+0xe48>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003074 <HAL_DMA_IRQHandler+0xe4c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdaa>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003078 <HAL_DMA_IRQHandler+0xe50>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0xdbc>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 021c 	bic.w	r2, r2, #28
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e007      	b.n	8002ff4 <HAL_DMA_IRQHandler+0xdcc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 020e 	bic.w	r2, r2, #14
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	4798      	blx	r3
 800302a:	e004      	b.n	8003036 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800302c:	bf00      	nop
 800302e:	e002      	b.n	8003036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003034:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003036:	3728      	adds	r7, #40	@ 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40020010 	.word	0x40020010
 8003040:	40020028 	.word	0x40020028
 8003044:	40020040 	.word	0x40020040
 8003048:	40020058 	.word	0x40020058
 800304c:	40020070 	.word	0x40020070
 8003050:	40020088 	.word	0x40020088
 8003054:	400200a0 	.word	0x400200a0
 8003058:	400200b8 	.word	0x400200b8
 800305c:	40020410 	.word	0x40020410
 8003060:	40020428 	.word	0x40020428
 8003064:	40020440 	.word	0x40020440
 8003068:	40020458 	.word	0x40020458
 800306c:	40020470 	.word	0x40020470
 8003070:	40020488 	.word	0x40020488
 8003074:	400204a0 	.word	0x400204a0
 8003078:	400204b8 	.word	0x400204b8

0800307c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7f      	ldr	r2, [pc, #508]	@ (8003298 <DMA_SetConfig+0x21c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d072      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a7d      	ldr	r2, [pc, #500]	@ (800329c <DMA_SetConfig+0x220>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d06d      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7c      	ldr	r2, [pc, #496]	@ (80032a0 <DMA_SetConfig+0x224>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d068      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a7a      	ldr	r2, [pc, #488]	@ (80032a4 <DMA_SetConfig+0x228>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d063      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a79      	ldr	r2, [pc, #484]	@ (80032a8 <DMA_SetConfig+0x22c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d05e      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a77      	ldr	r2, [pc, #476]	@ (80032ac <DMA_SetConfig+0x230>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d059      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a76      	ldr	r2, [pc, #472]	@ (80032b0 <DMA_SetConfig+0x234>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d054      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a74      	ldr	r2, [pc, #464]	@ (80032b4 <DMA_SetConfig+0x238>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d04f      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a73      	ldr	r2, [pc, #460]	@ (80032b8 <DMA_SetConfig+0x23c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04a      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a71      	ldr	r2, [pc, #452]	@ (80032bc <DMA_SetConfig+0x240>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d045      	beq.n	8003186 <DMA_SetConfig+0x10a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a70      	ldr	r2, [pc, #448]	@ (80032c0 <DMA_SetConfig+0x244>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6e      	ldr	r2, [pc, #440]	@ (80032c4 <DMA_SetConfig+0x248>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d03b      	beq.n	8003186 <DMA_SetConfig+0x10a>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6d      	ldr	r2, [pc, #436]	@ (80032c8 <DMA_SetConfig+0x24c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d036      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6b      	ldr	r2, [pc, #428]	@ (80032cc <DMA_SetConfig+0x250>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6a      	ldr	r2, [pc, #424]	@ (80032d0 <DMA_SetConfig+0x254>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02c      	beq.n	8003186 <DMA_SetConfig+0x10a>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a68      	ldr	r2, [pc, #416]	@ (80032d4 <DMA_SetConfig+0x258>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a67      	ldr	r2, [pc, #412]	@ (80032d8 <DMA_SetConfig+0x25c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	@ (80032dc <DMA_SetConfig+0x260>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01d      	beq.n	8003186 <DMA_SetConfig+0x10a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a64      	ldr	r2, [pc, #400]	@ (80032e0 <DMA_SetConfig+0x264>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a62      	ldr	r2, [pc, #392]	@ (80032e4 <DMA_SetConfig+0x268>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <DMA_SetConfig+0x10a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a61      	ldr	r2, [pc, #388]	@ (80032e8 <DMA_SetConfig+0x26c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5f      	ldr	r2, [pc, #380]	@ (80032ec <DMA_SetConfig+0x270>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <DMA_SetConfig+0x10a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5e      	ldr	r2, [pc, #376]	@ (80032f0 <DMA_SetConfig+0x274>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <DMA_SetConfig+0x10a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5c      	ldr	r2, [pc, #368]	@ (80032f4 <DMA_SetConfig+0x278>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <DMA_SetConfig+0x10e>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <DMA_SetConfig+0x110>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003198:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a39      	ldr	r2, [pc, #228]	@ (8003298 <DMA_SetConfig+0x21c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d04a      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a38      	ldr	r2, [pc, #224]	@ (800329c <DMA_SetConfig+0x220>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d045      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a36      	ldr	r2, [pc, #216]	@ (80032a0 <DMA_SetConfig+0x224>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d040      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <DMA_SetConfig+0x228>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d03b      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a33      	ldr	r2, [pc, #204]	@ (80032a8 <DMA_SetConfig+0x22c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d036      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a32      	ldr	r2, [pc, #200]	@ (80032ac <DMA_SetConfig+0x230>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d031      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a30      	ldr	r2, [pc, #192]	@ (80032b0 <DMA_SetConfig+0x234>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02c      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2f      	ldr	r2, [pc, #188]	@ (80032b4 <DMA_SetConfig+0x238>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d027      	beq.n	800324c <DMA_SetConfig+0x1d0>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2d      	ldr	r2, [pc, #180]	@ (80032b8 <DMA_SetConfig+0x23c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d022      	beq.n	800324c <DMA_SetConfig+0x1d0>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2c      	ldr	r2, [pc, #176]	@ (80032bc <DMA_SetConfig+0x240>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d01d      	beq.n	800324c <DMA_SetConfig+0x1d0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <DMA_SetConfig+0x244>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d018      	beq.n	800324c <DMA_SetConfig+0x1d0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <DMA_SetConfig+0x248>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <DMA_SetConfig+0x1d0>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a27      	ldr	r2, [pc, #156]	@ (80032c8 <DMA_SetConfig+0x24c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00e      	beq.n	800324c <DMA_SetConfig+0x1d0>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a26      	ldr	r2, [pc, #152]	@ (80032cc <DMA_SetConfig+0x250>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <DMA_SetConfig+0x1d0>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <DMA_SetConfig+0x254>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <DMA_SetConfig+0x1d0>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a23      	ldr	r2, [pc, #140]	@ (80032d4 <DMA_SetConfig+0x258>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <DMA_SetConfig+0x1d4>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <DMA_SetConfig+0x1d6>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d059      	beq.n	800330a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	223f      	movs	r2, #63	@ 0x3f
 8003260:	409a      	lsls	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003274:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b40      	cmp	r3, #64	@ 0x40
 8003284:	d138      	bne.n	80032f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003296:	e086      	b.n	80033a6 <DMA_SetConfig+0x32a>
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
 80032d8:	58025408 	.word	0x58025408
 80032dc:	5802541c 	.word	0x5802541c
 80032e0:	58025430 	.word	0x58025430
 80032e4:	58025444 	.word	0x58025444
 80032e8:	58025458 	.word	0x58025458
 80032ec:	5802546c 	.word	0x5802546c
 80032f0:	58025480 	.word	0x58025480
 80032f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]
}
 8003308:	e04d      	b.n	80033a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a29      	ldr	r2, [pc, #164]	@ (80033b4 <DMA_SetConfig+0x338>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <DMA_SetConfig+0x2de>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <DMA_SetConfig+0x33c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <DMA_SetConfig+0x2de>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a26      	ldr	r2, [pc, #152]	@ (80033bc <DMA_SetConfig+0x340>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <DMA_SetConfig+0x2de>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a24      	ldr	r2, [pc, #144]	@ (80033c0 <DMA_SetConfig+0x344>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <DMA_SetConfig+0x2de>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a23      	ldr	r2, [pc, #140]	@ (80033c4 <DMA_SetConfig+0x348>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <DMA_SetConfig+0x2de>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <DMA_SetConfig+0x34c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <DMA_SetConfig+0x2de>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a20      	ldr	r2, [pc, #128]	@ (80033cc <DMA_SetConfig+0x350>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <DMA_SetConfig+0x2de>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <DMA_SetConfig+0x354>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <DMA_SetConfig+0x2e2>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <DMA_SetConfig+0x2e4>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d020      	beq.n	80033a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b40      	cmp	r3, #64	@ 0x40
 8003382:	d108      	bne.n	8003396 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	e007      	b.n	80033a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	60da      	str	r2, [r3, #12]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	58025408 	.word	0x58025408
 80033b8:	5802541c 	.word	0x5802541c
 80033bc:	58025430 	.word	0x58025430
 80033c0:	58025444 	.word	0x58025444
 80033c4:	58025458 	.word	0x58025458
 80033c8:	5802546c 	.word	0x5802546c
 80033cc:	58025480 	.word	0x58025480
 80033d0:	58025494 	.word	0x58025494

080033d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <DMA_CalcBaseAndBitshift+0x118>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04a      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a41      	ldr	r2, [pc, #260]	@ (80034f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d045      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a3f      	ldr	r2, [pc, #252]	@ (80034f4 <DMA_CalcBaseAndBitshift+0x120>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d040      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3e      	ldr	r2, [pc, #248]	@ (80034f8 <DMA_CalcBaseAndBitshift+0x124>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d03b      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3c      	ldr	r2, [pc, #240]	@ (80034fc <DMA_CalcBaseAndBitshift+0x128>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d036      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3b      	ldr	r2, [pc, #236]	@ (8003500 <DMA_CalcBaseAndBitshift+0x12c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d031      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a39      	ldr	r2, [pc, #228]	@ (8003504 <DMA_CalcBaseAndBitshift+0x130>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02c      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a38      	ldr	r2, [pc, #224]	@ (8003508 <DMA_CalcBaseAndBitshift+0x134>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d027      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a36      	ldr	r2, [pc, #216]	@ (800350c <DMA_CalcBaseAndBitshift+0x138>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a35      	ldr	r2, [pc, #212]	@ (8003510 <DMA_CalcBaseAndBitshift+0x13c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d01d      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a33      	ldr	r2, [pc, #204]	@ (8003514 <DMA_CalcBaseAndBitshift+0x140>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a32      	ldr	r2, [pc, #200]	@ (8003518 <DMA_CalcBaseAndBitshift+0x144>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a30      	ldr	r2, [pc, #192]	@ (800351c <DMA_CalcBaseAndBitshift+0x148>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2f      	ldr	r2, [pc, #188]	@ (8003520 <DMA_CalcBaseAndBitshift+0x14c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2d      	ldr	r2, [pc, #180]	@ (8003524 <DMA_CalcBaseAndBitshift+0x150>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <DMA_CalcBaseAndBitshift+0xa8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2c      	ldr	r2, [pc, #176]	@ (8003528 <DMA_CalcBaseAndBitshift+0x154>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <DMA_CalcBaseAndBitshift+0xac>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <DMA_CalcBaseAndBitshift+0xae>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d024      	beq.n	80034d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3b10      	subs	r3, #16
 800348e:	4a27      	ldr	r2, [pc, #156]	@ (800352c <DMA_CalcBaseAndBitshift+0x158>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	4a24      	ldr	r2, [pc, #144]	@ (8003530 <DMA_CalcBaseAndBitshift+0x15c>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d908      	bls.n	80034c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003534 <DMA_CalcBaseAndBitshift+0x160>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	1d1a      	adds	r2, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80034be:	e00d      	b.n	80034dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <DMA_CalcBaseAndBitshift+0x160>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ce:	e005      	b.n	80034dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40020010 	.word	0x40020010
 80034f0:	40020028 	.word	0x40020028
 80034f4:	40020040 	.word	0x40020040
 80034f8:	40020058 	.word	0x40020058
 80034fc:	40020070 	.word	0x40020070
 8003500:	40020088 	.word	0x40020088
 8003504:	400200a0 	.word	0x400200a0
 8003508:	400200b8 	.word	0x400200b8
 800350c:	40020410 	.word	0x40020410
 8003510:	40020428 	.word	0x40020428
 8003514:	40020440 	.word	0x40020440
 8003518:	40020458 	.word	0x40020458
 800351c:	40020470 	.word	0x40020470
 8003520:	40020488 	.word	0x40020488
 8003524:	400204a0 	.word	0x400204a0
 8003528:	400204b8 	.word	0x400204b8
 800352c:	aaaaaaab 	.word	0xaaaaaaab
 8003530:	0800ce74 	.word	0x0800ce74
 8003534:	fffffc00 	.word	0xfffffc00

08003538 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d120      	bne.n	800358e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	2b03      	cmp	r3, #3
 8003552:	d858      	bhi.n	8003606 <DMA_CheckFifoParam+0xce>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <DMA_CheckFifoParam+0x24>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	0800356d 	.word	0x0800356d
 8003560:	0800357f 	.word	0x0800357f
 8003564:	0800356d 	.word	0x0800356d
 8003568:	08003607 	.word	0x08003607
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d048      	beq.n	800360a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800357c:	e045      	b.n	800360a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003586:	d142      	bne.n	800360e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800358c:	e03f      	b.n	800360e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003596:	d123      	bne.n	80035e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	2b03      	cmp	r3, #3
 800359e:	d838      	bhi.n	8003612 <DMA_CheckFifoParam+0xda>
 80035a0:	a201      	add	r2, pc, #4	@ (adr r2, 80035a8 <DMA_CheckFifoParam+0x70>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035b9 	.word	0x080035b9
 80035ac:	080035bf 	.word	0x080035bf
 80035b0:	080035b9 	.word	0x080035b9
 80035b4:	080035d1 	.word	0x080035d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
        break;
 80035bc:	e030      	b.n	8003620 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d025      	beq.n	8003616 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035ce:	e022      	b.n	8003616 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035d8:	d11f      	bne.n	800361a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035de:	e01c      	b.n	800361a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d902      	bls.n	80035ee <DMA_CheckFifoParam+0xb6>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d003      	beq.n	80035f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80035ec:	e018      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
        break;
 80035f2:	e015      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
    break;
 8003604:	e00b      	b.n	800361e <DMA_CheckFifoParam+0xe6>
        break;
 8003606:	bf00      	nop
 8003608:	e00a      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
        break;
 800360a:	bf00      	nop
 800360c:	e008      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
        break;
 800360e:	bf00      	nop
 8003610:	e006      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
        break;
 8003612:	bf00      	nop
 8003614:	e004      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
        break;
 8003616:	bf00      	nop
 8003618:	e002      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
        break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <DMA_CheckFifoParam+0xe8>
    break;
 800361e:	bf00      	nop
    }
  }

  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop

08003630 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a38      	ldr	r2, [pc, #224]	@ (8003724 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d022      	beq.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a36      	ldr	r2, [pc, #216]	@ (8003728 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01d      	beq.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a35      	ldr	r2, [pc, #212]	@ (800372c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d018      	beq.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a33      	ldr	r2, [pc, #204]	@ (8003730 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a32      	ldr	r2, [pc, #200]	@ (8003734 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00e      	beq.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a30      	ldr	r2, [pc, #192]	@ (8003738 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d009      	beq.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2f      	ldr	r2, [pc, #188]	@ (800373c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2d      	ldr	r2, [pc, #180]	@ (8003740 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003692:	2300      	movs	r3, #0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01a      	beq.n	80036ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3b08      	subs	r3, #8
 80036a0:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4b26      	ldr	r3, [pc, #152]	@ (8003748 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	461a      	mov	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a24      	ldr	r2, [pc, #144]	@ (800374c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80036bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2201      	movs	r2, #1
 80036c6:	409a      	lsls	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80036cc:	e024      	b.n	8003718 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3b10      	subs	r3, #16
 80036d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003750 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003754 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d806      	bhi.n	80036f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d902      	bls.n	80036f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3308      	adds	r3, #8
 80036f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4b18      	ldr	r3, [pc, #96]	@ (800375c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003708:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2201      	movs	r2, #1
 8003712:	409a      	lsls	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	58025408 	.word	0x58025408
 8003728:	5802541c 	.word	0x5802541c
 800372c:	58025430 	.word	0x58025430
 8003730:	58025444 	.word	0x58025444
 8003734:	58025458 	.word	0x58025458
 8003738:	5802546c 	.word	0x5802546c
 800373c:	58025480 	.word	0x58025480
 8003740:	58025494 	.word	0x58025494
 8003744:	cccccccd 	.word	0xcccccccd
 8003748:	16009600 	.word	0x16009600
 800374c:	58025880 	.word	0x58025880
 8003750:	aaaaaaab 	.word	0xaaaaaaab
 8003754:	400204b8 	.word	0x400204b8
 8003758:	4002040f 	.word	0x4002040f
 800375c:	10008200 	.word	0x10008200
 8003760:	40020880 	.word	0x40020880

08003764 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d04a      	beq.n	8003810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d847      	bhi.n	8003810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a25      	ldr	r2, [pc, #148]	@ (800381c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a24      	ldr	r2, [pc, #144]	@ (8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01d      	beq.n	80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a22      	ldr	r2, [pc, #136]	@ (8003824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	@ (8003828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	@ (800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4b17      	ldr	r3, [pc, #92]	@ (800383c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a15      	ldr	r2, [pc, #84]	@ (8003840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80037ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80037ee:	e009      	b.n	8003804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4b14      	ldr	r3, [pc, #80]	@ (8003844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a11      	ldr	r2, [pc, #68]	@ (8003848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003802:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3b01      	subs	r3, #1
 8003808:	2201      	movs	r2, #1
 800380a:	409a      	lsls	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	58025408 	.word	0x58025408
 8003820:	5802541c 	.word	0x5802541c
 8003824:	58025430 	.word	0x58025430
 8003828:	58025444 	.word	0x58025444
 800382c:	58025458 	.word	0x58025458
 8003830:	5802546c 	.word	0x5802546c
 8003834:	58025480 	.word	0x58025480
 8003838:	58025494 	.word	0x58025494
 800383c:	1600963f 	.word	0x1600963f
 8003840:	58025940 	.word	0x58025940
 8003844:	1000823f 	.word	0x1000823f
 8003848:	40020940 	.word	0x40020940

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800385a:	4b86      	ldr	r3, [pc, #536]	@ (8003a74 <HAL_GPIO_Init+0x228>)
 800385c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800385e:	e18c      	b.n	8003b7a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 817e 	beq.w	8003b74 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d005      	beq.n	8003890 <HAL_GPIO_Init+0x44>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d130      	bne.n	80038f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038c6:	2201      	movs	r2, #1
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0201 	and.w	r2, r3, #1
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d017      	beq.n	800392e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d123      	bne.n	8003982 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d8 	beq.w	8003b74 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a78 <HAL_GPIO_Init+0x22c>)
 80039c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <HAL_GPIO_Init+0x22c>)
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039d4:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <HAL_GPIO_Init+0x22c>)
 80039d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_GPIO_Init+0x230>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <HAL_GPIO_Init+0x234>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d04a      	beq.n	8003aa4 <HAL_GPIO_Init+0x258>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <HAL_GPIO_Init+0x238>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02b      	beq.n	8003a6e <HAL_GPIO_Init+0x222>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <HAL_GPIO_Init+0x23c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d025      	beq.n	8003a6a <HAL_GPIO_Init+0x21e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <HAL_GPIO_Init+0x240>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01f      	beq.n	8003a66 <HAL_GPIO_Init+0x21a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <HAL_GPIO_Init+0x244>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_GPIO_Init+0x216>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <HAL_GPIO_Init+0x248>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_Init+0x212>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <HAL_GPIO_Init+0x24c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00d      	beq.n	8003a5a <HAL_GPIO_Init+0x20e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a16      	ldr	r2, [pc, #88]	@ (8003a9c <HAL_GPIO_Init+0x250>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <HAL_GPIO_Init+0x20a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a15      	ldr	r2, [pc, #84]	@ (8003aa0 <HAL_GPIO_Init+0x254>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_GPIO_Init+0x206>
 8003a4e:	2309      	movs	r3, #9
 8003a50:	e029      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a52:	230a      	movs	r3, #10
 8003a54:	e027      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a56:	2307      	movs	r3, #7
 8003a58:	e025      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e023      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a5e:	2305      	movs	r3, #5
 8003a60:	e021      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e01f      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e01d      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e01b      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e019      	b.n	8003aa6 <HAL_GPIO_Init+0x25a>
 8003a72:	bf00      	nop
 8003a74:	58000080 	.word	0x58000080
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	58000400 	.word	0x58000400
 8003a80:	58020000 	.word	0x58020000
 8003a84:	58020400 	.word	0x58020400
 8003a88:	58020800 	.word	0x58020800
 8003a8c:	58020c00 	.word	0x58020c00
 8003a90:	58021000 	.word	0x58021000
 8003a94:	58021400 	.word	0x58021400
 8003a98:	58021800 	.word	0x58021800
 8003a9c:	58021c00 	.word	0x58021c00
 8003aa0:	58022400 	.word	0x58022400
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	f002 0203 	and.w	r2, r2, #3
 8003aac:	0092      	lsls	r2, r2, #2
 8003aae:	4093      	lsls	r3, r2
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab6:	4938      	ldr	r1, [pc, #224]	@ (8003b98 <HAL_GPIO_Init+0x34c>)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	3302      	adds	r3, #2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f47f ae6b 	bne.w	8003860 <HAL_GPIO_Init+0x14>
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	3724      	adds	r7, #36	@ 0x24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	58000400 	.word	0x58000400

08003b9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e0fe      	b.n	8003dac <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f008 fdea 	bl	800c79c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f005 fa14 	bl	8009002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7c1a      	ldrb	r2, [r3, #16]
 8003be2:	f88d 2000 	strb.w	r2, [sp]
 8003be6:	3304      	adds	r3, #4
 8003be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bea:	f005 f8e5 	bl	8008db8 <USB_CoreInit>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0d5      	b.n	8003dac <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f005 fa0c 	bl	8009024 <USB_SetCurrentMode>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0c6      	b.n	8003dac <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	e04a      	b.n	8003cba <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	3315      	adds	r3, #21
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c38:	7bfa      	ldrb	r2, [r7, #15]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	3314      	adds	r3, #20
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	b298      	uxth	r0, r3
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	332e      	adds	r3, #46	@ 0x2e
 8003c60:	4602      	mov	r2, r0
 8003c62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3318      	adds	r3, #24
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	331c      	adds	r3, #28
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3324      	adds	r3, #36	@ 0x24
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	791b      	ldrb	r3, [r3, #4]
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d3af      	bcc.n	8003c24 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e044      	b.n	8003d54 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	3301      	adds	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	791b      	ldrb	r3, [r3, #4]
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d3b5      	bcc.n	8003cca <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7c1a      	ldrb	r2, [r3, #16]
 8003d66:	f88d 2000 	strb.w	r2, [sp]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d6e:	f005 f9a5 	bl	80090bc <USB_DevInit>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e013      	b.n	8003dac <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7b1b      	ldrb	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 f96c 	bl	8005078 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f006 f9e4 	bl	800a172 <USB_DevDisconnect>

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_PCD_Start+0x1c>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e022      	b.n	8003e16 <HAL_PCD_Start+0x62>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f005 f8ef 	bl	8008fe0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f006 f992 	bl	800a130 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e1e:	b590      	push	{r4, r7, lr}
 8003e20:	b08d      	sub	sp, #52	@ 0x34
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f006 fa50 	bl	800a2da <USB_GetMode>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 84b9 	bne.w	80047b4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f006 f9b4 	bl	800a1b4 <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 84af 	beq.w	80047b2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f006 f9a1 	bl	800a1b4 <USB_ReadInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d107      	bne.n	8003e8c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f002 0202 	and.w	r2, r2, #2
 8003e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f006 f98f 	bl	800a1b4 <USB_ReadInterrupts>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d161      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0210 	bic.w	r2, r2, #16
 8003eae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	0c5b      	lsrs	r3, r3, #17
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d124      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d035      	beq.n	8003f54 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6a38      	ldr	r0, [r7, #32]
 8003efc:	f005 ffc6 	bl	8009e8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f0c:	441a      	add	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1e:	441a      	add	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	615a      	str	r2, [r3, #20]
 8003f24:	e016      	b.n	8003f54 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	0c5b      	lsrs	r3, r3, #17
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d110      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f38:	2208      	movs	r2, #8
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6a38      	ldr	r0, [r7, #32]
 8003f3e:	f005 ffa5 	bl	8009e8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f4e:	441a      	add	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0210 	orr.w	r2, r2, #16
 8003f62:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f006 f923 	bl	800a1b4 <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f78:	f040 80a7 	bne.w	80040ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f006 f928 	bl	800a1da <USB_ReadDevAllOutEpInterrupt>
 8003f8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f8c:	e099      	b.n	80040c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 808e 	beq.w	80040b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f006 f94c 	bl	800a242 <USB_ReadDevOutEPInterrupt>
 8003faa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00c      	beq.n	8003fd0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fece 	bl	8004d6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2308      	movs	r3, #8
 8003fea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 ffa4 	bl	8004f3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400a:	461a      	mov	r2, r3
 800400c:	2310      	movs	r3, #16
 800400e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d030      	beq.n	800407c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004022:	2b80      	cmp	r3, #128	@ 0x80
 8004024:	d109      	bne.n	800403a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004034:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004038:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	78db      	ldrb	r3, [r3, #3]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d108      	bne.n	800406a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f008 fc91 	bl	800c98c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004076:	461a      	mov	r2, r3
 8004078:	2302      	movs	r3, #2
 800407a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	2320      	movs	r3, #32
 8004096:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	3301      	adds	r3, #1
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f af62 	bne.w	8003f8e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f006 f870 	bl	800a1b4 <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040de:	f040 80db 	bne.w	8004298 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 f891 	bl	800a20e <USB_ReadDevAllInEpInterrupt>
 80040ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80040f2:	e0cd      	b.n	8004290 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80c2 	beq.w	8004284 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f006 f8b7 	bl	800a27e <USB_ReadDevInEPInterrupt>
 8004110:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d057      	beq.n	80041cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	43db      	mvns	r3, r3
 8004136:	69f9      	ldr	r1, [r7, #28]
 8004138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800413c:	4013      	ands	r3, r2
 800413e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414c:	461a      	mov	r2, r3
 800414e:	2301      	movs	r3, #1
 8004150:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	799b      	ldrb	r3, [r3, #6]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d132      	bne.n	80041c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3320      	adds	r3, #32
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4403      	add	r3, r0
 800417a:	331c      	adds	r3, #28
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4419      	add	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4403      	add	r3, r0
 800418e:	3320      	adds	r3, #32
 8004190:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d113      	bne.n	80041c0 <HAL_PCD_IRQHandler+0x3a2>
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3324      	adds	r3, #36	@ 0x24
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041b8:	461a      	mov	r2, r3
 80041ba:	2101      	movs	r1, #1
 80041bc:	f006 f8c0 	bl	800a340 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f008 fb5b 	bl	800c882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e2:	461a      	mov	r2, r3
 80041e4:	2308      	movs	r3, #8
 80041e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fe:	461a      	mov	r2, r3
 8004200:	2310      	movs	r3, #16
 8004202:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421a:	461a      	mov	r2, r3
 800421c:	2340      	movs	r3, #64	@ 0x40
 800421e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d023      	beq.n	8004272 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800422a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800422c:	6a38      	ldr	r0, [r7, #32]
 800422e:	f005 f8a3 	bl	8009378 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	3310      	adds	r3, #16
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	3304      	adds	r3, #4
 8004244:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	78db      	ldrb	r3, [r3, #3]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d108      	bne.n	8004260 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f008 fba8 	bl	800c9b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426c:	461a      	mov	r2, r3
 800426e:	2302      	movs	r3, #2
 8004270:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800427c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fce8 	bl	8004c54 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	3301      	adds	r3, #1
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800428a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	f47f af2e 	bne.w	80040f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f005 ff89 	bl	800a1b4 <USB_ReadInterrupts>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042ac:	d122      	bne.n	80042f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d108      	bne.n	80042de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042d4:	2100      	movs	r1, #0
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fef2 	bl	80050c0 <HAL_PCDEx_LPM_Callback>
 80042dc:	e002      	b.n	80042e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f008 fb46 	bl	800c970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80042f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f005 ff5b 	bl	800a1b4 <USB_ReadInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004308:	d112      	bne.n	8004330 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f008 fb02 	bl	800c924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800432e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f005 ff3d 	bl	800a1b4 <USB_ReadInterrupts>
 800433a:	4603      	mov	r3, r0
 800433c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004344:	d121      	bne.n	800438a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004354:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800435c:	2b00      	cmp	r3, #0
 800435e:	d111      	bne.n	8004384 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	f003 020f 	and.w	r2, r3, #15
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800437a:	2101      	movs	r1, #1
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fe9f 	bl	80050c0 <HAL_PCDEx_LPM_Callback>
 8004382:	e002      	b.n	800438a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f008 facd 	bl	800c924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f005 ff10 	bl	800a1b4 <USB_ReadInterrupts>
 8004394:	4603      	mov	r3, r0
 8004396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439e:	f040 80b7 	bne.w	8004510 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2110      	movs	r1, #16
 80043bc:	4618      	mov	r0, r3
 80043be:	f004 ffdb 	bl	8009378 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c6:	e046      	b.n	8004456 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d4:	461a      	mov	r2, r3
 80043d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800440e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800442a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800442e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800444a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800444e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004452:	3301      	adds	r3, #1
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	791b      	ldrb	r3, [r3, #4]
 800445a:	461a      	mov	r2, r3
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	4293      	cmp	r3, r2
 8004460:	d3b2      	bcc.n	80043c8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004470:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004474:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7bdb      	ldrb	r3, [r3, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800448e:	f043 030b 	orr.w	r3, r3, #11
 8004492:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a4:	f043 030b 	orr.w	r3, r3, #11
 80044a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044aa:	e015      	b.n	80044d8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ba:	4619      	mov	r1, r3
 80044bc:	f242 032b 	movw	r3, #8235	@ 0x202b
 80044c0:	4313      	orrs	r3, r2
 80044c2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d2:	f043 030b 	orr.w	r3, r3, #11
 80044d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044fa:	461a      	mov	r2, r3
 80044fc:	f005 ff20 	bl	800a340 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800450e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f005 fe4d 	bl	800a1b4 <USB_ReadInterrupts>
 800451a:	4603      	mov	r3, r0
 800451c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004524:	d123      	bne.n	800456e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f005 fee4 	bl	800a2f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f004 ff98 	bl	800946a <USB_GetDevSpeed>
 800453a:	4603      	mov	r3, r0
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	f001 fd1b 	bl	8005f80 <HAL_RCC_GetHCLKFreq>
 800454a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004550:	461a      	mov	r2, r3
 8004552:	4620      	mov	r0, r4
 8004554:	f004 fca2 	bl	8008e9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f008 f9ba 	bl	800c8d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800456c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f005 fe1e 	bl	800a1b4 <USB_ReadInterrupts>
 8004578:	4603      	mov	r3, r0
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d10a      	bne.n	8004598 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f008 f997 	bl	800c8b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f002 0208 	and.w	r2, r2, #8
 8004596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f005 fe09 	bl	800a1b4 <USB_ReadInterrupts>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b80      	cmp	r3, #128	@ 0x80
 80045aa:	d123      	bne.n	80045f4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045b8:	2301      	movs	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80045bc:	e014      	b.n	80045e8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fb08 	bl	8004bf2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	3301      	adds	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d3e4      	bcc.n	80045be <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f005 fddb 	bl	800a1b4 <USB_ReadInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004608:	d13c      	bne.n	8004684 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800460a:	2301      	movs	r3, #1
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
 800460e:	e02b      	b.n	8004668 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	3318      	adds	r3, #24
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d115      	bne.n	8004662 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004636:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004638:	2b00      	cmp	r3, #0
 800463a:	da12      	bge.n	8004662 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3317      	adds	r3, #23
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fac8 	bl	8004bf2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	791b      	ldrb	r3, [r3, #4]
 800466c:	461a      	mov	r2, r3
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	4293      	cmp	r3, r2
 8004672:	d3cd      	bcc.n	8004610 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f005 fd93 	bl	800a1b4 <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004698:	d156      	bne.n	8004748 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800469a:	2301      	movs	r3, #1
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
 800469e:	e045      	b.n	800472c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d12e      	bne.n	8004726 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da2b      	bge.n	8004726 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80046da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046de:	429a      	cmp	r2, r3
 80046e0:	d121      	bne.n	8004726 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800471e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004722:	6053      	str	r3, [r2, #4]
            break;
 8004724:	e008      	b.n	8004738 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	3301      	adds	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	791b      	ldrb	r3, [r3, #4]
 8004730:	461a      	mov	r2, r3
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	4293      	cmp	r3, r2
 8004736:	d3b3      	bcc.n	80046a0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f005 fd31 	bl	800a1b4 <USB_ReadInterrupts>
 8004752:	4603      	mov	r3, r0
 8004754:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d10a      	bne.n	8004774 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f008 f938 	bl	800c9d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f005 fd1b 	bl	800a1b4 <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d115      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f008 f928 	bl	800c9f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	e000      	b.n	80047b4 <HAL_PCD_IRQHandler+0x996>
      return;
 80047b2:	bf00      	nop
    }
  }
}
 80047b4:	3734      	adds	r7, #52	@ 0x34
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd90      	pop	{r4, r7, pc}

080047ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_PCD_SetAddress+0x1a>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e012      	b.n	80047fa <HAL_PCD_SetAddress+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f005 fc7a 	bl	800a0e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	4608      	mov	r0, r1
 800480c:	4611      	mov	r1, r2
 800480e:	461a      	mov	r2, r3
 8004810:	4603      	mov	r3, r0
 8004812:	70fb      	strb	r3, [r7, #3]
 8004814:	460b      	mov	r3, r1
 8004816:	803b      	strh	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	da0f      	bge.n	8004848 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	f003 020f 	and.w	r2, r3, #15
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	3310      	adds	r3, #16
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	3304      	adds	r3, #4
 800483e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	705a      	strb	r2, [r3, #1]
 8004846:	e00f      	b.n	8004868 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	f003 020f 	and.w	r2, r3, #15
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	3304      	adds	r3, #4
 8004860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	b2da      	uxtb	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004874:	883a      	ldrh	r2, [r7, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	78ba      	ldrb	r2, [r7, #2]
 800487e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004892:	78bb      	ldrb	r3, [r7, #2]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d102      	bne.n	800489e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_PCD_EP_Open+0xaa>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e00e      	b.n	80048ca <HAL_PCD_EP_Open+0xc8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f004 fdfa 	bl	80094b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80048c8:	7afb      	ldrb	r3, [r7, #11]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da0f      	bge.n	8004906 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	3310      	adds	r3, #16
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	3304      	adds	r3, #4
 80048fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	705a      	strb	r2, [r3, #1]
 8004904:	e00f      	b.n	8004926 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_PCD_EP_Close+0x6e>
 800493c:	2302      	movs	r3, #2
 800493e:	e00e      	b.n	800495e <HAL_PCD_EP_Close+0x8c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	4618      	mov	r0, r3
 8004950:	f004 fe38 	bl	80095c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	460b      	mov	r3, r1
 8004974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	f003 020f 	and.w	r2, r3, #15
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	3304      	adds	r3, #4
 800498e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	799b      	ldrb	r3, [r3, #6]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	799b      	ldrb	r3, [r3, #6]
 80049ca:	461a      	mov	r2, r3
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	f004 fed5 	bl	800977c <USB_EPStartXfer>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	f003 020f 	and.w	r2, r3, #15
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1c:	7afb      	ldrb	r3, [r7, #11]
 8004a1e:	f003 020f 	and.w	r2, r3, #15
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	3304      	adds	r3, #4
 8004a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a4c:	7afb      	ldrb	r3, [r7, #11]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	799b      	ldrb	r3, [r3, #6]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d102      	bne.n	8004a66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	799b      	ldrb	r3, [r3, #6]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6979      	ldr	r1, [r7, #20]
 8004a72:	f004 fe83 	bl	800977c <USB_EPStartXfer>

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	7912      	ldrb	r2, [r2, #4]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e04f      	b.n	8004b3e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da0f      	bge.n	8004ac6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	3304      	adds	r3, #4
 8004abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	705a      	strb	r2, [r3, #1]
 8004ac4:	e00d      	b.n	8004ae2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3304      	adds	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_PCD_EP_SetStall+0x82>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e01d      	b.n	8004b3e <HAL_PCD_EP_SetStall+0xbe>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f005 fa13 	bl	8009f3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7999      	ldrb	r1, [r3, #6]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f005 fc06 	bl	800a340 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	7912      	ldrb	r2, [r2, #4]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e042      	b.n	8004bea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da0f      	bge.n	8004b8c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 020f 	and.w	r2, r3, #15
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4413      	add	r3, r2
 8004b80:	3304      	adds	r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	705a      	strb	r2, [r3, #1]
 8004b8a:	e00f      	b.n	8004bac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_PCD_EP_ClrStall+0x86>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e00e      	b.n	8004bea <HAL_PCD_EP_ClrStall+0xa4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f005 fa1c 	bl	800a018 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da0c      	bge.n	8004c20 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 020f 	and.w	r2, r3, #15
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	3310      	adds	r3, #16
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e00c      	b.n	8004c3a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	3304      	adds	r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f005 f83b 	bl	8009cbc <USB_EPStopXfer>
 8004c46:	4603      	mov	r3, r0
 8004c48:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	@ 0x28
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	3310      	adds	r3, #16
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d901      	bls.n	8004c8c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e06b      	b.n	8004d64 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d902      	bls.n	8004ca8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	3303      	adds	r3, #3
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb0:	e02a      	b.n	8004d08 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d902      	bls.n	8004cce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3303      	adds	r3, #3
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4603      	mov	r3, r0
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f005 f890 	bl	8009e10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	441a      	add	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d809      	bhi.n	8004d32 <PCD_WriteEmptyTxFifo+0xde>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d203      	bcs.n	8004d32 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1bf      	bne.n	8004cb2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d811      	bhi.n	8004d62 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2201      	movs	r2, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	6939      	ldr	r1, [r7, #16]
 8004d5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d5e:	4013      	ands	r3, r2
 8004d60:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	333c      	adds	r3, #60	@ 0x3c
 8004d84:	3304      	adds	r3, #4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	799b      	ldrb	r3, [r3, #6]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d17b      	bne.n	8004e9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d015      	beq.n	8004dd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4a61      	ldr	r2, [pc, #388]	@ (8004f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	f240 80b9 	bls.w	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80b3 	beq.w	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd4:	6093      	str	r3, [r2, #8]
 8004dd6:	e0a7      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dee:	461a      	mov	r2, r3
 8004df0:	2320      	movs	r3, #32
 8004df2:	6093      	str	r3, [r2, #8]
 8004df4:	e098      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8093 	bne.w	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	4a4b      	ldr	r2, [pc, #300]	@ (8004f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d90f      	bls.n	8004e2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e20:	461a      	mov	r2, r3
 8004e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e26:	6093      	str	r3, [r2, #8]
 8004e28:	e07e      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	0159      	lsls	r1, r3, #5
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d114      	bne.n	8004e8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e74:	461a      	mov	r2, r3
 8004e76:	2101      	movs	r1, #1
 8004e78:	f005 fa62 	bl	800a340 <USB_EP0_OutStart>
 8004e7c:	e006      	b.n	8004e8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f007 fcda 	bl	800c84c <HAL_PCD_DataOutStageCallback>
 8004e98:	e046      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	@ (8004f38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d124      	bne.n	8004eec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ebe:	6093      	str	r3, [r2, #8]
 8004ec0:	e032      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2320      	movs	r3, #32
 8004edc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f007 fcb1 	bl	800c84c <HAL_PCD_DataOutStageCallback>
 8004eea:	e01d      	b.n	8004f28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d114      	bne.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f14:	461a      	mov	r2, r3
 8004f16:	2100      	movs	r1, #0
 8004f18:	f005 fa12 	bl	800a340 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f007 fc92 	bl	800c84c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	4f54300a 	.word	0x4f54300a
 8004f38:	4f54310a 	.word	0x4f54310a

08004f3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	333c      	adds	r3, #60	@ 0x3c
 8004f54:	3304      	adds	r3, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	@ (8004fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d90e      	bls.n	8004f90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f007 fc49 	bl	800c828 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d90c      	bls.n	8004fb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	799b      	ldrb	r3, [r3, #6]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d108      	bne.n	8004fb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	f005 f9c4 	bl	800a340 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	4f54300a 	.word	0x4f54300a

08004fc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fe6:	883b      	ldrh	r3, [r7, #0]
 8004fe8:	0419      	lsls	r1, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff4:	e028      	b.n	8005048 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4413      	add	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e00d      	b.n	8005026 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	3340      	adds	r3, #64	@ 0x40
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	3301      	adds	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	3b01      	subs	r3, #1
 800502c:	429a      	cmp	r2, r3
 800502e:	d3ec      	bcc.n	800500a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005030:	883b      	ldrh	r3, [r7, #0]
 8005032:	0418      	lsls	r0, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	3b01      	subs	r3, #1
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	4302      	orrs	r2, r0
 8005040:	3340      	adds	r3, #64	@ 0x40
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050a6:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <HAL_PCDEx_ActivateLPM+0x44>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	10000003 	.word	0x10000003

080050c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <HAL_PWREx_ConfigSupply+0x70>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d00a      	beq.n	8005102 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050ec:	4b16      	ldr	r3, [pc, #88]	@ (8005148 <HAL_PWREx_ConfigSupply+0x70>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d001      	beq.n	80050fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e01f      	b.n	800513e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e01d      	b.n	800513e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_PWREx_ConfigSupply+0x70>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f023 0207 	bic.w	r2, r3, #7
 800510a:	490f      	ldr	r1, [pc, #60]	@ (8005148 <HAL_PWREx_ConfigSupply+0x70>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4313      	orrs	r3, r2
 8005110:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005112:	f7fc f90f 	bl	8001334 <HAL_GetTick>
 8005116:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005118:	e009      	b.n	800512e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800511a:	f7fc f90b 	bl	8001334 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005128:	d901      	bls.n	800512e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e007      	b.n	800513e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_PWREx_ConfigSupply+0x70>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513a:	d1ee      	bne.n	800511a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	58024800 	.word	0x58024800

0800514c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a04      	ldr	r2, [pc, #16]	@ (8005168 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800515a:	60d3      	str	r3, [r2, #12]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	58024800 	.word	0x58024800

0800516c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	@ 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e3c8      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8087 	beq.w	800529a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518c:	4b88      	ldr	r3, [pc, #544]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005196:	4b86      	ldr	r3, [pc, #536]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d007      	beq.n	80051b2 <HAL_RCC_OscConfig+0x46>
 80051a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a4:	2b18      	cmp	r3, #24
 80051a6:	d110      	bne.n	80051ca <HAL_RCC_OscConfig+0x5e>
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d10b      	bne.n	80051ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b2:	4b7f      	ldr	r3, [pc, #508]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d06c      	beq.n	8005298 <HAL_RCC_OscConfig+0x12c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d168      	bne.n	8005298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e3a2      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x76>
 80051d4:	4b76      	ldr	r3, [pc, #472]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a75      	ldr	r2, [pc, #468]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e02e      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10c      	bne.n	8005204 <HAL_RCC_OscConfig+0x98>
 80051ea:	4b71      	ldr	r3, [pc, #452]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a70      	ldr	r2, [pc, #448]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b6e      	ldr	r3, [pc, #440]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6d      	ldr	r2, [pc, #436]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80051fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0xbc>
 800520e:	4b68      	ldr	r3, [pc, #416]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a67      	ldr	r2, [pc, #412]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b65      	ldr	r3, [pc, #404]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a64      	ldr	r2, [pc, #400]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 8005228:	4b61      	ldr	r3, [pc, #388]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a60      	ldr	r2, [pc, #384]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b5e      	ldr	r3, [pc, #376]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5d      	ldr	r2, [pc, #372]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fc f874 	bl	8001334 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005250:	f7fc f870 	bl	8001334 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	@ 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e356      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005262:	4b53      	ldr	r3, [pc, #332]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xe4>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fc f860 	bl	8001334 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005278:	f7fc f85c 	bl	8001334 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	@ 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e342      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800528a:	4b49      	ldr	r3, [pc, #292]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x10c>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 808c 	beq.w	80053c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a8:	4b41      	ldr	r3, [pc, #260]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b2:	4b3f      	ldr	r3, [pc, #252]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_RCC_OscConfig+0x162>
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2b18      	cmp	r3, #24
 80052c2:	d137      	bne.n	8005334 <HAL_RCC_OscConfig+0x1c8>
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d132      	bne.n	8005334 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ce:	4b38      	ldr	r3, [pc, #224]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_RCC_OscConfig+0x17a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e314      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052e6:	4b32      	ldr	r3, [pc, #200]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 0219 	bic.w	r2, r3, #25
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	492f      	ldr	r1, [pc, #188]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fc f81c 	bl	8001334 <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005300:	f7fc f818 	bl	8001334 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e2fe      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005312:	4b27      	ldr	r3, [pc, #156]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531e:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	4920      	ldr	r1, [pc, #128]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005332:	e045      	b.n	80053c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d026      	beq.n	800538a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800533c:	4b1c      	ldr	r3, [pc, #112]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f023 0219 	bic.w	r2, r3, #25
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4919      	ldr	r1, [pc, #100]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fb fff1 	bl	8001334 <HAL_GetTick>
 8005352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005356:	f7fb ffed 	bl	8001334 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e2d3      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005368:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005374:	4b0e      	ldr	r3, [pc, #56]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	061b      	lsls	r3, r3, #24
 8005382:	490b      	ldr	r1, [pc, #44]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
 8005388:	e01a      	b.n	80053c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538a:	4b09      	ldr	r3, [pc, #36]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a08      	ldr	r2, [pc, #32]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005396:	f7fb ffcd 	bl	8001334 <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539e:	f7fb ffc9 	bl	8001334 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d903      	bls.n	80053b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e2af      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
 80053b0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053b4:	4b96      	ldr	r3, [pc, #600]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ee      	bne.n	800539e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d06a      	beq.n	80054a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053cc:	4b90      	ldr	r3, [pc, #576]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053d6:	4b8e      	ldr	r3, [pc, #568]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d007      	beq.n	80053f2 <HAL_RCC_OscConfig+0x286>
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b18      	cmp	r3, #24
 80053e6:	d11b      	bne.n	8005420 <HAL_RCC_OscConfig+0x2b4>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d116      	bne.n	8005420 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f2:	4b87      	ldr	r3, [pc, #540]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_RCC_OscConfig+0x29e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d001      	beq.n	800540a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e282      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800540a:	4b81      	ldr	r3, [pc, #516]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	061b      	lsls	r3, r3, #24
 8005418:	497d      	ldr	r1, [pc, #500]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800541a:	4313      	orrs	r3, r2
 800541c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800541e:	e040      	b.n	80054a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d023      	beq.n	8005470 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005428:	4b79      	ldr	r3, [pc, #484]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a78      	ldr	r2, [pc, #480]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800542e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fb ff7e 	bl	8001334 <HAL_GetTick>
 8005438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800543c:	f7fb ff7a 	bl	8001334 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e260      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800544e:	4b70      	ldr	r3, [pc, #448]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800545a:	4b6d      	ldr	r3, [pc, #436]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	4969      	ldr	r1, [pc, #420]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	60cb      	str	r3, [r1, #12]
 800546e:	e018      	b.n	80054a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005470:	4b67      	ldr	r3, [pc, #412]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a66      	ldr	r2, [pc, #408]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800547a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fb ff5a 	bl	8001334 <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005484:	f7fb ff56 	bl	8001334 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e23c      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005496:	4b5e      	ldr	r3, [pc, #376]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d036      	beq.n	800551c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d019      	beq.n	80054ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b6:	4b56      	ldr	r3, [pc, #344]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80054b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ba:	4a55      	ldr	r2, [pc, #340]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c2:	f7fb ff37 	bl	8001334 <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ca:	f7fb ff33 	bl	8001334 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e219      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80054de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x35e>
 80054e8:	e018      	b.n	800551c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ea:	4b49      	ldr	r3, [pc, #292]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	4a48      	ldr	r2, [pc, #288]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7fb ff1d 	bl	8001334 <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fe:	f7fb ff19 	bl	8001334 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e1ff      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005510:	4b3f      	ldr	r3, [pc, #252]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f0      	bne.n	80054fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d036      	beq.n	8005596 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005530:	4b37      	ldr	r3, [pc, #220]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a36      	ldr	r2, [pc, #216]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005536:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800553a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800553c:	f7fb fefa 	bl	8001334 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005544:	f7fb fef6 	bl	8001334 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1dc      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005556:	4b2e      	ldr	r3, [pc, #184]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x3d8>
 8005562:	e018      	b.n	8005596 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005564:	4b2a      	ldr	r3, [pc, #168]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a29      	ldr	r2, [pc, #164]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800556a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800556e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005570:	f7fb fee0 	bl	8001334 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005578:	f7fb fedc 	bl	8001334 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1c2      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800558a:	4b21      	ldr	r3, [pc, #132]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8086 	beq.w	80056b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <HAL_RCC_OscConfig+0x4a8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <HAL_RCC_OscConfig+0x4a8>)
 80055aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055b0:	f7fb fec0 	bl	8001334 <HAL_GetTick>
 80055b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b8:	f7fb febc 	bl	8001334 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	@ 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e1a2      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ca:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <HAL_RCC_OscConfig+0x4a8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d106      	bne.n	80055ec <HAL_RCC_OscConfig+0x480>
 80055de:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ea:	e032      	b.n	8005652 <HAL_RCC_OscConfig+0x4e6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d111      	bne.n	8005618 <HAL_RCC_OscConfig+0x4ac>
 80055f4:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f8:	4a05      	ldr	r2, [pc, #20]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005600:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005604:	4a02      	ldr	r2, [pc, #8]	@ (8005610 <HAL_RCC_OscConfig+0x4a4>)
 8005606:	f023 0304 	bic.w	r3, r3, #4
 800560a:	6713      	str	r3, [r2, #112]	@ 0x70
 800560c:	e021      	b.n	8005652 <HAL_RCC_OscConfig+0x4e6>
 800560e:	bf00      	nop
 8005610:	58024400 	.word	0x58024400
 8005614:	58024800 	.word	0x58024800
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b05      	cmp	r3, #5
 800561e:	d10c      	bne.n	800563a <HAL_RCC_OscConfig+0x4ce>
 8005620:	4b83      	ldr	r3, [pc, #524]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005624:	4a82      	ldr	r2, [pc, #520]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005626:	f043 0304 	orr.w	r3, r3, #4
 800562a:	6713      	str	r3, [r2, #112]	@ 0x70
 800562c:	4b80      	ldr	r3, [pc, #512]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005630:	4a7f      	ldr	r2, [pc, #508]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	@ 0x70
 8005638:	e00b      	b.n	8005652 <HAL_RCC_OscConfig+0x4e6>
 800563a:	4b7d      	ldr	r3, [pc, #500]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	4a7c      	ldr	r2, [pc, #496]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	6713      	str	r3, [r2, #112]	@ 0x70
 8005646:	4b7a      	ldr	r3, [pc, #488]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	4a79      	ldr	r2, [pc, #484]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d015      	beq.n	8005686 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565a:	f7fb fe6b 	bl	8001334 <HAL_GetTick>
 800565e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005660:	e00a      	b.n	8005678 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fb fe67 	bl	8001334 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005670:	4293      	cmp	r3, r2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e14b      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005678:	4b6d      	ldr	r3, [pc, #436]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ee      	beq.n	8005662 <HAL_RCC_OscConfig+0x4f6>
 8005684:	e014      	b.n	80056b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005686:	f7fb fe55 	bl	8001334 <HAL_GetTick>
 800568a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568e:	f7fb fe51 	bl	8001334 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e135      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056a4:	4b62      	ldr	r3, [pc, #392]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ee      	bne.n	800568e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 812a 	beq.w	800590e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056c2:	2b18      	cmp	r3, #24
 80056c4:	f000 80ba 	beq.w	800583c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	f040 8095 	bne.w	80057fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b57      	ldr	r3, [pc, #348]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a56      	ldr	r2, [pc, #344]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80056d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fb fe29 	bl	8001334 <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e6:	f7fb fe25 	bl	8001334 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e10b      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f0      	bne.n	80056e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005704:	4b4a      	ldr	r3, [pc, #296]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005708:	4b4a      	ldr	r3, [pc, #296]	@ (8005834 <HAL_RCC_OscConfig+0x6c8>)
 800570a:	4013      	ands	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005714:	0112      	lsls	r2, r2, #4
 8005716:	430a      	orrs	r2, r1
 8005718:	4945      	ldr	r1, [pc, #276]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800571a:	4313      	orrs	r3, r2
 800571c:	628b      	str	r3, [r1, #40]	@ 0x28
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	3b01      	subs	r3, #1
 8005724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572c:	3b01      	subs	r3, #1
 800572e:	025b      	lsls	r3, r3, #9
 8005730:	b29b      	uxth	r3, r3
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	3b01      	subs	r3, #1
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005746:	3b01      	subs	r3, #1
 8005748:	061b      	lsls	r3, r3, #24
 800574a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800574e:	4938      	ldr	r1, [pc, #224]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005750:	4313      	orrs	r3, r2
 8005752:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005754:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	4a35      	ldr	r2, [pc, #212]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005760:	4b33      	ldr	r3, [pc, #204]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005764:	4b34      	ldr	r3, [pc, #208]	@ (8005838 <HAL_RCC_OscConfig+0x6cc>)
 8005766:	4013      	ands	r3, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800576c:	00d2      	lsls	r2, r2, #3
 800576e:	4930      	ldr	r1, [pc, #192]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005774:	4b2e      	ldr	r3, [pc, #184]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	f023 020c 	bic.w	r2, r3, #12
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	492b      	ldr	r1, [pc, #172]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005782:	4313      	orrs	r3, r2
 8005784:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005786:	4b2a      	ldr	r3, [pc, #168]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	f023 0202 	bic.w	r2, r3, #2
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005792:	4927      	ldr	r1, [pc, #156]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005798:	4b25      	ldr	r3, [pc, #148]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a24      	ldr	r2, [pc, #144]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 800579e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a4:	4b22      	ldr	r3, [pc, #136]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	4a21      	ldr	r2, [pc, #132]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80057bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c8:	4b19      	ldr	r3, [pc, #100]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fb fdae 	bl	8001334 <HAL_GetTick>
 80057d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fb fdaa 	bl	8001334 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e090      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ee:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0x670>
 80057fa:	e088      	b.n	800590e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0b      	ldr	r2, [pc, #44]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fb fd94 	bl	8001334 <HAL_GetTick>
 800580c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005810:	f7fb fd90 	bl	8001334 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e076      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005822:	4b03      	ldr	r3, [pc, #12]	@ (8005830 <HAL_RCC_OscConfig+0x6c4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x6a4>
 800582e:	e06e      	b.n	800590e <HAL_RCC_OscConfig+0x7a2>
 8005830:	58024400 	.word	0x58024400
 8005834:	fffffc0c 	.word	0xfffffc0c
 8005838:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800583c:	4b36      	ldr	r3, [pc, #216]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005842:	4b35      	ldr	r3, [pc, #212]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	2b01      	cmp	r3, #1
 800584e:	d031      	beq.n	80058b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f003 0203 	and.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d12a      	bne.n	80058b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586a:	429a      	cmp	r2, r3
 800586c:	d122      	bne.n	80058b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800587a:	429a      	cmp	r2, r3
 800587c:	d11a      	bne.n	80058b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	0a5b      	lsrs	r3, r3, #9
 8005882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d111      	bne.n	80058b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	0c1b      	lsrs	r3, r3, #16
 8005894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d108      	bne.n	80058b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e02b      	b.n	8005910 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058b8:	4b17      	ldr	r3, [pc, #92]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 80058ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d01f      	beq.n	800590e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058ce:	4b12      	ldr	r3, [pc, #72]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4a11      	ldr	r2, [pc, #68]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058da:	f7fb fd2b 	bl	8001334 <HAL_GetTick>
 80058de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058e0:	bf00      	nop
 80058e2:	f7fb fd27 	bl	8001334 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d0f9      	beq.n	80058e2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 80058f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058f2:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <HAL_RCC_OscConfig+0x7b0>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80058fa:	00d2      	lsls	r2, r2, #3
 80058fc:	4906      	ldr	r1, [pc, #24]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005902:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	4a04      	ldr	r2, [pc, #16]	@ (8005918 <HAL_RCC_OscConfig+0x7ac>)
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3730      	adds	r7, #48	@ 0x30
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	58024400 	.word	0x58024400
 800591c:	ffff0007 	.word	0xffff0007

08005920 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e19c      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005934:	4b8a      	ldr	r3, [pc, #552]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d910      	bls.n	8005964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005942:	4b87      	ldr	r3, [pc, #540]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f023 020f 	bic.w	r2, r3, #15
 800594a:	4985      	ldr	r1, [pc, #532]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005952:	4b83      	ldr	r3, [pc, #524]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e184      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d010      	beq.n	8005992 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	4b7b      	ldr	r3, [pc, #492]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800597c:	429a      	cmp	r2, r3
 800597e:	d908      	bls.n	8005992 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005980:	4b78      	ldr	r3, [pc, #480]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	4975      	ldr	r1, [pc, #468]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 800598e:	4313      	orrs	r3, r2
 8005990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d010      	beq.n	80059c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	4b70      	ldr	r3, [pc, #448]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d908      	bls.n	80059c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	496a      	ldr	r1, [pc, #424]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699a      	ldr	r2, [r3, #24]
 80059d0:	4b64      	ldr	r3, [pc, #400]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059d8:	429a      	cmp	r2, r3
 80059da:	d908      	bls.n	80059ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059dc:	4b61      	ldr	r3, [pc, #388]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	495e      	ldr	r1, [pc, #376]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d010      	beq.n	8005a1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69da      	ldr	r2, [r3, #28]
 80059fe:	4b59      	ldr	r3, [pc, #356]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d908      	bls.n	8005a1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a0a:	4b56      	ldr	r3, [pc, #344]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4953      	ldr	r1, [pc, #332]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d908      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a38:	4b4a      	ldr	r3, [pc, #296]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f023 020f 	bic.w	r2, r3, #15
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4947      	ldr	r1, [pc, #284]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d055      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a56:	4b43      	ldr	r3, [pc, #268]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	4940      	ldr	r1, [pc, #256]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a70:	4b3c      	ldr	r3, [pc, #240]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d121      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0f6      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d107      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a88:	4b36      	ldr	r3, [pc, #216]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d115      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0ea      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aa0:	4b30      	ldr	r3, [pc, #192]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0de      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0d6      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ac0:	4b28      	ldr	r3, [pc, #160]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f023 0207 	bic.w	r2, r3, #7
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4925      	ldr	r1, [pc, #148]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad2:	f7fb fc2f 	bl	8001334 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ada:	f7fb fc2b 	bl	8001334 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e0be      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d1eb      	bne.n	8005ada <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d010      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d208      	bcs.n	8005b30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1e:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f023 020f 	bic.w	r2, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	490e      	ldr	r1, [pc, #56]	@ (8005b64 <HAL_RCC_ClockConfig+0x244>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b30:	4b0b      	ldr	r3, [pc, #44]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d214      	bcs.n	8005b68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b08      	ldr	r3, [pc, #32]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 020f 	bic.w	r2, r3, #15
 8005b46:	4906      	ldr	r1, [pc, #24]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <HAL_RCC_ClockConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e086      	b.n	8005c6e <HAL_RCC_ClockConfig+0x34e>
 8005b60:	52002000 	.word	0x52002000
 8005b64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d010      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	4b3f      	ldr	r3, [pc, #252]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d208      	bcs.n	8005b96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b84:	4b3c      	ldr	r3, [pc, #240]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	4939      	ldr	r1, [pc, #228]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d010      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695a      	ldr	r2, [r3, #20]
 8005ba6:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d208      	bcs.n	8005bc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bb2:	4b31      	ldr	r3, [pc, #196]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	492e      	ldr	r1, [pc, #184]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699a      	ldr	r2, [r3, #24]
 8005bd4:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d208      	bcs.n	8005bf2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005be0:	4b25      	ldr	r3, [pc, #148]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	4922      	ldr	r1, [pc, #136]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69da      	ldr	r2, [r3, #28]
 8005c02:	4b1d      	ldr	r3, [pc, #116]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d208      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	4917      	ldr	r1, [pc, #92]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c20:	f000 f834 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b14      	ldr	r3, [pc, #80]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	4912      	ldr	r1, [pc, #72]	@ (8005c7c <HAL_RCC_ClockConfig+0x35c>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c78 <HAL_RCC_ClockConfig+0x358>)
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	4a0d      	ldr	r2, [pc, #52]	@ (8005c7c <HAL_RCC_ClockConfig+0x35c>)
 8005c48:	5cd3      	ldrb	r3, [r2, r3]
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <HAL_RCC_ClockConfig+0x360>)
 8005c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c58:	4a0a      	ldr	r2, [pc, #40]	@ (8005c84 <HAL_RCC_ClockConfig+0x364>)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <HAL_RCC_ClockConfig+0x368>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fb fb1c 	bl	80012a0 <HAL_InitTick>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	58024400 	.word	0x58024400
 8005c7c:	0800ce64 	.word	0x0800ce64
 8005c80:	24000004 	.word	0x24000004
 8005c84:	24000000 	.word	0x24000000
 8005c88:	24000008 	.word	0x24000008

08005c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b089      	sub	sp, #36	@ 0x24
 8005c90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c92:	4bb3      	ldr	r3, [pc, #716]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c9a:	2b18      	cmp	r3, #24
 8005c9c:	f200 8155 	bhi.w	8005f4a <HAL_RCC_GetSysClockFreq+0x2be>
 8005ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005d0d 	.word	0x08005d0d
 8005cac:	08005f4b 	.word	0x08005f4b
 8005cb0:	08005f4b 	.word	0x08005f4b
 8005cb4:	08005f4b 	.word	0x08005f4b
 8005cb8:	08005f4b 	.word	0x08005f4b
 8005cbc:	08005f4b 	.word	0x08005f4b
 8005cc0:	08005f4b 	.word	0x08005f4b
 8005cc4:	08005f4b 	.word	0x08005f4b
 8005cc8:	08005d33 	.word	0x08005d33
 8005ccc:	08005f4b 	.word	0x08005f4b
 8005cd0:	08005f4b 	.word	0x08005f4b
 8005cd4:	08005f4b 	.word	0x08005f4b
 8005cd8:	08005f4b 	.word	0x08005f4b
 8005cdc:	08005f4b 	.word	0x08005f4b
 8005ce0:	08005f4b 	.word	0x08005f4b
 8005ce4:	08005f4b 	.word	0x08005f4b
 8005ce8:	08005d39 	.word	0x08005d39
 8005cec:	08005f4b 	.word	0x08005f4b
 8005cf0:	08005f4b 	.word	0x08005f4b
 8005cf4:	08005f4b 	.word	0x08005f4b
 8005cf8:	08005f4b 	.word	0x08005f4b
 8005cfc:	08005f4b 	.word	0x08005f4b
 8005d00:	08005f4b 	.word	0x08005f4b
 8005d04:	08005f4b 	.word	0x08005f4b
 8005d08:	08005d3f 	.word	0x08005d3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d0c:	4b94      	ldr	r3, [pc, #592]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d18:	4b91      	ldr	r3, [pc, #580]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	08db      	lsrs	r3, r3, #3
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	4a90      	ldr	r2, [pc, #576]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
 8005d28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d2a:	e111      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d2c:	4b8d      	ldr	r3, [pc, #564]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d2e:	61bb      	str	r3, [r7, #24]
      break;
 8005d30:	e10e      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d32:	4b8d      	ldr	r3, [pc, #564]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d34:	61bb      	str	r3, [r7, #24]
      break;
 8005d36:	e10b      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d38:	4b8c      	ldr	r3, [pc, #560]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d3a:	61bb      	str	r3, [r7, #24]
      break;
 8005d3c:	e108      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d3e:	4b88      	ldr	r3, [pc, #544]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d48:	4b85      	ldr	r3, [pc, #532]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	091b      	lsrs	r3, r3, #4
 8005d4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d54:	4b82      	ldr	r3, [pc, #520]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d5e:	4b80      	ldr	r3, [pc, #512]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d62:	08db      	lsrs	r3, r3, #3
 8005d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80e1 	beq.w	8005f44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	f000 8083 	beq.w	8005e90 <HAL_RCC_GetSysClockFreq+0x204>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f200 80a1 	bhi.w	8005ed4 <HAL_RCC_GetSysClockFreq+0x248>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x114>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d056      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d9e:	e099      	b.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da0:	4b6f      	ldr	r3, [pc, #444]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d02d      	beq.n	8005e08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dac:	4b6c      	ldr	r3, [pc, #432]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	4a6b      	ldr	r2, [pc, #428]	@ (8005f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b62      	ldr	r3, [pc, #392]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e06:	e087      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005f74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b51      	ldr	r3, [pc, #324]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e4a:	e065      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b40      	ldr	r3, [pc, #256]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e8e:	e043      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005f7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ed2:	e021      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f18:	4b11      	ldr	r3, [pc, #68]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1c:	0a5b      	lsrs	r3, r3, #9
 8005f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f22:	3301      	adds	r3, #1
 8005f24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	ee07 3a90 	vmov	s15, r3
 8005f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3c:	ee17 3a90 	vmov	r3, s15
 8005f40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f42:	e005      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
      break;
 8005f48:	e002      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f4a:	4b07      	ldr	r3, [pc, #28]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f4c:	61bb      	str	r3, [r7, #24]
      break;
 8005f4e:	bf00      	nop
  }

  return sysclockfreq;
 8005f50:	69bb      	ldr	r3, [r7, #24]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3724      	adds	r7, #36	@ 0x24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	58024400 	.word	0x58024400
 8005f64:	03d09000 	.word	0x03d09000
 8005f68:	003d0900 	.word	0x003d0900
 8005f6c:	017d7840 	.word	0x017d7840
 8005f70:	46000000 	.word	0x46000000
 8005f74:	4c742400 	.word	0x4c742400
 8005f78:	4a742400 	.word	0x4a742400
 8005f7c:	4bbebc20 	.word	0x4bbebc20

08005f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f86:	f7ff fe81 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	0a1b      	lsrs	r3, r3, #8
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	490f      	ldr	r1, [pc, #60]	@ (8005fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f98:	5ccb      	ldrb	r3, [r1, r3]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	4a09      	ldr	r2, [pc, #36]	@ (8005fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fae:	5cd3      	ldrb	r3, [r2, r3]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fba:	4a07      	ldr	r2, [pc, #28]	@ (8005fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fbe:	4a07      	ldr	r2, [pc, #28]	@ (8005fdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fc4:	4b04      	ldr	r3, [pc, #16]	@ (8005fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	58024400 	.word	0x58024400
 8005fd4:	0800ce64 	.word	0x0800ce64
 8005fd8:	24000004 	.word	0x24000004
 8005fdc:	24000000 	.word	0x24000000

08005fe0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe4:	b0c6      	sub	sp, #280	@ 0x118
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006004:	2500      	movs	r5, #0
 8006006:	ea54 0305 	orrs.w	r3, r4, r5
 800600a:	d049      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006010:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006016:	d02f      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006018:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800601c:	d828      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800601e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006022:	d01a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006028:	d822      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800602e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006032:	d007      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006034:	e01c      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006036:	4bab      	ldr	r3, [pc, #684]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	4aaa      	ldr	r2, [pc, #680]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800603c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006040:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006042:	e01a      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	3308      	adds	r3, #8
 800604a:	2102      	movs	r1, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f001 f967 	bl	8007320 <RCCEx_PLL2_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006058:	e00f      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605e:	3328      	adds	r3, #40	@ 0x28
 8006060:	2102      	movs	r1, #2
 8006062:	4618      	mov	r0, r3
 8006064:	f001 fa0e 	bl	8007484 <RCCEx_PLL3_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006082:	4b98      	ldr	r3, [pc, #608]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006086:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006090:	4a94      	ldr	r2, [pc, #592]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6513      	str	r3, [r2, #80]	@ 0x50
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800609c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80060ac:	f04f 0900 	mov.w	r9, #0
 80060b0:	ea58 0309 	orrs.w	r3, r8, r9
 80060b4:	d047      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d82a      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060c0:	a201      	add	r2, pc, #4	@ (adr r2, 80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060dd 	.word	0x080060dd
 80060cc:	080060eb 	.word	0x080060eb
 80060d0:	08006101 	.word	0x08006101
 80060d4:	0800611f 	.word	0x0800611f
 80060d8:	0800611f 	.word	0x0800611f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060dc:	4b81      	ldr	r3, [pc, #516]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	4a80      	ldr	r2, [pc, #512]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060e8:	e01a      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ee:	3308      	adds	r3, #8
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 f914 	bl	8007320 <RCCEx_PLL2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060fe:	e00f      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006104:	3328      	adds	r3, #40	@ 0x28
 8006106:	2100      	movs	r1, #0
 8006108:	4618      	mov	r0, r3
 800610a:	f001 f9bb 	bl	8007484 <RCCEx_PLL3_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006128:	4b6e      	ldr	r3, [pc, #440]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800612a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612c:	f023 0107 	bic.w	r1, r3, #7
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006136:	4a6b      	ldr	r2, [pc, #428]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006138:	430b      	orrs	r3, r1
 800613a:	6513      	str	r3, [r2, #80]	@ 0x50
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006142:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006152:	f04f 0b00 	mov.w	fp, #0
 8006156:	ea5a 030b 	orrs.w	r3, sl, fp
 800615a:	d05b      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006164:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006168:	d03b      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800616a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800616e:	d834      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006174:	d037      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800617a:	d82e      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800617c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006180:	d033      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006182:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006186:	d828      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800618c:	d01a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800618e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006192:	d822      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006198:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800619c:	d007      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800619e:	e01c      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a0:	4b50      	ldr	r3, [pc, #320]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4a4f      	ldr	r2, [pc, #316]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061ac:	e01e      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	3308      	adds	r3, #8
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 f8b2 	bl	8007320 <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061c2:	e013      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c8:	3328      	adds	r3, #40	@ 0x28
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 f959 	bl	8007484 <RCCEx_PLL3_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061d8:	e008      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061e0:	e004      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80061ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80061f4:	4b3b      	ldr	r3, [pc, #236]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006204:	4a37      	ldr	r2, [pc, #220]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006206:	430b      	orrs	r3, r1
 8006208:	6593      	str	r3, [r2, #88]	@ 0x58
 800620a:	e003      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006220:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800622a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d05d      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006238:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800623c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006240:	d03b      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006242:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006246:	d834      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800624c:	d037      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800624e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006252:	d82e      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006254:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006258:	d033      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800625a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800625e:	d828      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006260:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006264:	d01a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800626a:	d822      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006274:	d007      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006276:	e01c      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006278:	4b1a      	ldr	r3, [pc, #104]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	4a19      	ldr	r2, [pc, #100]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800627e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006284:	e01e      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	3308      	adds	r3, #8
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f001 f846 	bl	8007320 <RCCEx_PLL2_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800629a:	e013      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	3328      	adds	r3, #40	@ 0x28
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 f8ed 	bl	8007484 <RCCEx_PLL3_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062b0:	e008      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062b8:	e004      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062ba:	bf00      	nop
 80062bc:	e002      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062be:	bf00      	nop
 80062c0:	e000      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062cc:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062dc:	4a01      	ldr	r2, [pc, #4]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80062e2:	e005      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80062e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80062fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006300:	2300      	movs	r3, #0
 8006302:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006306:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	d03a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006316:	2b30      	cmp	r3, #48	@ 0x30
 8006318:	d01f      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800631a:	2b30      	cmp	r3, #48	@ 0x30
 800631c:	d819      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800631e:	2b20      	cmp	r3, #32
 8006320:	d00c      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006322:	2b20      	cmp	r3, #32
 8006324:	d815      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d019      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800632a:	2b10      	cmp	r3, #16
 800632c:	d111      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800632e:	4baa      	ldr	r3, [pc, #680]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006332:	4aa9      	ldr	r2, [pc, #676]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800633a:	e011      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006340:	3308      	adds	r3, #8
 8006342:	2102      	movs	r1, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ffeb 	bl	8007320 <RCCEx_PLL2_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800635e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006368:	4b9b      	ldr	r3, [pc, #620]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800636a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800636c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006376:	4a98      	ldr	r2, [pc, #608]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006378:	430b      	orrs	r3, r1
 800637a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800637c:	e003      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006382:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800639c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80063a0:	460b      	mov	r3, r1
 80063a2:	4313      	orrs	r3, r2
 80063a4:	d051      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80063a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b0:	d035      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80063b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b6:	d82e      	bhi.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063bc:	d031      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80063be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063c2:	d828      	bhi.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c8:	d01a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80063ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ce:	d822      	bhi.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80063d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d8:	d007      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80063da:	e01c      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063dc:	4b7e      	ldr	r3, [pc, #504]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	4a7d      	ldr	r2, [pc, #500]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80063e8:	e01c      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	3308      	adds	r3, #8
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 ff94 	bl	8007320 <RCCEx_PLL2_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80063fe:	e011      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006404:	3328      	adds	r3, #40	@ 0x28
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f83b 	bl	8007484 <RCCEx_PLL3_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006414:	e006      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800641c:	e002      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800641e:	bf00      	nop
 8006420:	e000      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800642c:	4b6a      	ldr	r3, [pc, #424]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800642e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006430:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800643a:	4a67      	ldr	r2, [pc, #412]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800643c:	430b      	orrs	r3, r1
 800643e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006440:	e003      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006456:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800645a:	2300      	movs	r3, #0
 800645c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006460:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006464:	460b      	mov	r3, r1
 8006466:	4313      	orrs	r3, r2
 8006468:	d053      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006474:	d033      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006476:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800647a:	d82c      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800647c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006480:	d02f      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006482:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006486:	d826      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006488:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800648c:	d02b      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800648e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006492:	d820      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006498:	d012      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800649a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800649e:	d81a      	bhi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d022      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a8:	d115      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ae:	3308      	adds	r3, #8
 80064b0:	2101      	movs	r1, #1
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 ff34 	bl	8007320 <RCCEx_PLL2_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064be:	e015      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	3328      	adds	r3, #40	@ 0x28
 80064c6:	2101      	movs	r1, #1
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 ffdb 	bl	8007484 <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064d4:	e00a      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064dc:	e006      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80064de:	bf00      	nop
 80064e0:	e004      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80064ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80064f4:	4b38      	ldr	r3, [pc, #224]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006502:	4a35      	ldr	r2, [pc, #212]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6513      	str	r3, [r2, #80]	@ 0x50
 8006508:	e003      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800650e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800651e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006528:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d058      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800653a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800653e:	d033      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006544:	d82c      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654a:	d02f      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006550:	d826      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006552:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006556:	d02b      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006558:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800655c:	d820      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006562:	d012      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006568:	d81a      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d022      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800656e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006572:	d115      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	3308      	adds	r3, #8
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fecf 	bl	8007320 <RCCEx_PLL2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006588:	e015      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800658a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658e:	3328      	adds	r3, #40	@ 0x28
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f000 ff76 	bl	8007484 <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800659e:	e00a      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065a6:	e006      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065a8:	bf00      	nop
 80065aa:	e004      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065ac:	bf00      	nop
 80065ae:	e002      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065b0:	bf00      	nop
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10e      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065be:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80065ce:	4a02      	ldr	r2, [pc, #8]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065d4:	e006      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80065f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065f4:	2300      	movs	r3, #0
 80065f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80065fe:	460b      	mov	r3, r1
 8006600:	4313      	orrs	r3, r2
 8006602:	d037      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800660a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800660e:	d00e      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006614:	d816      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d018      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800661a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800661e:	d111      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006620:	4bc4      	ldr	r3, [pc, #784]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	4ac3      	ldr	r2, [pc, #780]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800662a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800662c:	e00f      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006632:	3308      	adds	r3, #8
 8006634:	2101      	movs	r1, #1
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fe72 	bl	8007320 <RCCEx_PLL2_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006642:	e004      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800664a:	e000      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800664c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006656:	4bb7      	ldr	r3, [pc, #732]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006664:	4ab3      	ldr	r2, [pc, #716]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006666:	430b      	orrs	r3, r1
 8006668:	6513      	str	r3, [r2, #80]	@ 0x50
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006680:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800668a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d039      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800669a:	2b03      	cmp	r3, #3
 800669c:	d81c      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800669e:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066e1 	.word	0x080066e1
 80066a8:	080066b5 	.word	0x080066b5
 80066ac:	080066c3 	.word	0x080066c3
 80066b0:	080066e1 	.word	0x080066e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b4:	4b9f      	ldr	r3, [pc, #636]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	4a9e      	ldr	r2, [pc, #632]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80066c0:	e00f      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	3308      	adds	r3, #8
 80066c8:	2102      	movs	r1, #2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fe28 	bl	8007320 <RCCEx_PLL2_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066de:	e000      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80066e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066ea:	4b92      	ldr	r3, [pc, #584]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ee:	f023 0103 	bic.w	r1, r3, #3
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f8:	4a8e      	ldr	r2, [pc, #568]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066fa:	430b      	orrs	r3, r1
 80066fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066fe:	e003      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006704:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006714:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006718:	2300      	movs	r3, #0
 800671a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800671e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006722:	460b      	mov	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	f000 8099 	beq.w	800685c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800672a:	4b83      	ldr	r3, [pc, #524]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a82      	ldr	r2, [pc, #520]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006734:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006736:	f7fa fdfd 	bl	8001334 <HAL_GetTick>
 800673a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800673e:	e00b      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006740:	f7fa fdf8 	bl	8001334 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b64      	cmp	r3, #100	@ 0x64
 800674e:	d903      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006756:	e005      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006758:	4b77      	ldr	r3, [pc, #476]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0ed      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006768:	2b00      	cmp	r3, #0
 800676a:	d173      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800676c:	4b71      	ldr	r3, [pc, #452]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800676e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006778:	4053      	eors	r3, r2
 800677a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800677e:	2b00      	cmp	r3, #0
 8006780:	d015      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006782:	4b6c      	ldr	r3, [pc, #432]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800678e:	4b69      	ldr	r3, [pc, #420]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	4a68      	ldr	r2, [pc, #416]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006798:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800679a:	4b66      	ldr	r3, [pc, #408]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800679c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679e:	4a65      	ldr	r2, [pc, #404]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067a6:	4a63      	ldr	r2, [pc, #396]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ba:	d118      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067bc:	f7fa fdba 	bl	8001334 <HAL_GetTick>
 80067c0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067c4:	e00d      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c6:	f7fa fdb5 	bl	8001334 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80067d0:	1ad2      	subs	r2, r2, r3
 80067d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d903      	bls.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80067e0:	e005      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067e2:	4b54      	ldr	r3, [pc, #336]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0eb      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80067ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d129      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006806:	d10e      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006808:	4b4a      	ldr	r3, [pc, #296]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006818:	091a      	lsrs	r2, r3, #4
 800681a:	4b48      	ldr	r3, [pc, #288]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800681c:	4013      	ands	r3, r2
 800681e:	4a45      	ldr	r2, [pc, #276]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006820:	430b      	orrs	r3, r1
 8006822:	6113      	str	r3, [r2, #16]
 8006824:	e005      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006826:	4b43      	ldr	r3, [pc, #268]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	4a42      	ldr	r2, [pc, #264]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800682c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006830:	6113      	str	r3, [r2, #16]
 8006832:	4b40      	ldr	r3, [pc, #256]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006834:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800683e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006842:	4a3c      	ldr	r2, [pc, #240]	@ (8006934 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006844:	430b      	orrs	r3, r1
 8006846:	6713      	str	r3, [r2, #112]	@ 0x70
 8006848:	e008      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800684a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800684e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006852:	e003      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006858:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	f002 0301 	and.w	r3, r2, #1
 8006868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800686c:	2300      	movs	r3, #0
 800686e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006872:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006876:	460b      	mov	r3, r1
 8006878:	4313      	orrs	r3, r2
 800687a:	f000 808f 	beq.w	800699c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006884:	2b28      	cmp	r3, #40	@ 0x28
 8006886:	d871      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006888:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	08006975 	.word	0x08006975
 8006894:	0800696d 	.word	0x0800696d
 8006898:	0800696d 	.word	0x0800696d
 800689c:	0800696d 	.word	0x0800696d
 80068a0:	0800696d 	.word	0x0800696d
 80068a4:	0800696d 	.word	0x0800696d
 80068a8:	0800696d 	.word	0x0800696d
 80068ac:	0800696d 	.word	0x0800696d
 80068b0:	08006941 	.word	0x08006941
 80068b4:	0800696d 	.word	0x0800696d
 80068b8:	0800696d 	.word	0x0800696d
 80068bc:	0800696d 	.word	0x0800696d
 80068c0:	0800696d 	.word	0x0800696d
 80068c4:	0800696d 	.word	0x0800696d
 80068c8:	0800696d 	.word	0x0800696d
 80068cc:	0800696d 	.word	0x0800696d
 80068d0:	08006957 	.word	0x08006957
 80068d4:	0800696d 	.word	0x0800696d
 80068d8:	0800696d 	.word	0x0800696d
 80068dc:	0800696d 	.word	0x0800696d
 80068e0:	0800696d 	.word	0x0800696d
 80068e4:	0800696d 	.word	0x0800696d
 80068e8:	0800696d 	.word	0x0800696d
 80068ec:	0800696d 	.word	0x0800696d
 80068f0:	08006975 	.word	0x08006975
 80068f4:	0800696d 	.word	0x0800696d
 80068f8:	0800696d 	.word	0x0800696d
 80068fc:	0800696d 	.word	0x0800696d
 8006900:	0800696d 	.word	0x0800696d
 8006904:	0800696d 	.word	0x0800696d
 8006908:	0800696d 	.word	0x0800696d
 800690c:	0800696d 	.word	0x0800696d
 8006910:	08006975 	.word	0x08006975
 8006914:	0800696d 	.word	0x0800696d
 8006918:	0800696d 	.word	0x0800696d
 800691c:	0800696d 	.word	0x0800696d
 8006920:	0800696d 	.word	0x0800696d
 8006924:	0800696d 	.word	0x0800696d
 8006928:	0800696d 	.word	0x0800696d
 800692c:	0800696d 	.word	0x0800696d
 8006930:	08006975 	.word	0x08006975
 8006934:	58024400 	.word	0x58024400
 8006938:	58024800 	.word	0x58024800
 800693c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006944:	3308      	adds	r3, #8
 8006946:	2101      	movs	r1, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fce9 	bl	8007320 <RCCEx_PLL2_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006954:	e00f      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695a:	3328      	adds	r3, #40	@ 0x28
 800695c:	2101      	movs	r1, #1
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fd90 	bl	8007484 <RCCEx_PLL3_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800696a:	e004      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006972:	e000      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800697e:	4bbf      	ldr	r3, [pc, #764]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006982:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800698c:	4abb      	ldr	r2, [pc, #748]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800698e:	430b      	orrs	r3, r1
 8006990:	6553      	str	r3, [r2, #84]	@ 0x54
 8006992:	e003      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f002 0302 	and.w	r3, r2, #2
 80069a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d041      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d824      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a19 	.word	0x08006a19
 80069d0:	080069e5 	.word	0x080069e5
 80069d4:	080069fb 	.word	0x080069fb
 80069d8:	08006a19 	.word	0x08006a19
 80069dc:	08006a19 	.word	0x08006a19
 80069e0:	08006a19 	.word	0x08006a19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e8:	3308      	adds	r3, #8
 80069ea:	2101      	movs	r1, #1
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fc97 	bl	8007320 <RCCEx_PLL2_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80069f8:	e00f      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fe:	3328      	adds	r3, #40	@ 0x28
 8006a00:	2101      	movs	r1, #1
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fd3e 	bl	8007484 <RCCEx_PLL3_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a0e:	e004      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a16:	e000      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a22:	4b96      	ldr	r3, [pc, #600]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a26:	f023 0107 	bic.w	r1, r3, #7
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a30:	4a92      	ldr	r2, [pc, #584]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a32:	430b      	orrs	r3, r1
 8006a34:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 0304 	and.w	r3, r2, #4
 8006a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	d044      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	d825      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006ac1 	.word	0x08006ac1
 8006a78:	08006a8d 	.word	0x08006a8d
 8006a7c:	08006aa3 	.word	0x08006aa3
 8006a80:	08006ac1 	.word	0x08006ac1
 8006a84:	08006ac1 	.word	0x08006ac1
 8006a88:	08006ac1 	.word	0x08006ac1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	3308      	adds	r3, #8
 8006a92:	2101      	movs	r1, #1
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fc43 	bl	8007320 <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006aa0:	e00f      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	3328      	adds	r3, #40	@ 0x28
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fcea 	bl	8007484 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aca:	4b6c      	ldr	r3, [pc, #432]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ace:	f023 0107 	bic.w	r1, r3, #7
 8006ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ada:	4a68      	ldr	r2, [pc, #416]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ae0:	e003      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f002 0320 	and.w	r3, r2, #32
 8006af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d055      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b16:	d033      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b1c:	d82c      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b22:	d02f      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b28:	d826      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b2e:	d02b      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006b30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b34:	d820      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b3a:	d012      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b40:	d81a      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d022      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4a:	d115      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b50:	3308      	adds	r3, #8
 8006b52:	2100      	movs	r1, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fbe3 	bl	8007320 <RCCEx_PLL2_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b60:	e015      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b66:	3328      	adds	r3, #40	@ 0x28
 8006b68:	2102      	movs	r1, #2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fc8a 	bl	8007484 <RCCEx_PLL3_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b76:	e00a      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b7e:	e006      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006b80:	bf00      	nop
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b96:	4b39      	ldr	r3, [pc, #228]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ba6:	4a35      	ldr	r2, [pc, #212]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bac:	e003      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006bc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bcc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d058      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006be2:	d033      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006be4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006be8:	d82c      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bee:	d02f      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf4:	d826      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006bf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bfa:	d02b      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006bfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c00:	d820      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c06:	d012      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c0c:	d81a      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d022      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c16:	d115      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fb7d 	bl	8007320 <RCCEx_PLL2_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c2c:	e015      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c32:	3328      	adds	r3, #40	@ 0x28
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fc24 	bl	8007484 <RCCEx_PLL3_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c42:	e00a      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c4a:	e006      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c4c:	bf00      	nop
 8006c4e:	e004      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10e      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c62:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c72:	4a02      	ldr	r2, [pc, #8]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c78:	e006      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006c7a:	bf00      	nop
 8006c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006c94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d055      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cb0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006cb4:	d033      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006cb6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006cba:	d82c      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc0:	d02f      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc6:	d826      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cc8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ccc:	d02b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006cce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006cd2:	d820      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd8:	d012      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cde:	d81a      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d022      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ce8:	d115      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	3308      	adds	r3, #8
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fb14 	bl	8007320 <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e015      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	3328      	adds	r3, #40	@ 0x28
 8006d06:	2102      	movs	r1, #2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fbbb 	bl	8007484 <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d14:	e00a      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d1e:	bf00      	nop
 8006d20:	e004      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d34:	4ba0      	ldr	r3, [pc, #640]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d44:	4a9c      	ldr	r2, [pc, #624]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d46:	430b      	orrs	r3, r1
 8006d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f002 0308 	and.w	r3, r2, #8
 8006d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d6a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d01e      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d86:	3328      	adds	r3, #40	@ 0x28
 8006d88:	2102      	movs	r1, #2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fb7a 	bl	8007484 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006d9c:	4b86      	ldr	r3, [pc, #536]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dac:	4a82      	ldr	r2, [pc, #520]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dae:	430b      	orrs	r3, r1
 8006db0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f002 0310 	and.w	r3, r2, #16
 8006dbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dc8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	d01e      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dde:	d10c      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de4:	3328      	adds	r3, #40	@ 0x28
 8006de6:	2102      	movs	r1, #2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fb4b 	bl	8007484 <RCCEx_PLL3_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e0a:	4a6b      	ldr	r2, [pc, #428]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e1e:	2300      	movs	r3, #0
 8006e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e22:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006e26:	460b      	mov	r3, r1
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	d03e      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e38:	d022      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e3e:	d81b      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e48:	d00b      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006e4a:	e015      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e50:	3308      	adds	r3, #8
 8006e52:	2100      	movs	r1, #0
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fa63 	bl	8007320 <RCCEx_PLL2_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e60:	e00f      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e66:	3328      	adds	r3, #40	@ 0x28
 8006e68:	2102      	movs	r1, #2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fb0a 	bl	8007484 <RCCEx_PLL3_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e76:	e004      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e7e:	e000      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e9a:	4a47      	ldr	r2, [pc, #284]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea0:	e003      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ea6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006eb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006eb8:	2300      	movs	r3, #0
 8006eba:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ebc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	d03b      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ece:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ed2:	d01f      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006ed4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ed8:	d818      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006ee0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ee4:	d007      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006ee6:	e011      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b33      	ldr	r3, [pc, #204]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a32      	ldr	r2, [pc, #200]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ef4:	e00f      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	3328      	adds	r3, #40	@ 0x28
 8006efc:	2101      	movs	r1, #1
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fac0 	bl	8007484 <RCCEx_PLL3_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f0a:	e004      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f1e:	4b26      	ldr	r3, [pc, #152]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f2e:	4a22      	ldr	r2, [pc, #136]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f34:	e003      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f50:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f54:	460b      	mov	r3, r1
 8006f56:	4313      	orrs	r3, r2
 8006f58:	d034      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f68:	d007      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006f6a:	e011      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	4a11      	ldr	r2, [pc, #68]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f78:	e00e      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7e:	3308      	adds	r3, #8
 8006f80:	2102      	movs	r1, #2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f9cc 	bl	8007320 <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f8e:	e003      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10d      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fae:	4a02      	ldr	r2, [pc, #8]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fb4:	e006      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fd6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d00c      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	3328      	adds	r3, #40	@ 0x28
 8006fe6:	2102      	movs	r1, #2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fa4b 	bl	8007484 <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007006:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007008:	2300      	movs	r3, #0
 800700a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800700c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007010:	460b      	mov	r3, r1
 8007012:	4313      	orrs	r3, r2
 8007014:	d036      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800701c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007020:	d018      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007026:	d811      	bhi.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800702c:	d014      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800702e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007032:	d80b      	bhi.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d011      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800703c:	d106      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703e:	4bb7      	ldr	r3, [pc, #732]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007042:	4ab6      	ldr	r2, [pc, #728]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007048:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800704a:	e008      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007052:	e004      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800705c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007066:	4bad      	ldr	r3, [pc, #692]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007074:	4aa9      	ldr	r2, [pc, #676]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007076:	430b      	orrs	r3, r1
 8007078:	6553      	str	r3, [r2, #84]	@ 0x54
 800707a:	e003      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007080:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007090:	653b      	str	r3, [r7, #80]	@ 0x50
 8007092:	2300      	movs	r3, #0
 8007094:	657b      	str	r3, [r7, #84]	@ 0x54
 8007096:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070a0:	4b9e      	ldr	r3, [pc, #632]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ae:	4a9b      	ldr	r2, [pc, #620]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070b0:	430b      	orrs	r3, r1
 80070b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80070c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c2:	2300      	movs	r3, #0
 80070c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80070ca:	460b      	mov	r3, r1
 80070cc:	4313      	orrs	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070d0:	4b92      	ldr	r3, [pc, #584]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070de:	4a8f      	ldr	r2, [pc, #572]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80070f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80070f2:	2300      	movs	r3, #0
 80070f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80070fa:	460b      	mov	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007100:	4b86      	ldr	r3, [pc, #536]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	4a85      	ldr	r2, [pc, #532]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007106:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800710a:	6113      	str	r3, [r2, #16]
 800710c:	4b83      	ldr	r3, [pc, #524]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800710e:	6919      	ldr	r1, [r3, #16]
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007118:	4a80      	ldr	r2, [pc, #512]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800711a:	430b      	orrs	r3, r1
 800711c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800712a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800712c:	2300      	movs	r3, #0
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007130:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007134:	460b      	mov	r3, r1
 8007136:	4313      	orrs	r3, r2
 8007138:	d009      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800713a:	4b78      	ldr	r3, [pc, #480]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800713c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800713e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007148:	4a74      	ldr	r2, [pc, #464]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800714a:	430b      	orrs	r3, r1
 800714c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800715a:	633b      	str	r3, [r7, #48]	@ 0x30
 800715c:	2300      	movs	r3, #0
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007160:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007164:	460b      	mov	r3, r1
 8007166:	4313      	orrs	r3, r2
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800716a:	4b6c      	ldr	r3, [pc, #432]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800716c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800716e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717a:	4a68      	ldr	r2, [pc, #416]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800717c:	430b      	orrs	r3, r1
 800717e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	2100      	movs	r1, #0
 800718a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007192:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007196:	460b      	mov	r3, r1
 8007198:	4313      	orrs	r3, r2
 800719a:	d011      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a0:	3308      	adds	r3, #8
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f8bb 	bl	8007320 <RCCEx_PLL2_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80071b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	2100      	movs	r1, #0
 80071ca:	6239      	str	r1, [r7, #32]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	d011      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	3308      	adds	r3, #8
 80071e2:	2101      	movs	r1, #1
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f89b 	bl	8007320 <RCCEx_PLL2_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80071f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	2100      	movs	r1, #0
 800720a:	61b9      	str	r1, [r7, #24]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007216:	460b      	mov	r3, r1
 8007218:	4313      	orrs	r3, r2
 800721a:	d011      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	3308      	adds	r3, #8
 8007222:	2102      	movs	r1, #2
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f87b 	bl	8007320 <RCCEx_PLL2_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800723c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	2100      	movs	r1, #0
 800724a:	6139      	str	r1, [r7, #16]
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007256:	460b      	mov	r3, r1
 8007258:	4313      	orrs	r3, r2
 800725a:	d011      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800725c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007260:	3328      	adds	r3, #40	@ 0x28
 8007262:	2100      	movs	r1, #0
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f90d 	bl	8007484 <RCCEx_PLL3_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800727c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	2100      	movs	r1, #0
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007296:	460b      	mov	r3, r1
 8007298:	4313      	orrs	r3, r2
 800729a:	d011      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a0:	3328      	adds	r3, #40	@ 0x28
 80072a2:	2101      	movs	r1, #1
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f8ed 	bl	8007484 <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80072b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	2100      	movs	r1, #0
 80072ca:	6039      	str	r1, [r7, #0]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80072d6:	460b      	mov	r3, r1
 80072d8:	4313      	orrs	r3, r2
 80072da:	d011      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e0:	3328      	adds	r3, #40	@ 0x28
 80072e2:	2102      	movs	r1, #2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 f8cd 	bl	8007484 <RCCEx_PLL3_Config>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80072f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007300:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
}
 800730e:	4618      	mov	r0, r3
 8007310:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007314:	46bd      	mov	sp, r7
 8007316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800731a:	bf00      	nop
 800731c:	58024400 	.word	0x58024400

08007320 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800732e:	4b53      	ldr	r3, [pc, #332]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	2b03      	cmp	r3, #3
 8007338:	d101      	bne.n	800733e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e099      	b.n	8007472 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800733e:	4b4f      	ldr	r3, [pc, #316]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4e      	ldr	r2, [pc, #312]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007344:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734a:	f7f9 fff3 	bl	8001334 <HAL_GetTick>
 800734e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007350:	e008      	b.n	8007364 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007352:	f7f9 ffef 	bl	8001334 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e086      	b.n	8007472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007364:	4b45      	ldr	r3, [pc, #276]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1f0      	bne.n	8007352 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007370:	4b42      	ldr	r3, [pc, #264]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007374:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	031b      	lsls	r3, r3, #12
 800737e:	493f      	ldr	r1, [pc, #252]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007380:	4313      	orrs	r3, r2
 8007382:	628b      	str	r3, [r1, #40]	@ 0x28
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	3b01      	subs	r3, #1
 800738a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	3b01      	subs	r3, #1
 8007394:	025b      	lsls	r3, r3, #9
 8007396:	b29b      	uxth	r3, r3
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	3b01      	subs	r3, #1
 80073a0:	041b      	lsls	r3, r3, #16
 80073a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	061b      	lsls	r3, r3, #24
 80073b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073b4:	4931      	ldr	r1, [pc, #196]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ba:	4b30      	ldr	r3, [pc, #192]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	492d      	ldr	r1, [pc, #180]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073cc:	4b2b      	ldr	r3, [pc, #172]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d0:	f023 0220 	bic.w	r2, r3, #32
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	4928      	ldr	r1, [pc, #160]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073de:	4b27      	ldr	r3, [pc, #156]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	4a26      	ldr	r2, [pc, #152]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073ea:	4b24      	ldr	r3, [pc, #144]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ee:	4b24      	ldr	r3, [pc, #144]	@ (8007480 <RCCEx_PLL2_Config+0x160>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	69d2      	ldr	r2, [r2, #28]
 80073f6:	00d2      	lsls	r2, r2, #3
 80073f8:	4920      	ldr	r1, [pc, #128]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073fe:	4b1f      	ldr	r3, [pc, #124]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	4a1e      	ldr	r2, [pc, #120]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007404:	f043 0310 	orr.w	r3, r3, #16
 8007408:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007410:	4b1a      	ldr	r3, [pc, #104]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	4a19      	ldr	r2, [pc, #100]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007416:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800741a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800741c:	e00f      	b.n	800743e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d106      	bne.n	8007432 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007424:	4b15      	ldr	r3, [pc, #84]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	4a14      	ldr	r2, [pc, #80]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 800742a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800742e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007430:	e005      	b.n	800743e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007432:	4b12      	ldr	r3, [pc, #72]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	4a11      	ldr	r2, [pc, #68]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800743c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800743e:	4b0f      	ldr	r3, [pc, #60]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a0e      	ldr	r2, [pc, #56]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007444:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744a:	f7f9 ff73 	bl	8001334 <HAL_GetTick>
 800744e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007450:	e008      	b.n	8007464 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007452:	f7f9 ff6f 	bl	8001334 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e006      	b.n	8007472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <RCCEx_PLL2_Config+0x15c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f0      	beq.n	8007452 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	58024400 	.word	0x58024400
 8007480:	ffff0007 	.word	0xffff0007

08007484 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007492:	4b53      	ldr	r3, [pc, #332]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d101      	bne.n	80074a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e099      	b.n	80075d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074a2:	4b4f      	ldr	r3, [pc, #316]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4e      	ldr	r2, [pc, #312]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7f9 ff41 	bl	8001334 <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074b6:	f7f9 ff3d 	bl	8001334 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e086      	b.n	80075d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c8:	4b45      	ldr	r3, [pc, #276]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f0      	bne.n	80074b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074d4:	4b42      	ldr	r3, [pc, #264]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	051b      	lsls	r3, r3, #20
 80074e2:	493f      	ldr	r1, [pc, #252]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	025b      	lsls	r3, r3, #9
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	3b01      	subs	r3, #1
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007518:	4931      	ldr	r1, [pc, #196]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800751e:	4b30      	ldr	r3, [pc, #192]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	492d      	ldr	r1, [pc, #180]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007530:	4b2b      	ldr	r3, [pc, #172]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4928      	ldr	r1, [pc, #160]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007542:	4b27      	ldr	r3, [pc, #156]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	4a26      	ldr	r2, [pc, #152]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800754c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800754e:	4b24      	ldr	r3, [pc, #144]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007552:	4b24      	ldr	r3, [pc, #144]	@ (80075e4 <RCCEx_PLL3_Config+0x160>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	69d2      	ldr	r2, [r2, #28]
 800755a:	00d2      	lsls	r2, r2, #3
 800755c:	4920      	ldr	r1, [pc, #128]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800755e:	4313      	orrs	r3, r2
 8007560:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007562:	4b1f      	ldr	r3, [pc, #124]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	4a1e      	ldr	r2, [pc, #120]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800756c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800757a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800757e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007580:	e00f      	b.n	80075a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007588:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4a14      	ldr	r2, [pc, #80]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800758e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007594:	e005      	b.n	80075a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007596:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 800759c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075a2:	4b0f      	ldr	r3, [pc, #60]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a0e      	ldr	r2, [pc, #56]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ae:	f7f9 fec1 	bl	8001334 <HAL_GetTick>
 80075b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075b4:	e008      	b.n	80075c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075b6:	f7f9 febd 	bl	8001334 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <RCCEx_PLL3_Config+0x15c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400
 80075e4:	ffff0007 	.word	0xffff0007

080075e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e049      	b.n	800768e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7f9 fd50 	bl	80010b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f000 fe52 	bl	80082d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e049      	b.n	800773c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f841 	bl	8007744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2202      	movs	r2, #2
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f000 fdfb 	bl	80082d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f001 f9d6 	bl	8008b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a3e      	ldr	r2, [pc, #248]	@ (8007870 <HAL_TIM_PWM_Stop+0x118>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIM_PWM_Stop+0x4a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a3d      	ldr	r2, [pc, #244]	@ (8007874 <HAL_TIM_PWM_Stop+0x11c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_PWM_Stop+0x4a>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a3b      	ldr	r2, [pc, #236]	@ (8007878 <HAL_TIM_PWM_Stop+0x120>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_PWM_Stop+0x4a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a3a      	ldr	r2, [pc, #232]	@ (800787c <HAL_TIM_PWM_Stop+0x124>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIM_PWM_Stop+0x4a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a38      	ldr	r2, [pc, #224]	@ (8007880 <HAL_TIM_PWM_Stop+0x128>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_PWM_Stop+0x4e>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <HAL_TIM_PWM_Stop+0x50>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d017      	beq.n	80077dc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6a1a      	ldr	r2, [r3, #32]
 80077b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077b6:	4013      	ands	r3, r2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10f      	bne.n	80077dc <HAL_TIM_PWM_Stop+0x84>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d107      	bne.n	80077dc <HAL_TIM_PWM_Stop+0x84>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a1a      	ldr	r2, [r3, #32]
 80077e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10f      	bne.n	800780c <HAL_TIM_PWM_Stop+0xb4>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6a1a      	ldr	r2, [r3, #32]
 80077f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80077f6:	4013      	ands	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d107      	bne.n	800780c <HAL_TIM_PWM_Stop+0xb4>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0201 	bic.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_TIM_PWM_Stop+0xc4>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800781a:	e023      	b.n	8007864 <HAL_TIM_PWM_Stop+0x10c>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b04      	cmp	r3, #4
 8007820:	d104      	bne.n	800782c <HAL_TIM_PWM_Stop+0xd4>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800782a:	e01b      	b.n	8007864 <HAL_TIM_PWM_Stop+0x10c>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b08      	cmp	r3, #8
 8007830:	d104      	bne.n	800783c <HAL_TIM_PWM_Stop+0xe4>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800783a:	e013      	b.n	8007864 <HAL_TIM_PWM_Stop+0x10c>
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d104      	bne.n	800784c <HAL_TIM_PWM_Stop+0xf4>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800784a:	e00b      	b.n	8007864 <HAL_TIM_PWM_Stop+0x10c>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b10      	cmp	r3, #16
 8007850:	d104      	bne.n	800785c <HAL_TIM_PWM_Stop+0x104>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800785a:	e003      	b.n	8007864 <HAL_TIM_PWM_Stop+0x10c>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40010000 	.word	0x40010000
 8007874:	40010400 	.word	0x40010400
 8007878:	40014000 	.word	0x40014000
 800787c:	40014400 	.word	0x40014400
 8007880:	40014800 	.word	0x40014800

08007884 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	bf0c      	ite	eq
 80078a8:	2301      	moveq	r3, #1
 80078aa:	2300      	movne	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e03c      	b.n	800792a <HAL_TIM_PWM_Start_DMA+0xa6>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d109      	bne.n	80078ca <HAL_TIM_PWM_Start_DMA+0x46>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	bf0c      	ite	eq
 80078c2:	2301      	moveq	r3, #1
 80078c4:	2300      	movne	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	e02f      	b.n	800792a <HAL_TIM_PWM_Start_DMA+0xa6>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d109      	bne.n	80078e4 <HAL_TIM_PWM_Start_DMA+0x60>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e022      	b.n	800792a <HAL_TIM_PWM_Start_DMA+0xa6>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b0c      	cmp	r3, #12
 80078e8:	d109      	bne.n	80078fe <HAL_TIM_PWM_Start_DMA+0x7a>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	bf0c      	ite	eq
 80078f6:	2301      	moveq	r3, #1
 80078f8:	2300      	movne	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	e015      	b.n	800792a <HAL_TIM_PWM_Start_DMA+0xa6>
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b10      	cmp	r3, #16
 8007902:	d109      	bne.n	8007918 <HAL_TIM_PWM_Start_DMA+0x94>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	bf0c      	ite	eq
 8007910:	2301      	moveq	r3, #1
 8007912:	2300      	movne	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	e008      	b.n	800792a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
 8007930:	e1ba      	b.n	8007ca8 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d109      	bne.n	800794c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	bf0c      	ite	eq
 8007944:	2301      	moveq	r3, #1
 8007946:	2300      	movne	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	e03c      	b.n	80079c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b04      	cmp	r3, #4
 8007950:	d109      	bne.n	8007966 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	bf0c      	ite	eq
 800795e:	2301      	moveq	r3, #1
 8007960:	2300      	movne	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	e02f      	b.n	80079c6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d109      	bne.n	8007980 <HAL_TIM_PWM_Start_DMA+0xfc>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	bf0c      	ite	eq
 8007978:	2301      	moveq	r3, #1
 800797a:	2300      	movne	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	e022      	b.n	80079c6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b0c      	cmp	r3, #12
 8007984:	d109      	bne.n	800799a <HAL_TIM_PWM_Start_DMA+0x116>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	bf0c      	ite	eq
 8007992:	2301      	moveq	r3, #1
 8007994:	2300      	movne	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	e015      	b.n	80079c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b10      	cmp	r3, #16
 800799e:	d109      	bne.n	80079b4 <HAL_TIM_PWM_Start_DMA+0x130>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	bf0c      	ite	eq
 80079ac:	2301      	moveq	r3, #1
 80079ae:	2300      	movne	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	e008      	b.n	80079c6 <HAL_TIM_PWM_Start_DMA+0x142>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b01      	cmp	r3, #1
 80079be:	bf0c      	ite	eq
 80079c0:	2301      	moveq	r3, #1
 80079c2:	2300      	movne	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d034      	beq.n	8007a34 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <HAL_TIM_PWM_Start_DMA+0x152>
 80079d0:	887b      	ldrh	r3, [r7, #2]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e166      	b.n	8007ca8 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <HAL_TIM_PWM_Start_DMA+0x166>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e8:	e026      	b.n	8007a38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_PWM_Start_DMA+0x176>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079f8:	e01e      	b.n	8007a38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d104      	bne.n	8007a0a <HAL_TIM_PWM_Start_DMA+0x186>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a08:	e016      	b.n	8007a38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b0c      	cmp	r3, #12
 8007a0e:	d104      	bne.n	8007a1a <HAL_TIM_PWM_Start_DMA+0x196>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a18:	e00e      	b.n	8007a38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b10      	cmp	r3, #16
 8007a1e:	d104      	bne.n	8007a2a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a28:	e006      	b.n	8007a38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a32:	e001      	b.n	8007a38 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e137      	b.n	8007ca8 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b0c      	cmp	r3, #12
 8007a3c:	f200 80ae 	bhi.w	8007b9c <HAL_TIM_PWM_Start_DMA+0x318>
 8007a40:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a7d 	.word	0x08007a7d
 8007a4c:	08007b9d 	.word	0x08007b9d
 8007a50:	08007b9d 	.word	0x08007b9d
 8007a54:	08007b9d 	.word	0x08007b9d
 8007a58:	08007ac5 	.word	0x08007ac5
 8007a5c:	08007b9d 	.word	0x08007b9d
 8007a60:	08007b9d 	.word	0x08007b9d
 8007a64:	08007b9d 	.word	0x08007b9d
 8007a68:	08007b0d 	.word	0x08007b0d
 8007a6c:	08007b9d 	.word	0x08007b9d
 8007a70:	08007b9d 	.word	0x08007b9d
 8007a74:	08007b9d 	.word	0x08007b9d
 8007a78:	08007b55 	.word	0x08007b55
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	4a8b      	ldr	r2, [pc, #556]	@ (8007cb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007a82:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a88:	4a8a      	ldr	r2, [pc, #552]	@ (8007cb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a90:	4a89      	ldr	r2, [pc, #548]	@ (8007cb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007a92:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3334      	adds	r3, #52	@ 0x34
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	887b      	ldrh	r3, [r7, #2]
 8007aa4:	f7fa f956 	bl	8001d54 <HAL_DMA_Start_IT>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e0fa      	b.n	8007ca8 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ac0:	60da      	str	r2, [r3, #12]
      break;
 8007ac2:	e06e      	b.n	8007ba2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	4a79      	ldr	r2, [pc, #484]	@ (8007cb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007aca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	4a78      	ldr	r2, [pc, #480]	@ (8007cb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007ad2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	4a77      	ldr	r2, [pc, #476]	@ (8007cb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007ada:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3338      	adds	r3, #56	@ 0x38
 8007ae8:	461a      	mov	r2, r3
 8007aea:	887b      	ldrh	r3, [r7, #2]
 8007aec:	f7fa f932 	bl	8001d54 <HAL_DMA_Start_IT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e0d6      	b.n	8007ca8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b08:	60da      	str	r2, [r3, #12]
      break;
 8007b0a:	e04a      	b.n	8007ba2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b10:	4a67      	ldr	r2, [pc, #412]	@ (8007cb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007b12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	4a66      	ldr	r2, [pc, #408]	@ (8007cb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b20:	4a65      	ldr	r2, [pc, #404]	@ (8007cb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007b22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	333c      	adds	r3, #60	@ 0x3c
 8007b30:	461a      	mov	r2, r3
 8007b32:	887b      	ldrh	r3, [r7, #2]
 8007b34:	f7fa f90e 	bl	8001d54 <HAL_DMA_Start_IT>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e0b2      	b.n	8007ca8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b50:	60da      	str	r2, [r3, #12]
      break;
 8007b52:	e026      	b.n	8007ba2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b58:	4a55      	ldr	r2, [pc, #340]	@ (8007cb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b60:	4a54      	ldr	r2, [pc, #336]	@ (8007cb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007b62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b68:	4a53      	ldr	r2, [pc, #332]	@ (8007cb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3340      	adds	r3, #64	@ 0x40
 8007b78:	461a      	mov	r2, r3
 8007b7a:	887b      	ldrh	r3, [r7, #2]
 8007b7c:	f7fa f8ea 	bl	8001d54 <HAL_DMA_Start_IT>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e08e      	b.n	8007ca8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b98:	60da      	str	r2, [r3, #12]
      break;
 8007b9a:	e002      	b.n	8007ba2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d17e      	bne.n	8007ca6 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2201      	movs	r2, #1
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 ffb3 	bl	8008b1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a40      	ldr	r2, [pc, #256]	@ (8007cbc <HAL_TIM_PWM_Start_DMA+0x438>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <HAL_TIM_PWM_Start_DMA+0x364>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8007cc0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00e      	beq.n	8007be8 <HAL_TIM_PWM_Start_DMA+0x364>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a3d      	ldr	r2, [pc, #244]	@ (8007cc4 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d009      	beq.n	8007be8 <HAL_TIM_PWM_Start_DMA+0x364>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a3b      	ldr	r2, [pc, #236]	@ (8007cc8 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_TIM_PWM_Start_DMA+0x364>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a3a      	ldr	r2, [pc, #232]	@ (8007ccc <HAL_TIM_PWM_Start_DMA+0x448>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d101      	bne.n	8007bec <HAL_TIM_PWM_Start_DMA+0x368>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <HAL_TIM_PWM_Start_DMA+0x36a>
 8007bec:	2300      	movs	r3, #0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a2d      	ldr	r2, [pc, #180]	@ (8007cbc <HAL_TIM_PWM_Start_DMA+0x438>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d02c      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c14:	d027      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d022      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2b      	ldr	r2, [pc, #172]	@ (8007cd4 <HAL_TIM_PWM_Start_DMA+0x450>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd8 <HAL_TIM_PWM_Start_DMA+0x454>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d018      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a21      	ldr	r2, [pc, #132]	@ (8007cc0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a26      	ldr	r2, [pc, #152]	@ (8007cdc <HAL_TIM_PWM_Start_DMA+0x458>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc4 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a22      	ldr	r2, [pc, #136]	@ (8007ce0 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a20      	ldr	r2, [pc, #128]	@ (8007ce4 <HAL_TIM_PWM_Start_DMA+0x460>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d115      	bne.n	8007c92 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce8 <HAL_TIM_PWM_Start_DMA+0x464>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b06      	cmp	r3, #6
 8007c76:	d015      	beq.n	8007ca4 <HAL_TIM_PWM_Start_DMA+0x420>
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c7e:	d011      	beq.n	8007ca4 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c90:	e008      	b.n	8007ca4 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0201 	orr.w	r2, r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e000      	b.n	8007ca6 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	080081bf 	.word	0x080081bf
 8007cb4:	08008267 	.word	0x08008267
 8007cb8:	0800812d 	.word	0x0800812d
 8007cbc:	40010000 	.word	0x40010000
 8007cc0:	40010400 	.word	0x40010400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	40014400 	.word	0x40014400
 8007ccc:	40014800 	.word	0x40014800
 8007cd0:	40000400 	.word	0x40000400
 8007cd4:	40000800 	.word	0x40000800
 8007cd8:	40000c00 	.word	0x40000c00
 8007cdc:	40001800 	.word	0x40001800
 8007ce0:	4000e000 	.word	0x4000e000
 8007ce4:	4000e400 	.word	0x4000e400
 8007ce8:	00010007 	.word	0x00010007

08007cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e0ff      	b.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b14      	cmp	r3, #20
 8007d16:	f200 80f0 	bhi.w	8007efa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d75 	.word	0x08007d75
 8007d24:	08007efb 	.word	0x08007efb
 8007d28:	08007efb 	.word	0x08007efb
 8007d2c:	08007efb 	.word	0x08007efb
 8007d30:	08007db5 	.word	0x08007db5
 8007d34:	08007efb 	.word	0x08007efb
 8007d38:	08007efb 	.word	0x08007efb
 8007d3c:	08007efb 	.word	0x08007efb
 8007d40:	08007df7 	.word	0x08007df7
 8007d44:	08007efb 	.word	0x08007efb
 8007d48:	08007efb 	.word	0x08007efb
 8007d4c:	08007efb 	.word	0x08007efb
 8007d50:	08007e37 	.word	0x08007e37
 8007d54:	08007efb 	.word	0x08007efb
 8007d58:	08007efb 	.word	0x08007efb
 8007d5c:	08007efb 	.word	0x08007efb
 8007d60:	08007e79 	.word	0x08007e79
 8007d64:	08007efb 	.word	0x08007efb
 8007d68:	08007efb 	.word	0x08007efb
 8007d6c:	08007efb 	.word	0x08007efb
 8007d70:	08007eb9 	.word	0x08007eb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fb5a 	bl	8008434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0208 	orr.w	r2, r2, #8
 8007d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0204 	bic.w	r2, r2, #4
 8007d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6999      	ldr	r1, [r3, #24]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	619a      	str	r2, [r3, #24]
      break;
 8007db2:	e0a5      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fbca 	bl	8008554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6999      	ldr	r1, [r3, #24]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	021a      	lsls	r2, r3, #8
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	619a      	str	r2, [r3, #24]
      break;
 8007df4:	e084      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68b9      	ldr	r1, [r7, #8]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fc33 	bl	8008668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0208 	orr.w	r2, r2, #8
 8007e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0204 	bic.w	r2, r2, #4
 8007e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69d9      	ldr	r1, [r3, #28]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	61da      	str	r2, [r3, #28]
      break;
 8007e34:	e064      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fc9b 	bl	8008778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69da      	ldr	r2, [r3, #28]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69da      	ldr	r2, [r3, #28]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69d9      	ldr	r1, [r3, #28]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	021a      	lsls	r2, r3, #8
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	61da      	str	r2, [r3, #28]
      break;
 8007e76:	e043      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fce4 	bl	800884c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0204 	bic.w	r2, r2, #4
 8007ea2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007eb6:	e023      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fd28 	bl	8008914 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ee2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	021a      	lsls	r2, r3, #8
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ef8:	e002      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	75fb      	strb	r3, [r7, #23]
      break;
 8007efe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e0dc      	b.n	80080ea <HAL_TIM_ConfigClockSource+0x1d6>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80080f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a64      	ldr	r2, [pc, #400]	@ (80080f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	f000 80a9 	beq.w	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8007f6c:	4a62      	ldr	r2, [pc, #392]	@ (80080f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	f200 80ae 	bhi.w	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007f74:	4a61      	ldr	r2, [pc, #388]	@ (80080fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	f000 80a1 	beq.w	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8007f7c:	4a5f      	ldr	r2, [pc, #380]	@ (80080fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	f200 80a6 	bhi.w	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007f84:	4a5e      	ldr	r2, [pc, #376]	@ (8008100 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	f000 8099 	beq.w	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8007f8c:	4a5c      	ldr	r2, [pc, #368]	@ (8008100 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	f200 809e 	bhi.w	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007f94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f98:	f000 8091 	beq.w	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8007f9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007fa0:	f200 8096 	bhi.w	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fa8:	f000 8089 	beq.w	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8007fac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fb0:	f200 808e 	bhi.w	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb8:	d03e      	beq.n	8008038 <HAL_TIM_ConfigClockSource+0x124>
 8007fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fbe:	f200 8087 	bhi.w	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc6:	f000 8086 	beq.w	80080d6 <HAL_TIM_ConfigClockSource+0x1c2>
 8007fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fce:	d87f      	bhi.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fd0:	2b70      	cmp	r3, #112	@ 0x70
 8007fd2:	d01a      	beq.n	800800a <HAL_TIM_ConfigClockSource+0xf6>
 8007fd4:	2b70      	cmp	r3, #112	@ 0x70
 8007fd6:	d87b      	bhi.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fd8:	2b60      	cmp	r3, #96	@ 0x60
 8007fda:	d050      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x16a>
 8007fdc:	2b60      	cmp	r3, #96	@ 0x60
 8007fde:	d877      	bhi.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fe0:	2b50      	cmp	r3, #80	@ 0x50
 8007fe2:	d03c      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x14a>
 8007fe4:	2b50      	cmp	r3, #80	@ 0x50
 8007fe6:	d873      	bhi.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fe8:	2b40      	cmp	r3, #64	@ 0x40
 8007fea:	d058      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x18a>
 8007fec:	2b40      	cmp	r3, #64	@ 0x40
 8007fee:	d86f      	bhi.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff0:	2b30      	cmp	r3, #48	@ 0x30
 8007ff2:	d064      	beq.n	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8007ff4:	2b30      	cmp	r3, #48	@ 0x30
 8007ff6:	d86b      	bhi.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d060      	beq.n	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d867      	bhi.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d05c      	beq.n	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8008004:	2b10      	cmp	r3, #16
 8008006:	d05a      	beq.n	80080be <HAL_TIM_ConfigClockSource+0x1aa>
 8008008:	e062      	b.n	80080d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800801a:	f000 fd5f 	bl	8008adc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800802c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	609a      	str	r2, [r3, #8]
      break;
 8008036:	e04f      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008048:	f000 fd48 	bl	8008adc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800805a:	609a      	str	r2, [r3, #8]
      break;
 800805c:	e03c      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800806a:	461a      	mov	r2, r3
 800806c:	f000 fcb8 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2150      	movs	r1, #80	@ 0x50
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fd12 	bl	8008aa0 <TIM_ITRx_SetConfig>
      break;
 800807c:	e02c      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800808a:	461a      	mov	r2, r3
 800808c:	f000 fcd7 	bl	8008a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2160      	movs	r1, #96	@ 0x60
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fd02 	bl	8008aa0 <TIM_ITRx_SetConfig>
      break;
 800809c:	e01c      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080aa:	461a      	mov	r2, r3
 80080ac:	f000 fc98 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2140      	movs	r1, #64	@ 0x40
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fcf2 	bl	8008aa0 <TIM_ITRx_SetConfig>
      break;
 80080bc:	e00c      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4619      	mov	r1, r3
 80080c8:	4610      	mov	r0, r2
 80080ca:	f000 fce9 	bl	8008aa0 <TIM_ITRx_SetConfig>
      break;
 80080ce:	e003      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]
      break;
 80080d4:	e000      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80080d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	ffceff88 	.word	0xffceff88
 80080f8:	00100040 	.word	0x00100040
 80080fc:	00100030 	.word	0x00100030
 8008100:	00100020 	.word	0x00100020

08008104 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d107      	bne.n	8008154 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2201      	movs	r2, #1
 8008148:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008152:	e02a      	b.n	80081aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	429a      	cmp	r2, r3
 800815c:	d107      	bne.n	800816e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2202      	movs	r2, #2
 8008162:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800816c:	e01d      	b.n	80081aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d107      	bne.n	8008188 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2204      	movs	r2, #4
 800817c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008186:	e010      	b.n	80081aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	d107      	bne.n	80081a2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2208      	movs	r2, #8
 8008196:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081a0:	e003      	b.n	80081aa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff ffb4 	bl	8008118 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	771a      	strb	r2, [r3, #28]
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d10b      	bne.n	80081ee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d136      	bne.n	8008252 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081ec:	e031      	b.n	8008252 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d10b      	bne.n	8008210 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2202      	movs	r2, #2
 80081fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d125      	bne.n	8008252 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800820e:	e020      	b.n	8008252 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d10b      	bne.n	8008232 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2204      	movs	r2, #4
 800821e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d114      	bne.n	8008252 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008230:	e00f      	b.n	8008252 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	429a      	cmp	r2, r3
 800823a:	d10a      	bne.n	8008252 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2208      	movs	r2, #8
 8008240:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d103      	bne.n	8008252 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7f8 fc6c 	bl	8000b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	771a      	strb	r2, [r3, #28]
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008272:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d103      	bne.n	8008286 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	771a      	strb	r2, [r3, #28]
 8008284:	e019      	b.n	80082ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d103      	bne.n	8008298 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2202      	movs	r2, #2
 8008294:	771a      	strb	r2, [r3, #28]
 8008296:	e010      	b.n	80082ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d103      	bne.n	80082aa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2204      	movs	r2, #4
 80082a6:	771a      	strb	r2, [r3, #28]
 80082a8:	e007      	b.n	80082ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d102      	bne.n	80082ba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2208      	movs	r2, #8
 80082b8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff ff22 	bl	8008104 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	771a      	strb	r2, [r3, #28]
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a4a      	ldr	r2, [pc, #296]	@ (800840c <TIM_Base_SetConfig+0x13c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ee:	d00f      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a47      	ldr	r2, [pc, #284]	@ (8008410 <TIM_Base_SetConfig+0x140>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00b      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a46      	ldr	r2, [pc, #280]	@ (8008414 <TIM_Base_SetConfig+0x144>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a45      	ldr	r2, [pc, #276]	@ (8008418 <TIM_Base_SetConfig+0x148>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a44      	ldr	r2, [pc, #272]	@ (800841c <TIM_Base_SetConfig+0x14c>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d108      	bne.n	8008322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a39      	ldr	r2, [pc, #228]	@ (800840c <TIM_Base_SetConfig+0x13c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d027      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008330:	d023      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a36      	ldr	r2, [pc, #216]	@ (8008410 <TIM_Base_SetConfig+0x140>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d01f      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a35      	ldr	r2, [pc, #212]	@ (8008414 <TIM_Base_SetConfig+0x144>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d01b      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a34      	ldr	r2, [pc, #208]	@ (8008418 <TIM_Base_SetConfig+0x148>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d017      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a33      	ldr	r2, [pc, #204]	@ (800841c <TIM_Base_SetConfig+0x14c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a32      	ldr	r2, [pc, #200]	@ (8008420 <TIM_Base_SetConfig+0x150>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00f      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a31      	ldr	r2, [pc, #196]	@ (8008424 <TIM_Base_SetConfig+0x154>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00b      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a30      	ldr	r2, [pc, #192]	@ (8008428 <TIM_Base_SetConfig+0x158>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d007      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2f      	ldr	r2, [pc, #188]	@ (800842c <TIM_Base_SetConfig+0x15c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d003      	beq.n	800837a <TIM_Base_SetConfig+0xaa>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a2e      	ldr	r2, [pc, #184]	@ (8008430 <TIM_Base_SetConfig+0x160>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d108      	bne.n	800838c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a16      	ldr	r2, [pc, #88]	@ (800840c <TIM_Base_SetConfig+0x13c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00f      	beq.n	80083d8 <TIM_Base_SetConfig+0x108>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a18      	ldr	r2, [pc, #96]	@ (800841c <TIM_Base_SetConfig+0x14c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00b      	beq.n	80083d8 <TIM_Base_SetConfig+0x108>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a17      	ldr	r2, [pc, #92]	@ (8008420 <TIM_Base_SetConfig+0x150>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d007      	beq.n	80083d8 <TIM_Base_SetConfig+0x108>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a16      	ldr	r2, [pc, #88]	@ (8008424 <TIM_Base_SetConfig+0x154>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_Base_SetConfig+0x108>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <TIM_Base_SetConfig+0x158>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d103      	bne.n	80083e0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	691a      	ldr	r2, [r3, #16]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d105      	bne.n	80083fe <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f023 0201 	bic.w	r2, r3, #1
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	611a      	str	r2, [r3, #16]
  }
}
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40010000 	.word	0x40010000
 8008410:	40000400 	.word	0x40000400
 8008414:	40000800 	.word	0x40000800
 8008418:	40000c00 	.word	0x40000c00
 800841c:	40010400 	.word	0x40010400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800
 800842c:	4000e000 	.word	0x4000e000
 8008430:	4000e400 	.word	0x4000e400

08008434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	f023 0201 	bic.w	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4b37      	ldr	r3, [pc, #220]	@ (800853c <TIM_OC1_SetConfig+0x108>)
 8008460:	4013      	ands	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f023 0302 	bic.w	r3, r3, #2
 800847c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a2d      	ldr	r2, [pc, #180]	@ (8008540 <TIM_OC1_SetConfig+0x10c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00f      	beq.n	80084b0 <TIM_OC1_SetConfig+0x7c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a2c      	ldr	r2, [pc, #176]	@ (8008544 <TIM_OC1_SetConfig+0x110>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d00b      	beq.n	80084b0 <TIM_OC1_SetConfig+0x7c>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a2b      	ldr	r2, [pc, #172]	@ (8008548 <TIM_OC1_SetConfig+0x114>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d007      	beq.n	80084b0 <TIM_OC1_SetConfig+0x7c>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a2a      	ldr	r2, [pc, #168]	@ (800854c <TIM_OC1_SetConfig+0x118>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d003      	beq.n	80084b0 <TIM_OC1_SetConfig+0x7c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a29      	ldr	r2, [pc, #164]	@ (8008550 <TIM_OC1_SetConfig+0x11c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d10c      	bne.n	80084ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f023 0308 	bic.w	r3, r3, #8
 80084b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f023 0304 	bic.w	r3, r3, #4
 80084c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008540 <TIM_OC1_SetConfig+0x10c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00f      	beq.n	80084f2 <TIM_OC1_SetConfig+0xbe>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008544 <TIM_OC1_SetConfig+0x110>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00b      	beq.n	80084f2 <TIM_OC1_SetConfig+0xbe>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008548 <TIM_OC1_SetConfig+0x114>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d007      	beq.n	80084f2 <TIM_OC1_SetConfig+0xbe>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a19      	ldr	r2, [pc, #100]	@ (800854c <TIM_OC1_SetConfig+0x118>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d003      	beq.n	80084f2 <TIM_OC1_SetConfig+0xbe>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <TIM_OC1_SetConfig+0x11c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d111      	bne.n	8008516 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	621a      	str	r2, [r3, #32]
}
 8008530:	bf00      	nop
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	fffeff8f 	.word	0xfffeff8f
 8008540:	40010000 	.word	0x40010000
 8008544:	40010400 	.word	0x40010400
 8008548:	40014000 	.word	0x40014000
 800854c:	40014400 	.word	0x40014400
 8008550:	40014800 	.word	0x40014800

08008554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f023 0210 	bic.w	r2, r3, #16
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4b34      	ldr	r3, [pc, #208]	@ (8008650 <TIM_OC2_SetConfig+0xfc>)
 8008580:	4013      	ands	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800858a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	021b      	lsls	r3, r3, #8
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f023 0320 	bic.w	r3, r3, #32
 800859e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a29      	ldr	r2, [pc, #164]	@ (8008654 <TIM_OC2_SetConfig+0x100>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_OC2_SetConfig+0x68>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a28      	ldr	r2, [pc, #160]	@ (8008658 <TIM_OC2_SetConfig+0x104>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d10d      	bne.n	80085d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	011b      	lsls	r3, r3, #4
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a1e      	ldr	r2, [pc, #120]	@ (8008654 <TIM_OC2_SetConfig+0x100>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00f      	beq.n	8008600 <TIM_OC2_SetConfig+0xac>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008658 <TIM_OC2_SetConfig+0x104>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00b      	beq.n	8008600 <TIM_OC2_SetConfig+0xac>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a1c      	ldr	r2, [pc, #112]	@ (800865c <TIM_OC2_SetConfig+0x108>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d007      	beq.n	8008600 <TIM_OC2_SetConfig+0xac>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008660 <TIM_OC2_SetConfig+0x10c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d003      	beq.n	8008600 <TIM_OC2_SetConfig+0xac>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008664 <TIM_OC2_SetConfig+0x110>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d113      	bne.n	8008628 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800860e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4313      	orrs	r3, r2
 8008626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	feff8fff 	.word	0xfeff8fff
 8008654:	40010000 	.word	0x40010000
 8008658:	40010400 	.word	0x40010400
 800865c:	40014000 	.word	0x40014000
 8008660:	40014400 	.word	0x40014400
 8008664:	40014800 	.word	0x40014800

08008668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4b33      	ldr	r3, [pc, #204]	@ (8008760 <TIM_OC3_SetConfig+0xf8>)
 8008694:	4013      	ands	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0303 	bic.w	r3, r3, #3
 800869e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a28      	ldr	r2, [pc, #160]	@ (8008764 <TIM_OC3_SetConfig+0xfc>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d003      	beq.n	80086ce <TIM_OC3_SetConfig+0x66>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a27      	ldr	r2, [pc, #156]	@ (8008768 <TIM_OC3_SetConfig+0x100>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d10d      	bne.n	80086ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008764 <TIM_OC3_SetConfig+0xfc>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00f      	beq.n	8008712 <TIM_OC3_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008768 <TIM_OC3_SetConfig+0x100>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00b      	beq.n	8008712 <TIM_OC3_SetConfig+0xaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a1b      	ldr	r2, [pc, #108]	@ (800876c <TIM_OC3_SetConfig+0x104>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d007      	beq.n	8008712 <TIM_OC3_SetConfig+0xaa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a1a      	ldr	r2, [pc, #104]	@ (8008770 <TIM_OC3_SetConfig+0x108>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d003      	beq.n	8008712 <TIM_OC3_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a19      	ldr	r2, [pc, #100]	@ (8008774 <TIM_OC3_SetConfig+0x10c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d113      	bne.n	800873a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	011b      	lsls	r3, r3, #4
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	621a      	str	r2, [r3, #32]
}
 8008754:	bf00      	nop
 8008756:	371c      	adds	r7, #28
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	fffeff8f 	.word	0xfffeff8f
 8008764:	40010000 	.word	0x40010000
 8008768:	40010400 	.word	0x40010400
 800876c:	40014000 	.word	0x40014000
 8008770:	40014400 	.word	0x40014400
 8008774:	40014800 	.word	0x40014800

08008778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4b24      	ldr	r3, [pc, #144]	@ (8008834 <TIM_OC4_SetConfig+0xbc>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	021b      	lsls	r3, r3, #8
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	031b      	lsls	r3, r3, #12
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a19      	ldr	r2, [pc, #100]	@ (8008838 <TIM_OC4_SetConfig+0xc0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00f      	beq.n	80087f8 <TIM_OC4_SetConfig+0x80>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a18      	ldr	r2, [pc, #96]	@ (800883c <TIM_OC4_SetConfig+0xc4>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00b      	beq.n	80087f8 <TIM_OC4_SetConfig+0x80>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a17      	ldr	r2, [pc, #92]	@ (8008840 <TIM_OC4_SetConfig+0xc8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d007      	beq.n	80087f8 <TIM_OC4_SetConfig+0x80>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a16      	ldr	r2, [pc, #88]	@ (8008844 <TIM_OC4_SetConfig+0xcc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_OC4_SetConfig+0x80>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a15      	ldr	r2, [pc, #84]	@ (8008848 <TIM_OC4_SetConfig+0xd0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d109      	bne.n	800880c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	019b      	lsls	r3, r3, #6
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	621a      	str	r2, [r3, #32]
}
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	feff8fff 	.word	0xfeff8fff
 8008838:	40010000 	.word	0x40010000
 800883c:	40010400 	.word	0x40010400
 8008840:	40014000 	.word	0x40014000
 8008844:	40014400 	.word	0x40014400
 8008848:	40014800 	.word	0x40014800

0800884c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4b21      	ldr	r3, [pc, #132]	@ (80088fc <TIM_OC5_SetConfig+0xb0>)
 8008878:	4013      	ands	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800888c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a18      	ldr	r2, [pc, #96]	@ (8008900 <TIM_OC5_SetConfig+0xb4>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00f      	beq.n	80088c2 <TIM_OC5_SetConfig+0x76>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a17      	ldr	r2, [pc, #92]	@ (8008904 <TIM_OC5_SetConfig+0xb8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00b      	beq.n	80088c2 <TIM_OC5_SetConfig+0x76>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a16      	ldr	r2, [pc, #88]	@ (8008908 <TIM_OC5_SetConfig+0xbc>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d007      	beq.n	80088c2 <TIM_OC5_SetConfig+0x76>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a15      	ldr	r2, [pc, #84]	@ (800890c <TIM_OC5_SetConfig+0xc0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d003      	beq.n	80088c2 <TIM_OC5_SetConfig+0x76>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a14      	ldr	r2, [pc, #80]	@ (8008910 <TIM_OC5_SetConfig+0xc4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d109      	bne.n	80088d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	621a      	str	r2, [r3, #32]
}
 80088f0:	bf00      	nop
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	fffeff8f 	.word	0xfffeff8f
 8008900:	40010000 	.word	0x40010000
 8008904:	40010400 	.word	0x40010400
 8008908:	40014000 	.word	0x40014000
 800890c:	40014400 	.word	0x40014400
 8008910:	40014800 	.word	0x40014800

08008914 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4b22      	ldr	r3, [pc, #136]	@ (80089c8 <TIM_OC6_SetConfig+0xb4>)
 8008940:	4013      	ands	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4313      	orrs	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	051b      	lsls	r3, r3, #20
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a19      	ldr	r2, [pc, #100]	@ (80089cc <TIM_OC6_SetConfig+0xb8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d00f      	beq.n	800898c <TIM_OC6_SetConfig+0x78>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a18      	ldr	r2, [pc, #96]	@ (80089d0 <TIM_OC6_SetConfig+0xbc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00b      	beq.n	800898c <TIM_OC6_SetConfig+0x78>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a17      	ldr	r2, [pc, #92]	@ (80089d4 <TIM_OC6_SetConfig+0xc0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d007      	beq.n	800898c <TIM_OC6_SetConfig+0x78>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a16      	ldr	r2, [pc, #88]	@ (80089d8 <TIM_OC6_SetConfig+0xc4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d003      	beq.n	800898c <TIM_OC6_SetConfig+0x78>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a15      	ldr	r2, [pc, #84]	@ (80089dc <TIM_OC6_SetConfig+0xc8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d109      	bne.n	80089a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	029b      	lsls	r3, r3, #10
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	621a      	str	r2, [r3, #32]
}
 80089ba:	bf00      	nop
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	feff8fff 	.word	0xfeff8fff
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40010400 	.word	0x40010400
 80089d4:	40014000 	.word	0x40014000
 80089d8:	40014400 	.word	0x40014400
 80089dc:	40014800 	.word	0x40014800

080089e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 030a 	bic.w	r3, r3, #10
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f023 0210 	bic.w	r2, r3, #16
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	031b      	lsls	r3, r3, #12
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	621a      	str	r2, [r3, #32]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4b09      	ldr	r3, [pc, #36]	@ (8008ad8 <TIM_ITRx_SetConfig+0x38>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f043 0307 	orr.w	r3, r3, #7
 8008ac2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	609a      	str	r2, [r3, #8]
}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	ffcfff8f 	.word	0xffcfff8f

08008adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	021a      	lsls	r2, r3, #8
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	609a      	str	r2, [r3, #8]
}
 8008b10:	bf00      	nop
 8008b12:	371c      	adds	r7, #28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	2201      	movs	r2, #1
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6a1a      	ldr	r2, [r3, #32]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	401a      	ands	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1a      	ldr	r2, [r3, #32]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f003 031f 	and.w	r3, r3, #31
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	fa01 f303 	lsl.w	r3, r1, r3
 8008b54:	431a      	orrs	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e077      	b.n	8008c70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a35      	ldr	r2, [pc, #212]	@ (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d004      	beq.n	8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a34      	ldr	r2, [pc, #208]	@ (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d108      	bne.n	8008bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a25      	ldr	r2, [pc, #148]	@ (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d02c      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf2:	d027      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a22      	ldr	r2, [pc, #136]	@ (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d022      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a21      	ldr	r2, [pc, #132]	@ (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d01d      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d018      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a1a      	ldr	r2, [pc, #104]	@ (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d013      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1b      	ldr	r2, [pc, #108]	@ (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00e      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d009      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a18      	ldr	r2, [pc, #96]	@ (8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d004      	beq.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a17      	ldr	r2, [pc, #92]	@ (8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d10c      	bne.n	8008c5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	40010000 	.word	0x40010000
 8008c80:	40010400 	.word	0x40010400
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40001800 	.word	0x40001800
 8008c94:	40014000 	.word	0x40014000
 8008c98:	4000e000 	.word	0x4000e000
 8008c9c:	4000e400 	.word	0x4000e400

08008ca0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e073      	b.n	8008da4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	041b      	lsls	r3, r3, #16
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a19      	ldr	r2, [pc, #100]	@ (8008db0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d004      	beq.n	8008d58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a18      	ldr	r2, [pc, #96]	@ (8008db4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d11c      	bne.n	8008d92 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d62:	051b      	lsls	r3, r3, #20
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	40010000 	.word	0x40010000
 8008db4:	40010400 	.word	0x40010400

08008db8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008db8:	b084      	sub	sp, #16
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	f107 001c 	add.w	r0, r7, #28
 8008dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d121      	bne.n	8008e16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	4b2c      	ldr	r3, [pc, #176]	@ (8008e94 <USB_CoreInit+0xdc>)
 8008de4:	4013      	ands	r3, r2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008df6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d105      	bne.n	8008e0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 faf6 	bl	800a3fc <USB_CoreReset>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
 8008e14:	e01b      	b.n	8008e4e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 faea 	bl	800a3fc <USB_CoreReset>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e40:	e005      	b.n	8008e4e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e4e:	7fbb      	ldrb	r3, [r7, #30]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d116      	bne.n	8008e82 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e62:	4b0d      	ldr	r3, [pc, #52]	@ (8008e98 <USB_CoreInit+0xe0>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f043 0206 	orr.w	r2, r3, #6
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f043 0220 	orr.w	r2, r3, #32
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e8e:	b004      	add	sp, #16
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	ffbdffbf 	.word	0xffbdffbf
 8008e98:	03ee0000 	.word	0x03ee0000

08008e9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d165      	bne.n	8008f7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4a41      	ldr	r2, [pc, #260]	@ (8008fb8 <USB_SetTurnaroundTime+0x11c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d906      	bls.n	8008ec6 <USB_SetTurnaroundTime+0x2a>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	4a40      	ldr	r2, [pc, #256]	@ (8008fbc <USB_SetTurnaroundTime+0x120>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d202      	bcs.n	8008ec6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ec0:	230f      	movs	r3, #15
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	e062      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8008fbc <USB_SetTurnaroundTime+0x120>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d306      	bcc.n	8008edc <USB_SetTurnaroundTime+0x40>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8008fc0 <USB_SetTurnaroundTime+0x124>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d202      	bcs.n	8008edc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008ed6:	230e      	movs	r3, #14
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e057      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	4a38      	ldr	r2, [pc, #224]	@ (8008fc0 <USB_SetTurnaroundTime+0x124>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d306      	bcc.n	8008ef2 <USB_SetTurnaroundTime+0x56>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4a37      	ldr	r2, [pc, #220]	@ (8008fc4 <USB_SetTurnaroundTime+0x128>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d202      	bcs.n	8008ef2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008eec:	230d      	movs	r3, #13
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	e04c      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	4a33      	ldr	r2, [pc, #204]	@ (8008fc4 <USB_SetTurnaroundTime+0x128>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d306      	bcc.n	8008f08 <USB_SetTurnaroundTime+0x6c>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	4a32      	ldr	r2, [pc, #200]	@ (8008fc8 <USB_SetTurnaroundTime+0x12c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d802      	bhi.n	8008f08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f02:	230c      	movs	r3, #12
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e041      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008fc8 <USB_SetTurnaroundTime+0x12c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d906      	bls.n	8008f1e <USB_SetTurnaroundTime+0x82>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4a2e      	ldr	r2, [pc, #184]	@ (8008fcc <USB_SetTurnaroundTime+0x130>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d802      	bhi.n	8008f1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f18:	230b      	movs	r3, #11
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	e036      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4a2a      	ldr	r2, [pc, #168]	@ (8008fcc <USB_SetTurnaroundTime+0x130>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d906      	bls.n	8008f34 <USB_SetTurnaroundTime+0x98>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4a29      	ldr	r2, [pc, #164]	@ (8008fd0 <USB_SetTurnaroundTime+0x134>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d802      	bhi.n	8008f34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f2e:	230a      	movs	r3, #10
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	e02b      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4a26      	ldr	r2, [pc, #152]	@ (8008fd0 <USB_SetTurnaroundTime+0x134>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d906      	bls.n	8008f4a <USB_SetTurnaroundTime+0xae>
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4a25      	ldr	r2, [pc, #148]	@ (8008fd4 <USB_SetTurnaroundTime+0x138>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d202      	bcs.n	8008f4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f44:	2309      	movs	r3, #9
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e020      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	4a21      	ldr	r2, [pc, #132]	@ (8008fd4 <USB_SetTurnaroundTime+0x138>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d306      	bcc.n	8008f60 <USB_SetTurnaroundTime+0xc4>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	4a20      	ldr	r2, [pc, #128]	@ (8008fd8 <USB_SetTurnaroundTime+0x13c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d802      	bhi.n	8008f60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f5a:	2308      	movs	r3, #8
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e015      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4a1d      	ldr	r2, [pc, #116]	@ (8008fd8 <USB_SetTurnaroundTime+0x13c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d906      	bls.n	8008f76 <USB_SetTurnaroundTime+0xda>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008fdc <USB_SetTurnaroundTime+0x140>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d202      	bcs.n	8008f76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f70:	2307      	movs	r3, #7
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e00a      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f76:	2306      	movs	r3, #6
 8008f78:	617b      	str	r3, [r7, #20]
 8008f7a:	e007      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f82:	2309      	movs	r3, #9
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e001      	b.n	8008f8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f88:	2309      	movs	r3, #9
 8008f8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	029b      	lsls	r3, r3, #10
 8008fa0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	00d8acbf 	.word	0x00d8acbf
 8008fbc:	00e4e1c0 	.word	0x00e4e1c0
 8008fc0:	00f42400 	.word	0x00f42400
 8008fc4:	01067380 	.word	0x01067380
 8008fc8:	011a499f 	.word	0x011a499f
 8008fcc:	01312cff 	.word	0x01312cff
 8008fd0:	014ca43f 	.word	0x014ca43f
 8008fd4:	016e3600 	.word	0x016e3600
 8008fd8:	01a6ab1f 	.word	0x01a6ab1f
 8008fdc:	01e84800 	.word	0x01e84800

08008fe0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f043 0201 	orr.w	r2, r3, #1
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f023 0201 	bic.w	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d115      	bne.n	8009072 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009052:	200a      	movs	r0, #10
 8009054:	f7f8 f97a 	bl	800134c <HAL_Delay>
      ms += 10U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	330a      	adds	r3, #10
 800905c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 f93b 	bl	800a2da <USB_GetMode>
 8009064:	4603      	mov	r3, r0
 8009066:	2b01      	cmp	r3, #1
 8009068:	d01e      	beq.n	80090a8 <USB_SetCurrentMode+0x84>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2bc7      	cmp	r3, #199	@ 0xc7
 800906e:	d9f0      	bls.n	8009052 <USB_SetCurrentMode+0x2e>
 8009070:	e01a      	b.n	80090a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d115      	bne.n	80090a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009084:	200a      	movs	r0, #10
 8009086:	f7f8 f961 	bl	800134c <HAL_Delay>
      ms += 10U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	330a      	adds	r3, #10
 800908e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 f922 	bl	800a2da <USB_GetMode>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <USB_SetCurrentMode+0x84>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2bc7      	cmp	r3, #199	@ 0xc7
 80090a0:	d9f0      	bls.n	8009084 <USB_SetCurrentMode+0x60>
 80090a2:	e001      	b.n	80090a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e005      	b.n	80090b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80090ac:	d101      	bne.n	80090b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090bc:	b084      	sub	sp, #16
 80090be:	b580      	push	{r7, lr}
 80090c0:	b086      	sub	sp, #24
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80090ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090d6:	2300      	movs	r3, #0
 80090d8:	613b      	str	r3, [r7, #16]
 80090da:	e009      	b.n	80090f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3340      	adds	r3, #64	@ 0x40
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	3301      	adds	r3, #1
 80090ee:	613b      	str	r3, [r7, #16]
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b0e      	cmp	r3, #14
 80090f4:	d9f2      	bls.n	80090dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d11c      	bne.n	8009138 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800910c:	f043 0302 	orr.w	r3, r3, #2
 8009110:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009116:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e005      	b.n	8009144 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800914a:	461a      	mov	r2, r3
 800914c:	2300      	movs	r3, #0
 800914e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009150:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009154:	2b01      	cmp	r3, #1
 8009156:	d10d      	bne.n	8009174 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f968 	bl	8009438 <USB_SetDevSpeed>
 8009168:	e008      	b.n	800917c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800916a:	2101      	movs	r1, #1
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f963 	bl	8009438 <USB_SetDevSpeed>
 8009172:	e003      	b.n	800917c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009174:	2103      	movs	r1, #3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f95e 	bl	8009438 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800917c:	2110      	movs	r1, #16
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8fa 	bl	8009378 <USB_FlushTxFifo>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f924 	bl	80093dc <USB_FlushRxFifo>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a4:	461a      	mov	r2, r3
 80091a6:	2300      	movs	r3, #0
 80091a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091b0:	461a      	mov	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091bc:	461a      	mov	r2, r3
 80091be:	2300      	movs	r3, #0
 80091c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	e043      	b.n	8009250 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091de:	d118      	bne.n	8009212 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10a      	bne.n	80091fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f2:	461a      	mov	r2, r3
 80091f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e013      	b.n	8009224 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009208:	461a      	mov	r2, r3
 800920a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e008      	b.n	8009224 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921e:	461a      	mov	r2, r3
 8009220:	2300      	movs	r3, #0
 8009222:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009230:	461a      	mov	r2, r3
 8009232:	2300      	movs	r3, #0
 8009234:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009242:	461a      	mov	r2, r3
 8009244:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	3301      	adds	r3, #1
 800924e:	613b      	str	r3, [r7, #16]
 8009250:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009254:	461a      	mov	r2, r3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	4293      	cmp	r3, r2
 800925a:	d3b5      	bcc.n	80091c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800925c:	2300      	movs	r3, #0
 800925e:	613b      	str	r3, [r7, #16]
 8009260:	e043      	b.n	80092ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009274:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009278:	d118      	bne.n	80092ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800928c:	461a      	mov	r2, r3
 800928e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	e013      	b.n	80092be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	461a      	mov	r2, r3
 80092a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	e008      	b.n	80092be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b8:	461a      	mov	r2, r3
 80092ba:	2300      	movs	r3, #0
 80092bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ca:	461a      	mov	r2, r3
 80092cc:	2300      	movs	r3, #0
 80092ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092dc:	461a      	mov	r2, r3
 80092de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3301      	adds	r3, #1
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092ee:	461a      	mov	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d3b5      	bcc.n	8009262 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009308:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009316:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800931c:	2b00      	cmp	r3, #0
 800931e:	d105      	bne.n	800932c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	f043 0210 	orr.w	r2, r3, #16
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699a      	ldr	r2, [r3, #24]
 8009330:	4b0f      	ldr	r3, [pc, #60]	@ (8009370 <USB_DevInit+0x2b4>)
 8009332:	4313      	orrs	r3, r2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009338:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f043 0208 	orr.w	r2, r3, #8
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800934c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009350:	2b01      	cmp	r3, #1
 8009352:	d105      	bne.n	8009360 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	4b06      	ldr	r3, [pc, #24]	@ (8009374 <USB_DevInit+0x2b8>)
 800935a:	4313      	orrs	r3, r2
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800936c:	b004      	add	sp, #16
 800936e:	4770      	bx	lr
 8009370:	803c3800 	.word	0x803c3800
 8009374:	40000004 	.word	0x40000004

08009378 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009392:	d901      	bls.n	8009398 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e01b      	b.n	80093d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	daf2      	bge.n	8009386 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093a0:	2300      	movs	r3, #0
 80093a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	019b      	lsls	r3, r3, #6
 80093a8:	f043 0220 	orr.w	r2, r3, #32
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3301      	adds	r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093bc:	d901      	bls.n	80093c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e006      	b.n	80093d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d0f0      	beq.n	80093b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093f4:	d901      	bls.n	80093fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e018      	b.n	800942c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	daf2      	bge.n	80093e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2210      	movs	r2, #16
 800940a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009418:	d901      	bls.n	800941e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e006      	b.n	800942c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	2b10      	cmp	r3, #16
 8009428:	d0f0      	beq.n	800940c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009458:	4313      	orrs	r3, r2
 800945a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800946a:	b480      	push	{r7}
 800946c:	b087      	sub	sp, #28
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 0306 	and.w	r3, r3, #6
 8009482:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]
 800948e:	e00a      	b.n	80094a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d002      	beq.n	800949c <USB_GetDevSpeed+0x32>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b06      	cmp	r3, #6
 800949a:	d102      	bne.n	80094a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800949c:	2302      	movs	r3, #2
 800949e:	75fb      	strb	r3, [r7, #23]
 80094a0:	e001      	b.n	80094a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80094a2:	230f      	movs	r3, #15
 80094a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	371c      	adds	r7, #28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	785b      	ldrb	r3, [r3, #1]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d139      	bne.n	8009544 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094d6:	69da      	ldr	r2, [r3, #28]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	f003 030f 	and.w	r3, r3, #15
 80094e0:	2101      	movs	r1, #1
 80094e2:	fa01 f303 	lsl.w	r3, r1, r3
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	68f9      	ldr	r1, [r7, #12]
 80094ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094ee:	4313      	orrs	r3, r2
 80094f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d153      	bne.n	80095b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	791b      	ldrb	r3, [r3, #4]
 8009522:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009524:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	059b      	lsls	r3, r3, #22
 800952a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800952c:	431a      	orrs	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	0159      	lsls	r1, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	440b      	add	r3, r1
 8009536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800953a:	4619      	mov	r1, r3
 800953c:	4b20      	ldr	r3, [pc, #128]	@ (80095c0 <USB_ActivateEndpoint+0x10c>)
 800953e:	4313      	orrs	r3, r2
 8009540:	600b      	str	r3, [r1, #0]
 8009542:	e035      	b.n	80095b0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954a:	69da      	ldr	r2, [r3, #28]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f003 030f 	and.w	r3, r3, #15
 8009554:	2101      	movs	r1, #1
 8009556:	fa01 f303 	lsl.w	r3, r1, r3
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	68f9      	ldr	r1, [r7, #12]
 800955e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009562:	4313      	orrs	r3, r2
 8009564:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d119      	bne.n	80095b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	791b      	ldrb	r3, [r3, #4]
 8009596:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009598:	430b      	orrs	r3, r1
 800959a:	431a      	orrs	r2, r3
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	0159      	lsls	r1, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	440b      	add	r3, r1
 80095a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a8:	4619      	mov	r1, r3
 80095aa:	4b05      	ldr	r3, [pc, #20]	@ (80095c0 <USB_ActivateEndpoint+0x10c>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	10008000 	.word	0x10008000

080095c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d161      	bne.n	80096a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095f6:	d11f      	bne.n	8009638 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	0151      	lsls	r1, r2, #5
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	440a      	add	r2, r1
 800960e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009612:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009616:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009632:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800963e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	2101      	movs	r1, #1
 800964a:	fa01 f303 	lsl.w	r3, r1, r3
 800964e:	b29b      	uxth	r3, r3
 8009650:	43db      	mvns	r3, r3
 8009652:	68f9      	ldr	r1, [r7, #12]
 8009654:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009658:	4013      	ands	r3, r2
 800965a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009662:	69da      	ldr	r2, [r3, #28]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	f003 030f 	and.w	r3, r3, #15
 800966c:	2101      	movs	r1, #1
 800966e:	fa01 f303 	lsl.w	r3, r1, r3
 8009672:	b29b      	uxth	r3, r3
 8009674:	43db      	mvns	r3, r3
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800967c:	4013      	ands	r3, r2
 800967e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	0159      	lsls	r1, r3, #5
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	440b      	add	r3, r1
 8009696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800969a:	4619      	mov	r1, r3
 800969c:	4b35      	ldr	r3, [pc, #212]	@ (8009774 <USB_DeactivateEndpoint+0x1b0>)
 800969e:	4013      	ands	r3, r2
 80096a0:	600b      	str	r3, [r1, #0]
 80096a2:	e060      	b.n	8009766 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096ba:	d11f      	bne.n	80096fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	2101      	movs	r1, #1
 800970e:	fa01 f303 	lsl.w	r3, r1, r3
 8009712:	041b      	lsls	r3, r3, #16
 8009714:	43db      	mvns	r3, r3
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800971c:	4013      	ands	r3, r2
 800971e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009726:	69da      	ldr	r2, [r3, #28]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	2101      	movs	r1, #1
 8009732:	fa01 f303 	lsl.w	r3, r1, r3
 8009736:	041b      	lsls	r3, r3, #16
 8009738:	43db      	mvns	r3, r3
 800973a:	68f9      	ldr	r1, [r7, #12]
 800973c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009740:	4013      	ands	r3, r2
 8009742:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	0159      	lsls	r1, r3, #5
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	440b      	add	r3, r1
 800975a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975e:	4619      	mov	r1, r3
 8009760:	4b05      	ldr	r3, [pc, #20]	@ (8009778 <USB_DeactivateEndpoint+0x1b4>)
 8009762:	4013      	ands	r3, r2
 8009764:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	ec337800 	.word	0xec337800
 8009778:	eff37800 	.word	0xeff37800

0800977c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08a      	sub	sp, #40	@ 0x28
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	4613      	mov	r3, r2
 8009788:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	2b01      	cmp	r3, #1
 800979a:	f040 8181 	bne.w	8009aa0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d132      	bne.n	800980c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b2:	691a      	ldr	r2, [r3, #16]
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	0159      	lsls	r1, r3, #5
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	440b      	add	r3, r1
 80097bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c0:	4619      	mov	r1, r3
 80097c2:	4ba5      	ldr	r3, [pc, #660]	@ (8009a58 <USB_EPStartXfer+0x2dc>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f4:	691a      	ldr	r2, [r3, #16]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	0159      	lsls	r1, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	440b      	add	r3, r1
 80097fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009802:	4619      	mov	r1, r3
 8009804:	4b95      	ldr	r3, [pc, #596]	@ (8009a5c <USB_EPStartXfer+0x2e0>)
 8009806:	4013      	ands	r3, r2
 8009808:	610b      	str	r3, [r1, #16]
 800980a:	e092      	b.n	8009932 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009818:	691a      	ldr	r2, [r3, #16]
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	0159      	lsls	r1, r3, #5
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	440b      	add	r3, r1
 8009822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009826:	4619      	mov	r1, r3
 8009828:	4b8c      	ldr	r3, [pc, #560]	@ (8009a5c <USB_EPStartXfer+0x2e0>)
 800982a:	4013      	ands	r3, r2
 800982c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	0159      	lsls	r1, r3, #5
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	440b      	add	r3, r1
 8009844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009848:	4619      	mov	r1, r3
 800984a:	4b83      	ldr	r3, [pc, #524]	@ (8009a58 <USB_EPStartXfer+0x2dc>)
 800984c:	4013      	ands	r3, r2
 800984e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d11a      	bne.n	800988c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	691a      	ldr	r2, [r3, #16]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	429a      	cmp	r2, r3
 8009860:	d903      	bls.n	800986a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	440a      	add	r2, r1
 8009880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009884:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009888:	6113      	str	r3, [r2, #16]
 800988a:	e01b      	b.n	80098c4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009898:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6919      	ldr	r1, [r3, #16]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	440b      	add	r3, r1
 80098a4:	1e59      	subs	r1, r3, #1
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80098ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098b0:	4b6b      	ldr	r3, [pc, #428]	@ (8009a60 <USB_EPStartXfer+0x2e4>)
 80098b2:	400b      	ands	r3, r1
 80098b4:	69b9      	ldr	r1, [r7, #24]
 80098b6:	0148      	lsls	r0, r1, #5
 80098b8:	69f9      	ldr	r1, [r7, #28]
 80098ba:	4401      	add	r1, r0
 80098bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80098c0:	4313      	orrs	r3, r2
 80098c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d0:	691a      	ldr	r2, [r3, #16]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098da:	69b9      	ldr	r1, [r7, #24]
 80098dc:	0148      	lsls	r0, r1, #5
 80098de:	69f9      	ldr	r1, [r7, #28]
 80098e0:	4401      	add	r1, r0
 80098e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80098e6:	4313      	orrs	r3, r2
 80098e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	791b      	ldrb	r3, [r3, #4]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d11f      	bne.n	8009932 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	69ba      	ldr	r2, [r7, #24]
 8009902:	0151      	lsls	r1, r2, #5
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	440a      	add	r2, r1
 8009908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800990c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009910:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	0151      	lsls	r1, r2, #5
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	440a      	add	r2, r1
 8009928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800992c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009930:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d14b      	bne.n	80099d0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d009      	beq.n	8009954 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800994c:	461a      	mov	r2, r3
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	791b      	ldrb	r3, [r3, #4]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d128      	bne.n	80099ae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009968:	2b00      	cmp	r3, #0
 800996a:	d110      	bne.n	800998e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	440a      	add	r2, r1
 8009982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009986:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	e00f      	b.n	80099ae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	0151      	lsls	r1, r2, #5
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	440a      	add	r2, r1
 80099a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	0151      	lsls	r1, r2, #5
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	440a      	add	r2, r1
 80099c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	e16a      	b.n	8009ca6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80099ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	791b      	ldrb	r3, [r3, #4]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d015      	beq.n	8009a24 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8152 	beq.w	8009ca6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	f003 030f 	and.w	r3, r3, #15
 8009a12:	2101      	movs	r1, #1
 8009a14:	fa01 f303 	lsl.w	r3, r1, r3
 8009a18:	69f9      	ldr	r1, [r7, #28]
 8009a1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	634b      	str	r3, [r1, #52]	@ 0x34
 8009a22:	e140      	b.n	8009ca6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d117      	bne.n	8009a64 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	0151      	lsls	r1, r2, #5
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	440a      	add	r2, r1
 8009a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	e016      	b.n	8009a84 <USB_EPStartXfer+0x308>
 8009a56:	bf00      	nop
 8009a58:	e007ffff 	.word	0xe007ffff
 8009a5c:	fff80000 	.word	0xfff80000
 8009a60:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	0151      	lsls	r1, r2, #5
 8009a76:	69fa      	ldr	r2, [r7, #28]
 8009a78:	440a      	add	r2, r1
 8009a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a82:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	68d9      	ldr	r1, [r3, #12]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	b298      	uxth	r0, r3
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4603      	mov	r3, r0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f9b9 	bl	8009e10 <USB_WritePacket>
 8009a9e:	e102      	b.n	8009ca6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	0159      	lsls	r1, r3, #5
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	440b      	add	r3, r1
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aba:	4619      	mov	r1, r3
 8009abc:	4b7c      	ldr	r3, [pc, #496]	@ (8009cb0 <USB_EPStartXfer+0x534>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ace:	691a      	ldr	r2, [r3, #16]
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	0159      	lsls	r1, r3, #5
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	440b      	add	r3, r1
 8009ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009adc:	4619      	mov	r1, r3
 8009ade:	4b75      	ldr	r3, [pc, #468]	@ (8009cb4 <USB_EPStartXfer+0x538>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d12f      	bne.n	8009b4a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	689a      	ldr	r2, [r3, #8]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b0e:	691a      	ldr	r2, [r3, #16]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b18:	69b9      	ldr	r1, [r7, #24]
 8009b1a:	0148      	lsls	r0, r1, #5
 8009b1c:	69f9      	ldr	r1, [r7, #28]
 8009b1e:	4401      	add	r1, r0
 8009b20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b24:	4313      	orrs	r3, r2
 8009b26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	0151      	lsls	r1, r2, #5
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	440a      	add	r2, r1
 8009b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b46:	6113      	str	r3, [r2, #16]
 8009b48:	e05f      	b.n	8009c0a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d123      	bne.n	8009b9a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b68:	69b9      	ldr	r1, [r7, #24]
 8009b6a:	0148      	lsls	r0, r1, #5
 8009b6c:	69f9      	ldr	r1, [r7, #28]
 8009b6e:	4401      	add	r1, r0
 8009b70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b74:	4313      	orrs	r3, r2
 8009b76:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b96:	6113      	str	r3, [r2, #16]
 8009b98:	e037      	b.n	8009c0a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	691a      	ldr	r2, [r3, #16]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	1e5a      	subs	r2, r3, #1
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bae:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	8afa      	ldrh	r2, [r7, #22]
 8009bb6:	fb03 f202 	mul.w	r2, r3, r2
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	8afb      	ldrh	r3, [r7, #22]
 8009bce:	04d9      	lsls	r1, r3, #19
 8009bd0:	4b39      	ldr	r3, [pc, #228]	@ (8009cb8 <USB_EPStartXfer+0x53c>)
 8009bd2:	400b      	ands	r3, r1
 8009bd4:	69b9      	ldr	r1, [r7, #24]
 8009bd6:	0148      	lsls	r0, r1, #5
 8009bd8:	69f9      	ldr	r1, [r7, #28]
 8009bda:	4401      	add	r1, r0
 8009bdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009be0:	4313      	orrs	r3, r2
 8009be2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bfa:	69b9      	ldr	r1, [r7, #24]
 8009bfc:	0148      	lsls	r0, r1, #5
 8009bfe:	69f9      	ldr	r1, [r7, #28]
 8009c00:	4401      	add	r1, r0
 8009c02:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c06:	4313      	orrs	r3, r2
 8009c08:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d10d      	bne.n	8009c2c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d009      	beq.n	8009c2c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	68d9      	ldr	r1, [r3, #12]
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c28:	460a      	mov	r2, r1
 8009c2a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	791b      	ldrb	r3, [r3, #4]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d128      	bne.n	8009c86 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d110      	bne.n	8009c66 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	e00f      	b.n	8009c86 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	0151      	lsls	r1, r2, #5
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	440a      	add	r2, r1
 8009c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c84:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	0151      	lsls	r1, r2, #5
 8009c98:	69fa      	ldr	r2, [r7, #28]
 8009c9a:	440a      	add	r2, r1
 8009c9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ca0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ca4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	fff80000 	.word	0xfff80000
 8009cb4:	e007ffff 	.word	0xe007ffff
 8009cb8:	1ff80000 	.word	0x1ff80000

08009cbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	785b      	ldrb	r3, [r3, #1]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d14a      	bne.n	8009d70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cf2:	f040 8086 	bne.w	8009e02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	7812      	ldrb	r2, [r2, #0]
 8009d0a:	0151      	lsls	r1, r2, #5
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	440a      	add	r2, r1
 8009d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	7812      	ldrb	r2, [r2, #0]
 8009d2e:	0151      	lsls	r1, r2, #5
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	440a      	add	r2, r1
 8009d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	3301      	adds	r3, #1
 8009d42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d902      	bls.n	8009d54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	75fb      	strb	r3, [r7, #23]
          break;
 8009d52:	e056      	b.n	8009e02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d6c:	d0e7      	beq.n	8009d3e <USB_EPStopXfer+0x82>
 8009d6e:	e048      	b.n	8009e02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d88:	d13b      	bne.n	8009e02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	7812      	ldrb	r2, [r2, #0]
 8009d9e:	0151      	lsls	r1, r2, #5
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	440a      	add	r2, r1
 8009da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009da8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009dd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d902      	bls.n	8009de8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	75fb      	strb	r3, [r7, #23]
          break;
 8009de6:	e00c      	b.n	8009e02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e00:	d0e7      	beq.n	8009dd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	371c      	adds	r7, #28
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b089      	sub	sp, #36	@ 0x24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	460b      	mov	r3, r1
 8009e20:	71fb      	strb	r3, [r7, #7]
 8009e22:	4613      	mov	r3, r2
 8009e24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d123      	bne.n	8009e7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e36:	88bb      	ldrh	r3, [r7, #4]
 8009e38:	3303      	adds	r3, #3
 8009e3a:	089b      	lsrs	r3, r3, #2
 8009e3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	e018      	b.n	8009e76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	031a      	lsls	r2, r3, #12
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e50:	461a      	mov	r2, r3
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	3301      	adds	r3, #1
 8009e62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	3301      	adds	r3, #1
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d3e2      	bcc.n	8009e44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3724      	adds	r7, #36	@ 0x24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b08b      	sub	sp, #44	@ 0x2c
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	4613      	mov	r3, r2
 8009e98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ea2:	88fb      	ldrh	r3, [r7, #6]
 8009ea4:	089b      	lsrs	r3, r3, #2
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009eaa:	88fb      	ldrh	r3, [r7, #6]
 8009eac:	f003 0303 	and.w	r3, r3, #3
 8009eb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	623b      	str	r3, [r7, #32]
 8009eb6:	e014      	b.n	8009ee2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	3301      	adds	r3, #1
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	3301      	adds	r3, #1
 8009eda:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	623b      	str	r3, [r7, #32]
 8009ee2:	6a3a      	ldr	r2, [r7, #32]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d3e6      	bcc.n	8009eb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009eea:	8bfb      	ldrh	r3, [r7, #30]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d01e      	beq.n	8009f2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009efa:	461a      	mov	r2, r3
 8009efc:	f107 0310 	add.w	r3, r7, #16
 8009f00:	6812      	ldr	r2, [r2, #0]
 8009f02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f14:	701a      	strb	r2, [r3, #0]
      i++;
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1e:	3301      	adds	r3, #1
 8009f20:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009f22:	8bfb      	ldrh	r3, [r7, #30]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f28:	8bfb      	ldrh	r3, [r7, #30]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1ea      	bne.n	8009f04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	372c      	adds	r7, #44	@ 0x2c
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	785b      	ldrb	r3, [r3, #1]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d12c      	bne.n	8009fb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	db12      	blt.n	8009f90 <USB_EPSetStall+0x54>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00f      	beq.n	8009f90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009f8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	0151      	lsls	r1, r2, #5
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009faa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	e02b      	b.n	800a00a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	db12      	blt.n	8009fea <USB_EPSetStall+0xae>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00f      	beq.n	8009fea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	0151      	lsls	r1, r2, #5
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	440a      	add	r2, r1
 8009fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fe4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009fe8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	015a      	lsls	r2, r3, #5
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	0151      	lsls	r1, r2, #5
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	440a      	add	r2, r1
 800a000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a008:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	785b      	ldrb	r3, [r3, #1]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d128      	bne.n	800a086 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a04e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a052:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	791b      	ldrb	r3, [r3, #4]
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d003      	beq.n	800a064 <USB_EPClearStall+0x4c>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	791b      	ldrb	r3, [r3, #4]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d138      	bne.n	800a0d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a07e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	e027      	b.n	800a0d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a0a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	791b      	ldrb	r3, [r3, #4]
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d003      	beq.n	800a0b6 <USB_EPClearStall+0x9e>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	791b      	ldrb	r3, [r3, #4]
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d10f      	bne.n	800a0d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a102:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a106:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a11e:	4313      	orrs	r3, r2
 800a120:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a14a:	f023 0303 	bic.w	r3, r3, #3
 800a14e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a15e:	f023 0302 	bic.w	r3, r3, #2
 800a162:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a172:	b480      	push	{r7}
 800a174:	b085      	sub	sp, #20
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a18c:	f023 0303 	bic.w	r3, r3, #3
 800a190:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1a0:	f043 0302 	orr.w	r3, r3, #2
 800a1a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	0c1b      	lsrs	r3, r3, #16
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4013      	ands	r3, r2
 800a230:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	b29b      	uxth	r3, r3
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a252:	78fb      	ldrb	r3, [r7, #3]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	4013      	ands	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a270:	68bb      	ldr	r3, [r7, #8]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a27e:	b480      	push	{r7}
 800a280:	b087      	sub	sp, #28
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ae:	01db      	lsls	r3, r3, #7
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	371c      	adds	r7, #28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
	...

0800a2f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a312:	4619      	mov	r1, r3
 800a314:	4b09      	ldr	r3, [pc, #36]	@ (800a33c <USB_ActivateSetup+0x44>)
 800a316:	4013      	ands	r3, r2
 800a318:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a32c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	fffff800 	.word	0xfffff800

0800a340 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	460b      	mov	r3, r1
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	333c      	adds	r3, #60	@ 0x3c
 800a356:	3304      	adds	r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	4a26      	ldr	r2, [pc, #152]	@ (800a3f8 <USB_EP0_OutStart+0xb8>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d90a      	bls.n	800a37a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a374:	d101      	bne.n	800a37a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	e037      	b.n	800a3ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a380:	461a      	mov	r2, r3
 800a382:	2300      	movs	r3, #0
 800a384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a8:	f043 0318 	orr.w	r3, r3, #24
 800a3ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a3c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10f      	bne.n	800a3e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a3e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	4f54300a 	.word	0x4f54300a

0800a3fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3301      	adds	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a414:	d901      	bls.n	800a41a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e01b      	b.n	800a452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	daf2      	bge.n	800a408 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f043 0201 	orr.w	r2, r3, #1
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a43e:	d901      	bls.n	800a444 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e006      	b.n	800a452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d0f0      	beq.n	800a432 <USB_CoreReset+0x36>

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a46c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a470:	f002 fc5c 	bl	800cd2c <USBD_static_malloc>
 800a474:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	32b0      	adds	r2, #176	@ 0xb0
 800a486:	2100      	movs	r1, #0
 800a488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a48c:	2302      	movs	r3, #2
 800a48e:	e0d4      	b.n	800a63a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a490:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a494:	2100      	movs	r1, #0
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f002 fc8c 	bl	800cdb4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	32b0      	adds	r2, #176	@ 0xb0
 800a4a6:	68f9      	ldr	r1, [r7, #12]
 800a4a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	32b0      	adds	r2, #176	@ 0xb0
 800a4b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	7c1b      	ldrb	r3, [r3, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d138      	bne.n	800a53a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4c8:	4b5e      	ldr	r3, [pc, #376]	@ (800a644 <USBD_CDC_Init+0x1e4>)
 800a4ca:	7819      	ldrb	r1, [r3, #0]
 800a4cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f002 fb07 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a644 <USBD_CDC_Init+0x1e4>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	f003 020f 	and.w	r2, r3, #15
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	440b      	add	r3, r1
 800a4ec:	3324      	adds	r3, #36	@ 0x24
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a4f2:	4b55      	ldr	r3, [pc, #340]	@ (800a648 <USBD_CDC_Init+0x1e8>)
 800a4f4:	7819      	ldrb	r1, [r3, #0]
 800a4f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f002 faf2 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a502:	4b51      	ldr	r3, [pc, #324]	@ (800a648 <USBD_CDC_Init+0x1e8>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	f003 020f 	and.w	r2, r3, #15
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	440b      	add	r3, r1
 800a516:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a51a:	2201      	movs	r2, #1
 800a51c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a51e:	4b4b      	ldr	r3, [pc, #300]	@ (800a64c <USBD_CDC_Init+0x1ec>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	f003 020f 	and.w	r2, r3, #15
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	440b      	add	r3, r1
 800a532:	3326      	adds	r3, #38	@ 0x26
 800a534:	2210      	movs	r2, #16
 800a536:	801a      	strh	r2, [r3, #0]
 800a538:	e035      	b.n	800a5a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a53a:	4b42      	ldr	r3, [pc, #264]	@ (800a644 <USBD_CDC_Init+0x1e4>)
 800a53c:	7819      	ldrb	r1, [r3, #0]
 800a53e:	2340      	movs	r3, #64	@ 0x40
 800a540:	2202      	movs	r2, #2
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f002 facf 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a548:	4b3e      	ldr	r3, [pc, #248]	@ (800a644 <USBD_CDC_Init+0x1e4>)
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	f003 020f 	and.w	r2, r3, #15
 800a550:	6879      	ldr	r1, [r7, #4]
 800a552:	4613      	mov	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	440b      	add	r3, r1
 800a55c:	3324      	adds	r3, #36	@ 0x24
 800a55e:	2201      	movs	r2, #1
 800a560:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a562:	4b39      	ldr	r3, [pc, #228]	@ (800a648 <USBD_CDC_Init+0x1e8>)
 800a564:	7819      	ldrb	r1, [r3, #0]
 800a566:	2340      	movs	r3, #64	@ 0x40
 800a568:	2202      	movs	r2, #2
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f002 fabb 	bl	800cae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a570:	4b35      	ldr	r3, [pc, #212]	@ (800a648 <USBD_CDC_Init+0x1e8>)
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	f003 020f 	and.w	r2, r3, #15
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	440b      	add	r3, r1
 800a584:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a588:	2201      	movs	r2, #1
 800a58a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a58c:	4b2f      	ldr	r3, [pc, #188]	@ (800a64c <USBD_CDC_Init+0x1ec>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f003 020f 	and.w	r2, r3, #15
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	4613      	mov	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	440b      	add	r3, r1
 800a5a0:	3326      	adds	r3, #38	@ 0x26
 800a5a2:	2210      	movs	r2, #16
 800a5a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5a6:	4b29      	ldr	r3, [pc, #164]	@ (800a64c <USBD_CDC_Init+0x1ec>)
 800a5a8:	7819      	ldrb	r1, [r3, #0]
 800a5aa:	2308      	movs	r3, #8
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f002 fa99 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a5b4:	4b25      	ldr	r3, [pc, #148]	@ (800a64c <USBD_CDC_Init+0x1ec>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	f003 020f 	and.w	r2, r3, #15
 800a5bc:	6879      	ldr	r1, [r7, #4]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	440b      	add	r3, r1
 800a5c8:	3324      	adds	r3, #36	@ 0x24
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	33b0      	adds	r3, #176	@ 0xb0
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a604:	2302      	movs	r3, #2
 800a606:	e018      	b.n	800a63a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	7c1b      	ldrb	r3, [r3, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10a      	bne.n	800a626 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a610:	4b0d      	ldr	r3, [pc, #52]	@ (800a648 <USBD_CDC_Init+0x1e8>)
 800a612:	7819      	ldrb	r1, [r3, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a61a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f002 fb50 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800a624:	e008      	b.n	800a638 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a626:	4b08      	ldr	r3, [pc, #32]	@ (800a648 <USBD_CDC_Init+0x1e8>)
 800a628:	7819      	ldrb	r1, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a630:	2340      	movs	r3, #64	@ 0x40
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f002 fb46 	bl	800ccc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	24000097 	.word	0x24000097
 800a648:	24000098 	.word	0x24000098
 800a64c:	24000099 	.word	0x24000099

0800a650 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a65c:	4b3a      	ldr	r3, [pc, #232]	@ (800a748 <USBD_CDC_DeInit+0xf8>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f002 fa65 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a668:	4b37      	ldr	r3, [pc, #220]	@ (800a748 <USBD_CDC_DeInit+0xf8>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	f003 020f 	and.w	r2, r3, #15
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	440b      	add	r3, r1
 800a67c:	3324      	adds	r3, #36	@ 0x24
 800a67e:	2200      	movs	r2, #0
 800a680:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a682:	4b32      	ldr	r3, [pc, #200]	@ (800a74c <USBD_CDC_DeInit+0xfc>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f002 fa52 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a68e:	4b2f      	ldr	r3, [pc, #188]	@ (800a74c <USBD_CDC_DeInit+0xfc>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	f003 020f 	and.w	r2, r3, #15
 800a696:	6879      	ldr	r1, [r7, #4]
 800a698:	4613      	mov	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a6aa:	4b29      	ldr	r3, [pc, #164]	@ (800a750 <USBD_CDC_DeInit+0x100>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f002 fa3e 	bl	800cb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a6b6:	4b26      	ldr	r3, [pc, #152]	@ (800a750 <USBD_CDC_DeInit+0x100>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 020f 	and.w	r2, r3, #15
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	3324      	adds	r3, #36	@ 0x24
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a6d0:	4b1f      	ldr	r3, [pc, #124]	@ (800a750 <USBD_CDC_DeInit+0x100>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	f003 020f 	and.w	r2, r3, #15
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	440b      	add	r3, r1
 800a6e4:	3326      	adds	r3, #38	@ 0x26
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	32b0      	adds	r2, #176	@ 0xb0
 800a6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01f      	beq.n	800a73c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	33b0      	adds	r3, #176	@ 0xb0
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	32b0      	adds	r2, #176	@ 0xb0
 800a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71e:	4618      	mov	r0, r3
 800a720:	f002 fb12 	bl	800cd48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32b0      	adds	r2, #176	@ 0xb0
 800a72e:	2100      	movs	r1, #0
 800a730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	24000097 	.word	0x24000097
 800a74c:	24000098 	.word	0x24000098
 800a750:	24000099 	.word	0x24000099

0800a754 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	32b0      	adds	r2, #176	@ 0xb0
 800a768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a772:	2300      	movs	r3, #0
 800a774:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a780:	2303      	movs	r3, #3
 800a782:	e0bf      	b.n	800a904 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d050      	beq.n	800a832 <USBD_CDC_Setup+0xde>
 800a790:	2b20      	cmp	r3, #32
 800a792:	f040 80af 	bne.w	800a8f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	88db      	ldrh	r3, [r3, #6]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d03a      	beq.n	800a814 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	b25b      	sxtb	r3, r3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	da1b      	bge.n	800a7e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	33b0      	adds	r3, #176	@ 0xb0
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a7be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	88d2      	ldrh	r2, [r2, #6]
 800a7c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	88db      	ldrh	r3, [r3, #6]
 800a7ca:	2b07      	cmp	r3, #7
 800a7cc:	bf28      	it	cs
 800a7ce:	2307      	movcs	r3, #7
 800a7d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	89fa      	ldrh	r2, [r7, #14]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 fd7d 	bl	800c2d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a7de:	e090      	b.n	800a902 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	785a      	ldrb	r2, [r3, #1]
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	88db      	ldrh	r3, [r3, #6]
 800a7ee:	2b3f      	cmp	r3, #63	@ 0x3f
 800a7f0:	d803      	bhi.n	800a7fa <USBD_CDC_Setup+0xa6>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	88db      	ldrh	r3, [r3, #6]
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	e000      	b.n	800a7fc <USBD_CDC_Setup+0xa8>
 800a7fa:	2240      	movs	r2, #64	@ 0x40
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a802:	6939      	ldr	r1, [r7, #16]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a80a:	461a      	mov	r2, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 fd8f 	bl	800c330 <USBD_CtlPrepareRx>
      break;
 800a812:	e076      	b.n	800a902 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	33b0      	adds	r3, #176	@ 0xb0
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	7850      	ldrb	r0, [r2, #1]
 800a82a:	2200      	movs	r2, #0
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	4798      	blx	r3
      break;
 800a830:	e067      	b.n	800a902 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b0b      	cmp	r3, #11
 800a838:	d851      	bhi.n	800a8de <USBD_CDC_Setup+0x18a>
 800a83a:	a201      	add	r2, pc, #4	@ (adr r2, 800a840 <USBD_CDC_Setup+0xec>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a871 	.word	0x0800a871
 800a844:	0800a8ed 	.word	0x0800a8ed
 800a848:	0800a8df 	.word	0x0800a8df
 800a84c:	0800a8df 	.word	0x0800a8df
 800a850:	0800a8df 	.word	0x0800a8df
 800a854:	0800a8df 	.word	0x0800a8df
 800a858:	0800a8df 	.word	0x0800a8df
 800a85c:	0800a8df 	.word	0x0800a8df
 800a860:	0800a8df 	.word	0x0800a8df
 800a864:	0800a8df 	.word	0x0800a8df
 800a868:	0800a89b 	.word	0x0800a89b
 800a86c:	0800a8c5 	.word	0x0800a8c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d107      	bne.n	800a88c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a87c:	f107 030a 	add.w	r3, r7, #10
 800a880:	2202      	movs	r2, #2
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f001 fd27 	bl	800c2d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a88a:	e032      	b.n	800a8f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f001 fca5 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 800a894:	2303      	movs	r3, #3
 800a896:	75fb      	strb	r3, [r7, #23]
          break;
 800a898:	e02b      	b.n	800a8f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d107      	bne.n	800a8b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a8a6:	f107 030d 	add.w	r3, r7, #13
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f001 fd12 	bl	800c2d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8b4:	e01d      	b.n	800a8f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 fc90 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8c2:	e016      	b.n	800a8f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d00f      	beq.n	800a8f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 fc83 	bl	800c1de <USBD_CtlError>
            ret = USBD_FAIL;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a8dc:	e008      	b.n	800a8f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 fc7c 	bl	800c1de <USBD_CtlError>
          ret = USBD_FAIL;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a8ea:	e002      	b.n	800a8f2 <USBD_CDC_Setup+0x19e>
          break;
 800a8ec:	bf00      	nop
 800a8ee:	e008      	b.n	800a902 <USBD_CDC_Setup+0x1ae>
          break;
 800a8f0:	bf00      	nop
      }
      break;
 800a8f2:	e006      	b.n	800a902 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f001 fc71 	bl	800c1de <USBD_CtlError>
      ret = USBD_FAIL;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a900:	bf00      	nop
  }

  return (uint8_t)ret;
 800a902:	7dfb      	ldrb	r3, [r7, #23]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	460b      	mov	r3, r1
 800a916:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a91e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32b0      	adds	r2, #176	@ 0xb0
 800a92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a932:	2303      	movs	r3, #3
 800a934:	e065      	b.n	800aa02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	32b0      	adds	r2, #176	@ 0xb0
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 020f 	and.w	r2, r3, #15
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	3318      	adds	r3, #24
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d02f      	beq.n	800a9c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	f003 020f 	and.w	r2, r3, #15
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	440b      	add	r3, r1
 800a972:	3318      	adds	r3, #24
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	78fb      	ldrb	r3, [r7, #3]
 800a978:	f003 010f 	and.w	r1, r3, #15
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	460b      	mov	r3, r1
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	440b      	add	r3, r1
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4403      	add	r3, r0
 800a988:	331c      	adds	r3, #28
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a990:	fb01 f303 	mul.w	r3, r1, r3
 800a994:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a996:	2b00      	cmp	r3, #0
 800a998:	d112      	bne.n	800a9c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	f003 020f 	and.w	r2, r3, #15
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3318      	adds	r3, #24
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9b2:	78f9      	ldrb	r1, [r7, #3]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f002 f962 	bl	800cc82 <USBD_LL_Transmit>
 800a9be:	e01f      	b.n	800aa00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	33b0      	adds	r3, #176	@ 0xb0
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d010      	beq.n	800aa00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	33b0      	adds	r3, #176	@ 0xb0
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	32b0      	adds	r2, #176	@ 0xb0
 800aa20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	32b0      	adds	r2, #176	@ 0xb0
 800aa30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e01a      	b.n	800aa72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa3c:	78fb      	ldrb	r3, [r7, #3]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f002 f960 	bl	800cd06 <USBD_LL_GetRxDataSize>
 800aa46:	4602      	mov	r2, r0
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	33b0      	adds	r3, #176	@ 0xb0
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	32b0      	adds	r2, #176	@ 0xb0
 800aa8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e024      	b.n	800aae6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	33b0      	adds	r3, #176	@ 0xb0
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d019      	beq.n	800aae4 <USBD_CDC_EP0_RxReady+0x6a>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aab6:	2bff      	cmp	r3, #255	@ 0xff
 800aab8:	d014      	beq.n	800aae4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	33b0      	adds	r3, #176	@ 0xb0
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800aad2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aada:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	22ff      	movs	r2, #255	@ 0xff
 800aae0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aaf8:	2182      	movs	r1, #130	@ 0x82
 800aafa:	4818      	ldr	r0, [pc, #96]	@ (800ab5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aafc:	f000 fd0f 	bl	800b51e <USBD_GetEpDesc>
 800ab00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab02:	2101      	movs	r1, #1
 800ab04:	4815      	ldr	r0, [pc, #84]	@ (800ab5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab06:	f000 fd0a 	bl	800b51e <USBD_GetEpDesc>
 800ab0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab0c:	2181      	movs	r1, #129	@ 0x81
 800ab0e:	4813      	ldr	r0, [pc, #76]	@ (800ab5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab10:	f000 fd05 	bl	800b51e <USBD_GetEpDesc>
 800ab14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2210      	movs	r2, #16
 800ab20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d006      	beq.n	800ab36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab30:	711a      	strb	r2, [r3, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d006      	beq.n	800ab4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab44:	711a      	strb	r2, [r3, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2243      	movs	r2, #67	@ 0x43
 800ab4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab50:	4b02      	ldr	r3, [pc, #8]	@ (800ab5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	24000054 	.word	0x24000054

0800ab60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab68:	2182      	movs	r1, #130	@ 0x82
 800ab6a:	4818      	ldr	r0, [pc, #96]	@ (800abcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab6c:	f000 fcd7 	bl	800b51e <USBD_GetEpDesc>
 800ab70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab72:	2101      	movs	r1, #1
 800ab74:	4815      	ldr	r0, [pc, #84]	@ (800abcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab76:	f000 fcd2 	bl	800b51e <USBD_GetEpDesc>
 800ab7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab7c:	2181      	movs	r1, #129	@ 0x81
 800ab7e:	4813      	ldr	r0, [pc, #76]	@ (800abcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab80:	f000 fccd 	bl	800b51e <USBD_GetEpDesc>
 800ab84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	2210      	movs	r2, #16
 800ab90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d006      	beq.n	800aba6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	711a      	strb	r2, [r3, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f042 0202 	orr.w	r2, r2, #2
 800aba4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d006      	beq.n	800abba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	711a      	strb	r2, [r3, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f042 0202 	orr.w	r2, r2, #2
 800abb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2243      	movs	r2, #67	@ 0x43
 800abbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abc0:	4b02      	ldr	r3, [pc, #8]	@ (800abcc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	24000054 	.word	0x24000054

0800abd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abd8:	2182      	movs	r1, #130	@ 0x82
 800abda:	4818      	ldr	r0, [pc, #96]	@ (800ac3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abdc:	f000 fc9f 	bl	800b51e <USBD_GetEpDesc>
 800abe0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abe2:	2101      	movs	r1, #1
 800abe4:	4815      	ldr	r0, [pc, #84]	@ (800ac3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abe6:	f000 fc9a 	bl	800b51e <USBD_GetEpDesc>
 800abea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abec:	2181      	movs	r1, #129	@ 0x81
 800abee:	4813      	ldr	r0, [pc, #76]	@ (800ac3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abf0:	f000 fc95 	bl	800b51e <USBD_GetEpDesc>
 800abf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2210      	movs	r2, #16
 800ac00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d006      	beq.n	800ac16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac10:	711a      	strb	r2, [r3, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d006      	beq.n	800ac2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac24:	711a      	strb	r2, [r3, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2243      	movs	r2, #67	@ 0x43
 800ac2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac30:	4b02      	ldr	r3, [pc, #8]	@ (800ac3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	24000054 	.word	0x24000054

0800ac40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	220a      	movs	r2, #10
 800ac4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac4e:	4b03      	ldr	r3, [pc, #12]	@ (800ac5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	24000010 	.word	0x24000010

0800ac60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e009      	b.n	800ac88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	33b0      	adds	r3, #176	@ 0xb0
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	32b0      	adds	r2, #176	@ 0xb0
 800acaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e008      	b.n	800accc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	32b0      	adds	r2, #176	@ 0xb0
 800acec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e004      	b.n	800ad06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
	...

0800ad14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	32b0      	adds	r2, #176	@ 0xb0
 800ad26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	32b0      	adds	r2, #176	@ 0xb0
 800ad36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e018      	b.n	800ad74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7c1b      	ldrb	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad7c <USBD_CDC_ReceivePacket+0x68>)
 800ad4c:	7819      	ldrb	r1, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 ffb3 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800ad5e:	e008      	b.n	800ad72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad60:	4b06      	ldr	r3, [pc, #24]	@ (800ad7c <USBD_CDC_ReceivePacket+0x68>)
 800ad62:	7819      	ldrb	r1, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad6a:	2340      	movs	r3, #64	@ 0x40
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f001 ffa9 	bl	800ccc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	24000098 	.word	0x24000098

0800ad80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ad94:	2303      	movs	r3, #3
 800ad96:	e01f      	b.n	800add8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	79fa      	ldrb	r2, [r7, #7]
 800adca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f001 fe1d 	bl	800ca0c <USBD_LL_Init>
 800add2:	4603      	mov	r3, r0
 800add4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800add6:	7dfb      	ldrb	r3, [r7, #23]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adea:	2300      	movs	r3, #0
 800adec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e025      	b.n	800ae44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	32ae      	adds	r2, #174	@ 0xae
 800ae0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00f      	beq.n	800ae34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	32ae      	adds	r2, #174	@ 0xae
 800ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae24:	f107 020e 	add.w	r2, r7, #14
 800ae28:	4610      	mov	r0, r2
 800ae2a:	4798      	blx	r3
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 fe2b 	bl	800cab0 <USBD_LL_Start>
 800ae5a:	4603      	mov	r3, r0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d009      	beq.n	800aea8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	78fa      	ldrb	r2, [r7, #3]
 800ae9e:	4611      	mov	r1, r2
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	4798      	blx	r3
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	460b      	mov	r3, r1
 800aebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	78fa      	ldrb	r2, [r7, #3]
 800aecc:	4611      	mov	r1, r2
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aed8:	2303      	movs	r3, #3
 800aeda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f001 f936 	bl	800c16a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800af0c:	461a      	mov	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af1a:	f003 031f 	and.w	r3, r3, #31
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d01a      	beq.n	800af58 <USBD_LL_SetupStage+0x72>
 800af22:	2b02      	cmp	r3, #2
 800af24:	d822      	bhi.n	800af6c <USBD_LL_SetupStage+0x86>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d002      	beq.n	800af30 <USBD_LL_SetupStage+0x4a>
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d00a      	beq.n	800af44 <USBD_LL_SetupStage+0x5e>
 800af2e:	e01d      	b.n	800af6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fb63 	bl	800b604 <USBD_StdDevReq>
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
      break;
 800af42:	e020      	b.n	800af86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fbcb 	bl	800b6e8 <USBD_StdItfReq>
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]
      break;
 800af56:	e016      	b.n	800af86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fc2d 	bl	800b7c0 <USBD_StdEPReq>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]
      break;
 800af6a:	e00c      	b.n	800af86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800af76:	b2db      	uxtb	r3, r3
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f001 fdf8 	bl	800cb70 <USBD_LL_StallEP>
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]
      break;
 800af84:	bf00      	nop
  }

  return ret;
 800af86:	7bfb      	ldrb	r3, [r7, #15]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	460b      	mov	r3, r1
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800afa2:	7afb      	ldrb	r3, [r7, #11]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d16e      	bne.n	800b086 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800afae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	f040 8098 	bne.w	800b0ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	689a      	ldr	r2, [r3, #8]
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d913      	bls.n	800aff0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	1ad2      	subs	r2, r2, r3
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	4293      	cmp	r3, r2
 800afe0:	bf28      	it	cs
 800afe2:	4613      	movcs	r3, r2
 800afe4:	461a      	mov	r2, r3
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f001 f9be 	bl	800c36a <USBD_CtlContinueRx>
 800afee:	e07d      	b.n	800b0ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aff6:	f003 031f 	and.w	r3, r3, #31
 800affa:	2b02      	cmp	r3, #2
 800affc:	d014      	beq.n	800b028 <USBD_LL_DataOutStage+0x98>
 800affe:	2b02      	cmp	r3, #2
 800b000:	d81d      	bhi.n	800b03e <USBD_LL_DataOutStage+0xae>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <USBD_LL_DataOutStage+0x7c>
 800b006:	2b01      	cmp	r3, #1
 800b008:	d003      	beq.n	800b012 <USBD_LL_DataOutStage+0x82>
 800b00a:	e018      	b.n	800b03e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	75bb      	strb	r3, [r7, #22]
            break;
 800b010:	e018      	b.n	800b044 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	4619      	mov	r1, r3
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 fa64 	bl	800b4ea <USBD_CoreFindIF>
 800b022:	4603      	mov	r3, r0
 800b024:	75bb      	strb	r3, [r7, #22]
            break;
 800b026:	e00d      	b.n	800b044 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	4619      	mov	r1, r3
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f000 fa66 	bl	800b504 <USBD_CoreFindEP>
 800b038:	4603      	mov	r3, r0
 800b03a:	75bb      	strb	r3, [r7, #22]
            break;
 800b03c:	e002      	b.n	800b044 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	75bb      	strb	r3, [r7, #22]
            break;
 800b042:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b044:	7dbb      	ldrb	r3, [r7, #22]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d119      	bne.n	800b07e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b03      	cmp	r3, #3
 800b054:	d113      	bne.n	800b07e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b056:	7dba      	ldrb	r2, [r7, #22]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	32ae      	adds	r2, #174	@ 0xae
 800b05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00b      	beq.n	800b07e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b066:	7dba      	ldrb	r2, [r7, #22]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b06e:	7dba      	ldrb	r2, [r7, #22]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	32ae      	adds	r2, #174	@ 0xae
 800b074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f001 f984 	bl	800c38c <USBD_CtlSendStatus>
 800b084:	e032      	b.n	800b0ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b086:	7afb      	ldrb	r3, [r7, #11]
 800b088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	4619      	mov	r1, r3
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 fa37 	bl	800b504 <USBD_CoreFindEP>
 800b096:	4603      	mov	r3, r0
 800b098:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b09a:	7dbb      	ldrb	r3, [r7, #22]
 800b09c:	2bff      	cmp	r3, #255	@ 0xff
 800b09e:	d025      	beq.n	800b0ec <USBD_LL_DataOutStage+0x15c>
 800b0a0:	7dbb      	ldrb	r3, [r7, #22]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d122      	bne.n	800b0ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d117      	bne.n	800b0e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b0b2:	7dba      	ldrb	r2, [r7, #22]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	32ae      	adds	r2, #174	@ 0xae
 800b0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00f      	beq.n	800b0e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b0c2:	7dba      	ldrb	r2, [r7, #22]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b0ca:	7dba      	ldrb	r2, [r7, #22]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	32ae      	adds	r2, #174	@ 0xae
 800b0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	7afa      	ldrb	r2, [r7, #11]
 800b0d8:	4611      	mov	r1, r2
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	4798      	blx	r3
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	e000      	b.n	800b0ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b086      	sub	sp, #24
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	460b      	mov	r3, r1
 800b100:	607a      	str	r2, [r7, #4]
 800b102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b104:	7afb      	ldrb	r3, [r7, #11]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d16f      	bne.n	800b1ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3314      	adds	r3, #20
 800b10e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b116:	2b02      	cmp	r3, #2
 800b118:	d15a      	bne.n	800b1d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	689a      	ldr	r2, [r3, #8]
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	429a      	cmp	r2, r3
 800b124:	d914      	bls.n	800b150 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	689a      	ldr	r2, [r3, #8]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	461a      	mov	r2, r3
 800b13a:	6879      	ldr	r1, [r7, #4]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f001 f8e6 	bl	800c30e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b142:	2300      	movs	r3, #0
 800b144:	2200      	movs	r2, #0
 800b146:	2100      	movs	r1, #0
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f001 fdbb 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800b14e:	e03f      	b.n	800b1d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	68da      	ldr	r2, [r3, #12]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d11c      	bne.n	800b196 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b164:	429a      	cmp	r2, r3
 800b166:	d316      	bcc.n	800b196 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b172:	429a      	cmp	r2, r3
 800b174:	d20f      	bcs.n	800b196 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b176:	2200      	movs	r2, #0
 800b178:	2100      	movs	r1, #0
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f001 f8c7 	bl	800c30e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b188:	2300      	movs	r3, #0
 800b18a:	2200      	movs	r2, #0
 800b18c:	2100      	movs	r1, #0
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f001 fd98 	bl	800ccc4 <USBD_LL_PrepareReceive>
 800b194:	e01c      	b.n	800b1d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d10f      	bne.n	800b1c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d009      	beq.n	800b1c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1c2:	2180      	movs	r1, #128	@ 0x80
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f001 fcd3 	bl	800cb70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f001 f8f1 	bl	800c3b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d03a      	beq.n	800b250 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f7ff fe42 	bl	800ae64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b1e8:	e032      	b.n	800b250 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b1ea:	7afb      	ldrb	r3, [r7, #11]
 800b1ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 f985 	bl	800b504 <USBD_CoreFindEP>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1fe:	7dfb      	ldrb	r3, [r7, #23]
 800b200:	2bff      	cmp	r3, #255	@ 0xff
 800b202:	d025      	beq.n	800b250 <USBD_LL_DataInStage+0x15a>
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d122      	bne.n	800b250 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b03      	cmp	r3, #3
 800b214:	d11c      	bne.n	800b250 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b216:	7dfa      	ldrb	r2, [r7, #23]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	32ae      	adds	r2, #174	@ 0xae
 800b21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d014      	beq.n	800b250 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b226:	7dfa      	ldrb	r2, [r7, #23]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b22e:	7dfa      	ldrb	r2, [r7, #23]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	32ae      	adds	r2, #174	@ 0xae
 800b234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	7afa      	ldrb	r2, [r7, #11]
 800b23c:	4611      	mov	r1, r2
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	4798      	blx	r3
 800b242:	4603      	mov	r3, r0
 800b244:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b246:	7dbb      	ldrb	r3, [r7, #22]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b24c:	7dbb      	ldrb	r3, [r7, #22]
 800b24e:	e000      	b.n	800b252 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b292:	2b00      	cmp	r3, #0
 800b294:	d014      	beq.n	800b2c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00e      	beq.n	800b2c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	6852      	ldr	r2, [r2, #4]
 800b2ae:	b2d2      	uxtb	r2, r2
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	4798      	blx	r3
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2c0:	2340      	movs	r3, #64	@ 0x40
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 fc0d 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2240      	movs	r2, #64	@ 0x40
 800b2d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2dc:	2340      	movs	r3, #64	@ 0x40
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2180      	movs	r1, #128	@ 0x80
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 fbff 	bl	800cae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2240      	movs	r2, #64	@ 0x40
 800b2f2:	621a      	str	r2, [r3, #32]

  return ret;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	78fa      	ldrb	r2, [r7, #3]
 800b30e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b31e:	b480      	push	{r7}
 800b320:	b083      	sub	sp, #12
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d006      	beq.n	800b340 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2204      	movs	r2, #4
 800b344:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b356:	b480      	push	{r7}
 800b358:	b083      	sub	sp, #12
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b04      	cmp	r3, #4
 800b368:	d106      	bne.n	800b378 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b370:	b2da      	uxtb	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b03      	cmp	r3, #3
 800b398:	d110      	bne.n	800b3bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00b      	beq.n	800b3bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3aa:	69db      	ldr	r3, [r3, #28]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d005      	beq.n	800b3bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b6:	69db      	ldr	r3, [r3, #28]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	32ae      	adds	r2, #174	@ 0xae
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e01c      	b.n	800b422 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d115      	bne.n	800b420 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	32ae      	adds	r2, #174	@ 0xae
 800b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	32ae      	adds	r2, #174	@ 0xae
 800b412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	78fa      	ldrb	r2, [r7, #3]
 800b41a:	4611      	mov	r1, r2
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	32ae      	adds	r2, #174	@ 0xae
 800b440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e01c      	b.n	800b486 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b03      	cmp	r3, #3
 800b456:	d115      	bne.n	800b484 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	32ae      	adds	r2, #174	@ 0xae
 800b462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	32ae      	adds	r2, #174	@ 0xae
 800b476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	4611      	mov	r1, r2
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00e      	beq.n	800b4e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6852      	ldr	r2, [r2, #4]
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	4798      	blx	r3
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b510:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b086      	sub	sp, #24
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	885b      	ldrh	r3, [r3, #2]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	7812      	ldrb	r2, [r2, #0]
 800b540:	4293      	cmp	r3, r2
 800b542:	d91f      	bls.n	800b584 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b54a:	e013      	b.n	800b574 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b54c:	f107 030a 	add.w	r3, r7, #10
 800b550:	4619      	mov	r1, r3
 800b552:	6978      	ldr	r0, [r7, #20]
 800b554:	f000 f81b 	bl	800b58e <USBD_GetNextDesc>
 800b558:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	785b      	ldrb	r3, [r3, #1]
 800b55e:	2b05      	cmp	r3, #5
 800b560:	d108      	bne.n	800b574 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	789b      	ldrb	r3, [r3, #2]
 800b56a:	78fa      	ldrb	r2, [r7, #3]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d008      	beq.n	800b582 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	885b      	ldrh	r3, [r3, #2]
 800b578:	b29a      	uxth	r2, r3
 800b57a:	897b      	ldrh	r3, [r7, #10]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d8e5      	bhi.n	800b54c <USBD_GetEpDesc+0x2e>
 800b580:	e000      	b.n	800b584 <USBD_GetEpDesc+0x66>
          break;
 800b582:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b584:	693b      	ldr	r3, [r7, #16]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b58e:	b480      	push	{r7}
 800b590:	b085      	sub	sp, #20
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	7812      	ldrb	r2, [r2, #0]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b087      	sub	sp, #28
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b5e4:	8a3b      	ldrh	r3, [r7, #16]
 800b5e6:	021b      	lsls	r3, r3, #8
 800b5e8:	b21a      	sxth	r2, r3
 800b5ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	b21b      	sxth	r3, r3
 800b5f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b5f4:	89fb      	ldrh	r3, [r7, #14]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	371c      	adds	r7, #28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b61a:	2b40      	cmp	r3, #64	@ 0x40
 800b61c:	d005      	beq.n	800b62a <USBD_StdDevReq+0x26>
 800b61e:	2b40      	cmp	r3, #64	@ 0x40
 800b620:	d857      	bhi.n	800b6d2 <USBD_StdDevReq+0xce>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBD_StdDevReq+0x42>
 800b626:	2b20      	cmp	r3, #32
 800b628:	d153      	bne.n	800b6d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	32ae      	adds	r2, #174	@ 0xae
 800b634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	4798      	blx	r3
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
      break;
 800b644:	e04a      	b.n	800b6dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	785b      	ldrb	r3, [r3, #1]
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d83b      	bhi.n	800b6c6 <USBD_StdDevReq+0xc2>
 800b64e:	a201      	add	r2, pc, #4	@ (adr r2, 800b654 <USBD_StdDevReq+0x50>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b6bd 	.word	0x0800b6bd
 800b65c:	0800b6c7 	.word	0x0800b6c7
 800b660:	0800b6b3 	.word	0x0800b6b3
 800b664:	0800b6c7 	.word	0x0800b6c7
 800b668:	0800b687 	.word	0x0800b687
 800b66c:	0800b67d 	.word	0x0800b67d
 800b670:	0800b6c7 	.word	0x0800b6c7
 800b674:	0800b69f 	.word	0x0800b69f
 800b678:	0800b691 	.word	0x0800b691
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa3c 	bl	800bafc <USBD_GetDescriptor>
          break;
 800b684:	e024      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fbcb 	bl	800be24 <USBD_SetAddress>
          break;
 800b68e:	e01f      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fc0a 	bl	800beac <USBD_SetConfig>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
          break;
 800b69c:	e018      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fcad 	bl	800c000 <USBD_GetConfig>
          break;
 800b6a6:	e013      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fcde 	bl	800c06c <USBD_GetStatus>
          break;
 800b6b0:	e00e      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fd0d 	bl	800c0d4 <USBD_SetFeature>
          break;
 800b6ba:	e009      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fd31 	bl	800c126 <USBD_ClrFeature>
          break;
 800b6c4:	e004      	b.n	800b6d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fd88 	bl	800c1de <USBD_CtlError>
          break;
 800b6ce:	bf00      	nop
      }
      break;
 800b6d0:	e004      	b.n	800b6dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fd82 	bl	800c1de <USBD_CtlError>
      break;
 800b6da:	bf00      	nop
  }

  return ret;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop

0800b6e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6fe:	2b40      	cmp	r3, #64	@ 0x40
 800b700:	d005      	beq.n	800b70e <USBD_StdItfReq+0x26>
 800b702:	2b40      	cmp	r3, #64	@ 0x40
 800b704:	d852      	bhi.n	800b7ac <USBD_StdItfReq+0xc4>
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <USBD_StdItfReq+0x26>
 800b70a:	2b20      	cmp	r3, #32
 800b70c:	d14e      	bne.n	800b7ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b714:	b2db      	uxtb	r3, r3
 800b716:	3b01      	subs	r3, #1
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d840      	bhi.n	800b79e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	889b      	ldrh	r3, [r3, #4]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b01      	cmp	r3, #1
 800b724:	d836      	bhi.n	800b794 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	889b      	ldrh	r3, [r3, #4]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff fedb 	bl	800b4ea <USBD_CoreFindIF>
 800b734:	4603      	mov	r3, r0
 800b736:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2bff      	cmp	r3, #255	@ 0xff
 800b73c:	d01d      	beq.n	800b77a <USBD_StdItfReq+0x92>
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d11a      	bne.n	800b77a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b744:	7bba      	ldrb	r2, [r7, #14]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	32ae      	adds	r2, #174	@ 0xae
 800b74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00f      	beq.n	800b774 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b754:	7bba      	ldrb	r2, [r7, #14]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b75c:	7bba      	ldrb	r2, [r7, #14]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	32ae      	adds	r2, #174	@ 0xae
 800b762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	4798      	blx	r3
 800b76e:	4603      	mov	r3, r0
 800b770:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b772:	e004      	b.n	800b77e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b774:	2303      	movs	r3, #3
 800b776:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b778:	e001      	b.n	800b77e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b77a:	2303      	movs	r3, #3
 800b77c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	88db      	ldrh	r3, [r3, #6]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d110      	bne.n	800b7a8 <USBD_StdItfReq+0xc0>
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10d      	bne.n	800b7a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fdfd 	bl	800c38c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b792:	e009      	b.n	800b7a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fd21 	bl	800c1de <USBD_CtlError>
          break;
 800b79c:	e004      	b.n	800b7a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fd1c 	bl	800c1de <USBD_CtlError>
          break;
 800b7a6:	e000      	b.n	800b7aa <USBD_StdItfReq+0xc2>
          break;
 800b7a8:	bf00      	nop
      }
      break;
 800b7aa:	e004      	b.n	800b7b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fd15 	bl	800c1de <USBD_CtlError>
      break;
 800b7b4:	bf00      	nop
  }

  return ret;
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	889b      	ldrh	r3, [r3, #4]
 800b7d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7dc:	2b40      	cmp	r3, #64	@ 0x40
 800b7de:	d007      	beq.n	800b7f0 <USBD_StdEPReq+0x30>
 800b7e0:	2b40      	cmp	r3, #64	@ 0x40
 800b7e2:	f200 817f 	bhi.w	800bae4 <USBD_StdEPReq+0x324>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d02a      	beq.n	800b840 <USBD_StdEPReq+0x80>
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	f040 817a 	bne.w	800bae4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff fe85 	bl	800b504 <USBD_CoreFindEP>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fe:	7b7b      	ldrb	r3, [r7, #13]
 800b800:	2bff      	cmp	r3, #255	@ 0xff
 800b802:	f000 8174 	beq.w	800baee <USBD_StdEPReq+0x32e>
 800b806:	7b7b      	ldrb	r3, [r7, #13]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f040 8170 	bne.w	800baee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b80e:	7b7a      	ldrb	r2, [r7, #13]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b816:	7b7a      	ldrb	r2, [r7, #13]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	32ae      	adds	r2, #174	@ 0xae
 800b81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8163 	beq.w	800baee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b828:	7b7a      	ldrb	r2, [r7, #13]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	32ae      	adds	r2, #174	@ 0xae
 800b82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	4798      	blx	r3
 800b83a:	4603      	mov	r3, r0
 800b83c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b83e:	e156      	b.n	800baee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	785b      	ldrb	r3, [r3, #1]
 800b844:	2b03      	cmp	r3, #3
 800b846:	d008      	beq.n	800b85a <USBD_StdEPReq+0x9a>
 800b848:	2b03      	cmp	r3, #3
 800b84a:	f300 8145 	bgt.w	800bad8 <USBD_StdEPReq+0x318>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 809b 	beq.w	800b98a <USBD_StdEPReq+0x1ca>
 800b854:	2b01      	cmp	r3, #1
 800b856:	d03c      	beq.n	800b8d2 <USBD_StdEPReq+0x112>
 800b858:	e13e      	b.n	800bad8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b02      	cmp	r3, #2
 800b864:	d002      	beq.n	800b86c <USBD_StdEPReq+0xac>
 800b866:	2b03      	cmp	r3, #3
 800b868:	d016      	beq.n	800b898 <USBD_StdEPReq+0xd8>
 800b86a:	e02c      	b.n	800b8c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00d      	beq.n	800b88e <USBD_StdEPReq+0xce>
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	2b80      	cmp	r3, #128	@ 0x80
 800b876:	d00a      	beq.n	800b88e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f001 f977 	bl	800cb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b882:	2180      	movs	r1, #128	@ 0x80
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f001 f973 	bl	800cb70 <USBD_LL_StallEP>
 800b88a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b88c:	e020      	b.n	800b8d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fca4 	bl	800c1de <USBD_CtlError>
              break;
 800b896:	e01b      	b.n	800b8d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	885b      	ldrh	r3, [r3, #2]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10e      	bne.n	800b8be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00b      	beq.n	800b8be <USBD_StdEPReq+0xfe>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b80      	cmp	r3, #128	@ 0x80
 800b8aa:	d008      	beq.n	800b8be <USBD_StdEPReq+0xfe>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	88db      	ldrh	r3, [r3, #6]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 f959 	bl	800cb70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fd64 	bl	800c38c <USBD_CtlSendStatus>

              break;
 800b8c4:	e004      	b.n	800b8d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fc88 	bl	800c1de <USBD_CtlError>
              break;
 800b8ce:	bf00      	nop
          }
          break;
 800b8d0:	e107      	b.n	800bae2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d002      	beq.n	800b8e4 <USBD_StdEPReq+0x124>
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d016      	beq.n	800b910 <USBD_StdEPReq+0x150>
 800b8e2:	e04b      	b.n	800b97c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00d      	beq.n	800b906 <USBD_StdEPReq+0x146>
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b80      	cmp	r3, #128	@ 0x80
 800b8ee:	d00a      	beq.n	800b906 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f001 f93b 	bl	800cb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8fa:	2180      	movs	r1, #128	@ 0x80
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 f937 	bl	800cb70 <USBD_LL_StallEP>
 800b902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b904:	e040      	b.n	800b988 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fc68 	bl	800c1de <USBD_CtlError>
              break;
 800b90e:	e03b      	b.n	800b988 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	885b      	ldrh	r3, [r3, #2]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d136      	bne.n	800b986 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d004      	beq.n	800b92c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b922:	7bbb      	ldrb	r3, [r7, #14]
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 f941 	bl	800cbae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fd2d 	bl	800c38c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fde4 	bl	800b504 <USBD_CoreFindEP>
 800b93c:	4603      	mov	r3, r0
 800b93e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b940:	7b7b      	ldrb	r3, [r7, #13]
 800b942:	2bff      	cmp	r3, #255	@ 0xff
 800b944:	d01f      	beq.n	800b986 <USBD_StdEPReq+0x1c6>
 800b946:	7b7b      	ldrb	r3, [r7, #13]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d11c      	bne.n	800b986 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b94c:	7b7a      	ldrb	r2, [r7, #13]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b954:	7b7a      	ldrb	r2, [r7, #13]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32ae      	adds	r2, #174	@ 0xae
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d010      	beq.n	800b986 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b964:	7b7a      	ldrb	r2, [r7, #13]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	32ae      	adds	r2, #174	@ 0xae
 800b96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b97a:	e004      	b.n	800b986 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fc2d 	bl	800c1de <USBD_CtlError>
              break;
 800b984:	e000      	b.n	800b988 <USBD_StdEPReq+0x1c8>
              break;
 800b986:	bf00      	nop
          }
          break;
 800b988:	e0ab      	b.n	800bae2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b02      	cmp	r3, #2
 800b994:	d002      	beq.n	800b99c <USBD_StdEPReq+0x1dc>
 800b996:	2b03      	cmp	r3, #3
 800b998:	d032      	beq.n	800ba00 <USBD_StdEPReq+0x240>
 800b99a:	e097      	b.n	800bacc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d007      	beq.n	800b9b2 <USBD_StdEPReq+0x1f2>
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	2b80      	cmp	r3, #128	@ 0x80
 800b9a6:	d004      	beq.n	800b9b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fc17 	bl	800c1de <USBD_CtlError>
                break;
 800b9b0:	e091      	b.n	800bad6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	da0b      	bge.n	800b9d2 <USBD_StdEPReq+0x212>
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	3310      	adds	r3, #16
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	e00b      	b.n	800b9ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d8:	4613      	mov	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fc6d 	bl	800c2d8 <USBD_CtlSendData>
              break;
 800b9fe:	e06a      	b.n	800bad6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	da11      	bge.n	800ba2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	f003 020f 	and.w	r2, r3, #15
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	440b      	add	r3, r1
 800ba1a:	3324      	adds	r3, #36	@ 0x24
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d117      	bne.n	800ba52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fbda 	bl	800c1de <USBD_CtlError>
                  break;
 800ba2a:	e054      	b.n	800bad6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	f003 020f 	and.w	r2, r3, #15
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	440b      	add	r3, r1
 800ba3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d104      	bne.n	800ba52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fbc7 	bl	800c1de <USBD_CtlError>
                  break;
 800ba50:	e041      	b.n	800bad6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da0b      	bge.n	800ba72 <USBD_StdEPReq+0x2b2>
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba60:	4613      	mov	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	3310      	adds	r3, #16
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	3304      	adds	r3, #4
 800ba70:	e00b      	b.n	800ba8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	4413      	add	r3, r2
 800ba88:	3304      	adds	r3, #4
 800ba8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d002      	beq.n	800ba98 <USBD_StdEPReq+0x2d8>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b80      	cmp	r3, #128	@ 0x80
 800ba96:	d103      	bne.n	800baa0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e00e      	b.n	800babe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 f8a1 	bl	800cbec <USBD_LL_IsStallEP>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2201      	movs	r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	e002      	b.n	800babe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2202      	movs	r2, #2
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fc07 	bl	800c2d8 <USBD_CtlSendData>
              break;
 800baca:	e004      	b.n	800bad6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fb85 	bl	800c1de <USBD_CtlError>
              break;
 800bad4:	bf00      	nop
          }
          break;
 800bad6:	e004      	b.n	800bae2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fb7f 	bl	800c1de <USBD_CtlError>
          break;
 800bae0:	bf00      	nop
      }
      break;
 800bae2:	e005      	b.n	800baf0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fb79 	bl	800c1de <USBD_CtlError>
      break;
 800baec:	e000      	b.n	800baf0 <USBD_StdEPReq+0x330>
      break;
 800baee:	bf00      	nop
  }

  return ret;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb06:	2300      	movs	r3, #0
 800bb08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	885b      	ldrh	r3, [r3, #2]
 800bb16:	0a1b      	lsrs	r3, r3, #8
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	2b0e      	cmp	r3, #14
 800bb1e:	f200 8152 	bhi.w	800bdc6 <USBD_GetDescriptor+0x2ca>
 800bb22:	a201      	add	r2, pc, #4	@ (adr r2, 800bb28 <USBD_GetDescriptor+0x2c>)
 800bb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb28:	0800bb99 	.word	0x0800bb99
 800bb2c:	0800bbb1 	.word	0x0800bbb1
 800bb30:	0800bbf1 	.word	0x0800bbf1
 800bb34:	0800bdc7 	.word	0x0800bdc7
 800bb38:	0800bdc7 	.word	0x0800bdc7
 800bb3c:	0800bd67 	.word	0x0800bd67
 800bb40:	0800bd93 	.word	0x0800bd93
 800bb44:	0800bdc7 	.word	0x0800bdc7
 800bb48:	0800bdc7 	.word	0x0800bdc7
 800bb4c:	0800bdc7 	.word	0x0800bdc7
 800bb50:	0800bdc7 	.word	0x0800bdc7
 800bb54:	0800bdc7 	.word	0x0800bdc7
 800bb58:	0800bdc7 	.word	0x0800bdc7
 800bb5c:	0800bdc7 	.word	0x0800bdc7
 800bb60:	0800bb65 	.word	0x0800bb65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	7c12      	ldrb	r2, [r2, #16]
 800bb7c:	f107 0108 	add.w	r1, r7, #8
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb86:	e126      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fb27 	bl	800c1de <USBD_CtlError>
        err++;
 800bb90:	7afb      	ldrb	r3, [r7, #11]
 800bb92:	3301      	adds	r3, #1
 800bb94:	72fb      	strb	r3, [r7, #11]
      break;
 800bb96:	e11e      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	7c12      	ldrb	r2, [r2, #16]
 800bba4:	f107 0108 	add.w	r1, r7, #8
 800bba8:	4610      	mov	r0, r2
 800bbaa:	4798      	blx	r3
 800bbac:	60f8      	str	r0, [r7, #12]
      break;
 800bbae:	e112      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	7c1b      	ldrb	r3, [r3, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10d      	bne.n	800bbd4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc0:	f107 0208 	add.w	r2, r7, #8
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	4798      	blx	r3
 800bbc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	2202      	movs	r2, #2
 800bbd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbd2:	e100      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbdc:	f107 0208 	add.w	r2, r7, #8
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4798      	blx	r3
 800bbe4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	2202      	movs	r2, #2
 800bbec:	701a      	strb	r2, [r3, #0]
      break;
 800bbee:	e0f2      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	885b      	ldrh	r3, [r3, #2]
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b05      	cmp	r3, #5
 800bbf8:	f200 80ac 	bhi.w	800bd54 <USBD_GetDescriptor+0x258>
 800bbfc:	a201      	add	r2, pc, #4	@ (adr r2, 800bc04 <USBD_GetDescriptor+0x108>)
 800bbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc02:	bf00      	nop
 800bc04:	0800bc1d 	.word	0x0800bc1d
 800bc08:	0800bc51 	.word	0x0800bc51
 800bc0c:	0800bc85 	.word	0x0800bc85
 800bc10:	0800bcb9 	.word	0x0800bcb9
 800bc14:	0800bced 	.word	0x0800bced
 800bc18:	0800bd21 	.word	0x0800bd21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00b      	beq.n	800bc40 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	7c12      	ldrb	r2, [r2, #16]
 800bc34:	f107 0108 	add.w	r1, r7, #8
 800bc38:	4610      	mov	r0, r2
 800bc3a:	4798      	blx	r3
 800bc3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc3e:	e091      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 facb 	bl	800c1de <USBD_CtlError>
            err++;
 800bc48:	7afb      	ldrb	r3, [r7, #11]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc4e:	e089      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	7c12      	ldrb	r2, [r2, #16]
 800bc68:	f107 0108 	add.w	r1, r7, #8
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	4798      	blx	r3
 800bc70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc72:	e077      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fab1 	bl	800c1de <USBD_CtlError>
            err++;
 800bc7c:	7afb      	ldrb	r3, [r7, #11]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	72fb      	strb	r3, [r7, #11]
          break;
 800bc82:	e06f      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	7c12      	ldrb	r2, [r2, #16]
 800bc9c:	f107 0108 	add.w	r1, r7, #8
 800bca0:	4610      	mov	r0, r2
 800bca2:	4798      	blx	r3
 800bca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bca6:	e05d      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fa97 	bl	800c1de <USBD_CtlError>
            err++;
 800bcb0:	7afb      	ldrb	r3, [r7, #11]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcb6:	e055      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00b      	beq.n	800bcdc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	7c12      	ldrb	r2, [r2, #16]
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcda:	e043      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fa7d 	bl	800c1de <USBD_CtlError>
            err++;
 800bce4:	7afb      	ldrb	r3, [r7, #11]
 800bce6:	3301      	adds	r3, #1
 800bce8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcea:	e03b      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	7c12      	ldrb	r2, [r2, #16]
 800bd04:	f107 0108 	add.w	r1, r7, #8
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0e:	e029      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fa63 	bl	800c1de <USBD_CtlError>
            err++;
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1e:	e021      	b.n	800bd64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	7c12      	ldrb	r2, [r2, #16]
 800bd38:	f107 0108 	add.w	r1, r7, #8
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4798      	blx	r3
 800bd40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd42:	e00f      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fa49 	bl	800c1de <USBD_CtlError>
            err++;
 800bd4c:	7afb      	ldrb	r3, [r7, #11]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	72fb      	strb	r3, [r7, #11]
          break;
 800bd52:	e007      	b.n	800bd64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fa41 	bl	800c1de <USBD_CtlError>
          err++;
 800bd5c:	7afb      	ldrb	r3, [r7, #11]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd62:	bf00      	nop
      }
      break;
 800bd64:	e037      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	7c1b      	ldrb	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd76:	f107 0208 	add.w	r2, r7, #8
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4798      	blx	r3
 800bd7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd80:	e029      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fa2a 	bl	800c1de <USBD_CtlError>
        err++;
 800bd8a:	7afb      	ldrb	r3, [r7, #11]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd90:	e021      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7c1b      	ldrb	r3, [r3, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10d      	bne.n	800bdb6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bda2:	f107 0208 	add.w	r2, r7, #8
 800bda6:	4610      	mov	r0, r2
 800bda8:	4798      	blx	r3
 800bdaa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb4:	e00f      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fa10 	bl	800c1de <USBD_CtlError>
        err++;
 800bdbe:	7afb      	ldrb	r3, [r7, #11]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	72fb      	strb	r3, [r7, #11]
      break;
 800bdc4:	e007      	b.n	800bdd6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fa08 	bl	800c1de <USBD_CtlError>
      err++;
 800bdce:	7afb      	ldrb	r3, [r7, #11]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	72fb      	strb	r3, [r7, #11]
      break;
 800bdd4:	bf00      	nop
  }

  if (err != 0U)
 800bdd6:	7afb      	ldrb	r3, [r7, #11]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d11e      	bne.n	800be1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	88db      	ldrh	r3, [r3, #6]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d016      	beq.n	800be12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bde4:	893b      	ldrh	r3, [r7, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00e      	beq.n	800be08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	88da      	ldrh	r2, [r3, #6]
 800bdee:	893b      	ldrh	r3, [r7, #8]
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	bf28      	it	cs
 800bdf4:	4613      	movcs	r3, r2
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdfa:	893b      	ldrh	r3, [r7, #8]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	68f9      	ldr	r1, [r7, #12]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fa69 	bl	800c2d8 <USBD_CtlSendData>
 800be06:	e009      	b.n	800be1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f9e7 	bl	800c1de <USBD_CtlError>
 800be10:	e004      	b.n	800be1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 faba 	bl	800c38c <USBD_CtlSendStatus>
 800be18:	e000      	b.n	800be1c <USBD_GetDescriptor+0x320>
    return;
 800be1a:	bf00      	nop
  }
}
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop

0800be24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	889b      	ldrh	r3, [r3, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d131      	bne.n	800be9a <USBD_SetAddress+0x76>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	88db      	ldrh	r3, [r3, #6]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d12d      	bne.n	800be9a <USBD_SetAddress+0x76>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	885b      	ldrh	r3, [r3, #2]
 800be42:	2b7f      	cmp	r3, #127	@ 0x7f
 800be44:	d829      	bhi.n	800be9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	885b      	ldrh	r3, [r3, #2]
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d104      	bne.n	800be68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f9bc 	bl	800c1de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be66:	e01d      	b.n	800bea4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7bfa      	ldrb	r2, [r7, #15]
 800be6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be70:	7bfb      	ldrb	r3, [r7, #15]
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fee5 	bl	800cc44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa86 	bl	800c38c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2202      	movs	r2, #2
 800be8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be8e:	e009      	b.n	800bea4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be98:	e004      	b.n	800bea4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f99e 	bl	800c1de <USBD_CtlError>
  }
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	885b      	ldrh	r3, [r3, #2]
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	4b4e      	ldr	r3, [pc, #312]	@ (800bffc <USBD_SetConfig+0x150>)
 800bec2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bec4:	4b4d      	ldr	r3, [pc, #308]	@ (800bffc <USBD_SetConfig+0x150>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d905      	bls.n	800bed8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f985 	bl	800c1de <USBD_CtlError>
    return USBD_FAIL;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e08c      	b.n	800bff2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d002      	beq.n	800beea <USBD_SetConfig+0x3e>
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d029      	beq.n	800bf3c <USBD_SetConfig+0x90>
 800bee8:	e075      	b.n	800bfd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800beea:	4b44      	ldr	r3, [pc, #272]	@ (800bffc <USBD_SetConfig+0x150>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d020      	beq.n	800bf34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bef2:	4b42      	ldr	r3, [pc, #264]	@ (800bffc <USBD_SetConfig+0x150>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800befc:	4b3f      	ldr	r3, [pc, #252]	@ (800bffc <USBD_SetConfig+0x150>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7fe ffb9 	bl	800ae7a <USBD_SetClassConfig>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d008      	beq.n	800bf24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf12:	6839      	ldr	r1, [r7, #0]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f962 	bl	800c1de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf22:	e065      	b.n	800bff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fa31 	bl	800c38c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bf32:	e05d      	b.n	800bff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fa29 	bl	800c38c <USBD_CtlSendStatus>
      break;
 800bf3a:	e059      	b.n	800bff0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf3c:	4b2f      	ldr	r3, [pc, #188]	@ (800bffc <USBD_SetConfig+0x150>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d112      	bne.n	800bf6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bf4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bffc <USBD_SetConfig+0x150>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	461a      	mov	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf56:	4b29      	ldr	r3, [pc, #164]	@ (800bffc <USBD_SetConfig+0x150>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7fe ffa8 	bl	800aeb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa12 	bl	800c38c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf68:	e042      	b.n	800bff0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf6a:	4b24      	ldr	r3, [pc, #144]	@ (800bffc <USBD_SetConfig+0x150>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d02a      	beq.n	800bfce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7fe ff96 	bl	800aeb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf86:	4b1d      	ldr	r3, [pc, #116]	@ (800bffc <USBD_SetConfig+0x150>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf90:	4b1a      	ldr	r3, [pc, #104]	@ (800bffc <USBD_SetConfig+0x150>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7fe ff6f 	bl	800ae7a <USBD_SetClassConfig>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00f      	beq.n	800bfc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f918 	bl	800c1de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7fe ff7b 	bl	800aeb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bfc4:	e014      	b.n	800bff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f9e0 	bl	800c38c <USBD_CtlSendStatus>
      break;
 800bfcc:	e010      	b.n	800bff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f9dc 	bl	800c38c <USBD_CtlSendStatus>
      break;
 800bfd4:	e00c      	b.n	800bff0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f900 	bl	800c1de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfde:	4b07      	ldr	r3, [pc, #28]	@ (800bffc <USBD_SetConfig+0x150>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7fe ff64 	bl	800aeb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bfea:	2303      	movs	r3, #3
 800bfec:	73fb      	strb	r3, [r7, #15]
      break;
 800bfee:	bf00      	nop
  }

  return ret;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	240001ec 	.word	0x240001ec

0800c000 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	88db      	ldrh	r3, [r3, #6]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d004      	beq.n	800c01c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f8e2 	bl	800c1de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c01a:	e023      	b.n	800c064 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b02      	cmp	r3, #2
 800c026:	dc02      	bgt.n	800c02e <USBD_GetConfig+0x2e>
 800c028:	2b00      	cmp	r3, #0
 800c02a:	dc03      	bgt.n	800c034 <USBD_GetConfig+0x34>
 800c02c:	e015      	b.n	800c05a <USBD_GetConfig+0x5a>
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d00b      	beq.n	800c04a <USBD_GetConfig+0x4a>
 800c032:	e012      	b.n	800c05a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3308      	adds	r3, #8
 800c03e:	2201      	movs	r2, #1
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f948 	bl	800c2d8 <USBD_CtlSendData>
        break;
 800c048:	e00c      	b.n	800c064 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3304      	adds	r3, #4
 800c04e:	2201      	movs	r2, #1
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f940 	bl	800c2d8 <USBD_CtlSendData>
        break;
 800c058:	e004      	b.n	800c064 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f8be 	bl	800c1de <USBD_CtlError>
        break;
 800c062:	bf00      	nop
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	2b02      	cmp	r3, #2
 800c082:	d81e      	bhi.n	800c0c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	88db      	ldrh	r3, [r3, #6]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d004      	beq.n	800c096 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f8a5 	bl	800c1de <USBD_CtlError>
        break;
 800c094:	e01a      	b.n	800c0cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d005      	beq.n	800c0b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	f043 0202 	orr.w	r2, r3, #2
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	330c      	adds	r3, #12
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f90c 	bl	800c2d8 <USBD_CtlSendData>
      break;
 800c0c0:	e004      	b.n	800c0cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f88a 	bl	800c1de <USBD_CtlError>
      break;
 800c0ca:	bf00      	nop
  }
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d107      	bne.n	800c0f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f94c 	bl	800c38c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c0f4:	e013      	b.n	800c11e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d10b      	bne.n	800c116 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	889b      	ldrh	r3, [r3, #4]
 800c102:	0a1b      	lsrs	r3, r3, #8
 800c104:	b29b      	uxth	r3, r3
 800c106:	b2da      	uxtb	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f93c 	bl	800c38c <USBD_CtlSendStatus>
}
 800c114:	e003      	b.n	800c11e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f860 	bl	800c1de <USBD_CtlError>
}
 800c11e:	bf00      	nop
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b082      	sub	sp, #8
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c136:	b2db      	uxtb	r3, r3
 800c138:	3b01      	subs	r3, #1
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d80b      	bhi.n	800c156 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	885b      	ldrh	r3, [r3, #2]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d10c      	bne.n	800c160 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 f91c 	bl	800c38c <USBD_CtlSendStatus>
      }
      break;
 800c154:	e004      	b.n	800c160 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f840 	bl	800c1de <USBD_CtlError>
      break;
 800c15e:	e000      	b.n	800c162 <USBD_ClrFeature+0x3c>
      break;
 800c160:	bf00      	nop
  }
}
 800c162:	bf00      	nop
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b084      	sub	sp, #16
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	781a      	ldrb	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3301      	adds	r3, #1
 800c184:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	781a      	ldrb	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3301      	adds	r3, #1
 800c192:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff fa16 	bl	800b5c6 <SWAPBYTE>
 800c19a:	4603      	mov	r3, r0
 800c19c:	461a      	mov	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7ff fa09 	bl	800b5c6 <SWAPBYTE>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7ff f9fc 	bl	800b5c6 <SWAPBYTE>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	80da      	strh	r2, [r3, #6]
}
 800c1d6:	bf00      	nop
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1e8:	2180      	movs	r1, #128	@ 0x80
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fcc0 	bl	800cb70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fcbc 	bl	800cb70 <USBD_LL_StallEP>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d042      	beq.n	800c29c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c21a:	6938      	ldr	r0, [r7, #16]
 800c21c:	f000 f842 	bl	800c2a4 <USBD_GetLen>
 800c220:	4603      	mov	r3, r0
 800c222:	3301      	adds	r3, #1
 800c224:	005b      	lsls	r3, r3, #1
 800c226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c22a:	d808      	bhi.n	800c23e <USBD_GetString+0x3e>
 800c22c:	6938      	ldr	r0, [r7, #16]
 800c22e:	f000 f839 	bl	800c2a4 <USBD_GetLen>
 800c232:	4603      	mov	r3, r0
 800c234:	3301      	adds	r3, #1
 800c236:	b29b      	uxth	r3, r3
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	e001      	b.n	800c242 <USBD_GetString+0x42>
 800c23e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c246:	7dfb      	ldrb	r3, [r7, #23]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	4413      	add	r3, r2
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	7812      	ldrb	r2, [r2, #0]
 800c250:	701a      	strb	r2, [r3, #0]
  idx++;
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	3301      	adds	r3, #1
 800c256:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c258:	7dfb      	ldrb	r3, [r7, #23]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	4413      	add	r3, r2
 800c25e:	2203      	movs	r2, #3
 800c260:	701a      	strb	r2, [r3, #0]
  idx++;
 800c262:	7dfb      	ldrb	r3, [r7, #23]
 800c264:	3301      	adds	r3, #1
 800c266:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c268:	e013      	b.n	800c292 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	4413      	add	r3, r2
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	7812      	ldrb	r2, [r2, #0]
 800c274:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	3301      	adds	r3, #1
 800c27a:	613b      	str	r3, [r7, #16]
    idx++;
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	3301      	adds	r3, #1
 800c280:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c282:	7dfb      	ldrb	r3, [r7, #23]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	4413      	add	r3, r2
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	3301      	adds	r3, #1
 800c290:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e7      	bne.n	800c26a <USBD_GetString+0x6a>
 800c29a:	e000      	b.n	800c29e <USBD_GetString+0x9e>
    return;
 800c29c:	bf00      	nop
  }
}
 800c29e:	3718      	adds	r7, #24
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c2b4:	e005      	b.n	800c2c2 <USBD_GetLen+0x1e>
  {
    len++;
 800c2b6:	7bfb      	ldrb	r3, [r7, #15]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1f5      	bne.n	800c2b6 <USBD_GetLen+0x12>
  }

  return len;
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3714      	adds	r7, #20
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f000 fcbf 	bl	800cc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	2100      	movs	r1, #0
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f000 fcae 	bl	800cc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2203      	movs	r2, #3
 800c340:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	2100      	movs	r1, #0
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 fcb2 	bl	800ccc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	2100      	movs	r1, #0
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 fca1 	bl	800ccc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2204      	movs	r2, #4
 800c398:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c39c:	2300      	movs	r3, #0
 800c39e:	2200      	movs	r2, #0
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fc6d 	bl	800cc82 <USBD_LL_Transmit>

  return USBD_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2205      	movs	r2, #5
 800c3be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fc7b 	bl	800ccc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800c3dc:	2201      	movs	r2, #1
 800c3de:	4913      	ldr	r1, [pc, #76]	@ (800c42c <MX_USB_DEVICE_Init+0x54>)
 800c3e0:	4813      	ldr	r0, [pc, #76]	@ (800c430 <MX_USB_DEVICE_Init+0x58>)
 800c3e2:	f7fe fccd 	bl	800ad80 <USBD_Init>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3ec:	f7f4 fcda 	bl	8000da4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800c3f0:	4910      	ldr	r1, [pc, #64]	@ (800c434 <MX_USB_DEVICE_Init+0x5c>)
 800c3f2:	480f      	ldr	r0, [pc, #60]	@ (800c430 <MX_USB_DEVICE_Init+0x58>)
 800c3f4:	f7fe fcf4 	bl	800ade0 <USBD_RegisterClass>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3fe:	f7f4 fcd1 	bl	8000da4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800c402:	490d      	ldr	r1, [pc, #52]	@ (800c438 <MX_USB_DEVICE_Init+0x60>)
 800c404:	480a      	ldr	r0, [pc, #40]	@ (800c430 <MX_USB_DEVICE_Init+0x58>)
 800c406:	f7fe fc2b 	bl	800ac60 <USBD_CDC_RegisterInterface>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c410:	f7f4 fcc8 	bl	8000da4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800c414:	4806      	ldr	r0, [pc, #24]	@ (800c430 <MX_USB_DEVICE_Init+0x58>)
 800c416:	f7fe fd19 	bl	800ae4c <USBD_Start>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c420:	f7f4 fcc0 	bl	8000da4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c424:	f7f8 fe92 	bl	800514c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c428:	bf00      	nop
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	240000b0 	.word	0x240000b0
 800c430:	240001f0 	.word	0x240001f0
 800c434:	2400001c 	.word	0x2400001c
 800c438:	2400009c 	.word	0x2400009c

0800c43c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800c440:	2200      	movs	r2, #0
 800c442:	4905      	ldr	r1, [pc, #20]	@ (800c458 <CDC_Init_HS+0x1c>)
 800c444:	4805      	ldr	r0, [pc, #20]	@ (800c45c <CDC_Init_HS+0x20>)
 800c446:	f7fe fc25 	bl	800ac94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800c44a:	4905      	ldr	r1, [pc, #20]	@ (800c460 <CDC_Init_HS+0x24>)
 800c44c:	4803      	ldr	r0, [pc, #12]	@ (800c45c <CDC_Init_HS+0x20>)
 800c44e:	f7fe fc43 	bl	800acd8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c452:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c454:	4618      	mov	r0, r3
 800c456:	bd80      	pop	{r7, pc}
 800c458:	24000ccc 	.word	0x24000ccc
 800c45c:	240001f0 	.word	0x240001f0
 800c460:	240004cc 	.word	0x240004cc

0800c464 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800c464:	b480      	push	{r7}
 800c466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800c468:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
 800c480:	4613      	mov	r3, r2
 800c482:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	2b23      	cmp	r3, #35	@ 0x23
 800c488:	d84a      	bhi.n	800c520 <CDC_Control_HS+0xac>
 800c48a:	a201      	add	r2, pc, #4	@ (adr r2, 800c490 <CDC_Control_HS+0x1c>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c521 	.word	0x0800c521
 800c494:	0800c521 	.word	0x0800c521
 800c498:	0800c521 	.word	0x0800c521
 800c49c:	0800c521 	.word	0x0800c521
 800c4a0:	0800c521 	.word	0x0800c521
 800c4a4:	0800c521 	.word	0x0800c521
 800c4a8:	0800c521 	.word	0x0800c521
 800c4ac:	0800c521 	.word	0x0800c521
 800c4b0:	0800c521 	.word	0x0800c521
 800c4b4:	0800c521 	.word	0x0800c521
 800c4b8:	0800c521 	.word	0x0800c521
 800c4bc:	0800c521 	.word	0x0800c521
 800c4c0:	0800c521 	.word	0x0800c521
 800c4c4:	0800c521 	.word	0x0800c521
 800c4c8:	0800c521 	.word	0x0800c521
 800c4cc:	0800c521 	.word	0x0800c521
 800c4d0:	0800c521 	.word	0x0800c521
 800c4d4:	0800c521 	.word	0x0800c521
 800c4d8:	0800c521 	.word	0x0800c521
 800c4dc:	0800c521 	.word	0x0800c521
 800c4e0:	0800c521 	.word	0x0800c521
 800c4e4:	0800c521 	.word	0x0800c521
 800c4e8:	0800c521 	.word	0x0800c521
 800c4ec:	0800c521 	.word	0x0800c521
 800c4f0:	0800c521 	.word	0x0800c521
 800c4f4:	0800c521 	.word	0x0800c521
 800c4f8:	0800c521 	.word	0x0800c521
 800c4fc:	0800c521 	.word	0x0800c521
 800c500:	0800c521 	.word	0x0800c521
 800c504:	0800c521 	.word	0x0800c521
 800c508:	0800c521 	.word	0x0800c521
 800c50c:	0800c521 	.word	0x0800c521
 800c510:	0800c521 	.word	0x0800c521
 800c514:	0800c521 	.word	0x0800c521
 800c518:	0800c521 	.word	0x0800c521
 800c51c:	0800c521 	.word	0x0800c521
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c520:	bf00      	nop
  }

  return (USBD_OK);
 800c522:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	4805      	ldr	r0, [pc, #20]	@ (800c554 <CDC_Receive_HS+0x24>)
 800c53e:	f7fe fbcb 	bl	800acd8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800c542:	4804      	ldr	r0, [pc, #16]	@ (800c554 <CDC_Receive_HS+0x24>)
 800c544:	f7fe fbe6 	bl	800ad14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c548:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	240001f0 	.word	0x240001f0

0800c558 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	4613      	mov	r3, r2
 800c564:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c566:	2300      	movs	r3, #0
 800c568:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800c56a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	371c      	adds	r7, #28
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
	...

0800c57c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	6039      	str	r1, [r7, #0]
 800c586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	2212      	movs	r2, #18
 800c58c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800c58e:	4b03      	ldr	r3, [pc, #12]	@ (800c59c <USBD_HS_DeviceDescriptor+0x20>)
}
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	240000d0 	.word	0x240000d0

0800c5a0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2204      	movs	r2, #4
 800c5b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c5b2:	4b03      	ldr	r3, [pc, #12]	@ (800c5c0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	240000e4 	.word	0x240000e4

0800c5c4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5d0:	79fb      	ldrb	r3, [r7, #7]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d105      	bne.n	800c5e2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	4907      	ldr	r1, [pc, #28]	@ (800c5f8 <USBD_HS_ProductStrDescriptor+0x34>)
 800c5da:	4808      	ldr	r0, [pc, #32]	@ (800c5fc <USBD_HS_ProductStrDescriptor+0x38>)
 800c5dc:	f7ff fe10 	bl	800c200 <USBD_GetString>
 800c5e0:	e004      	b.n	800c5ec <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	4904      	ldr	r1, [pc, #16]	@ (800c5f8 <USBD_HS_ProductStrDescriptor+0x34>)
 800c5e6:	4805      	ldr	r0, [pc, #20]	@ (800c5fc <USBD_HS_ProductStrDescriptor+0x38>)
 800c5e8:	f7ff fe0a 	bl	800c200 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5ec:	4b02      	ldr	r3, [pc, #8]	@ (800c5f8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	240014cc 	.word	0x240014cc
 800c5fc:	0800ce24 	.word	0x0800ce24

0800c600 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	6039      	str	r1, [r7, #0]
 800c60a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	4904      	ldr	r1, [pc, #16]	@ (800c620 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800c610:	4804      	ldr	r0, [pc, #16]	@ (800c624 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800c612:	f7ff fdf5 	bl	800c200 <USBD_GetString>
  return USBD_StrDesc;
 800c616:	4b02      	ldr	r3, [pc, #8]	@ (800c620 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	240014cc 	.word	0x240014cc
 800c624:	0800ce34 	.word	0x0800ce34

0800c628 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	6039      	str	r1, [r7, #0]
 800c632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	221a      	movs	r2, #26
 800c638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c63a:	f000 f843 	bl	800c6c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c63e:	4b02      	ldr	r3, [pc, #8]	@ (800c648 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	240000e8 	.word	0x240000e8

0800c64c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d105      	bne.n	800c66a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	4907      	ldr	r1, [pc, #28]	@ (800c680 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c662:	4808      	ldr	r0, [pc, #32]	@ (800c684 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c664:	f7ff fdcc 	bl	800c200 <USBD_GetString>
 800c668:	e004      	b.n	800c674 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	4904      	ldr	r1, [pc, #16]	@ (800c680 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c66e:	4805      	ldr	r0, [pc, #20]	@ (800c684 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c670:	f7ff fdc6 	bl	800c200 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c674:	4b02      	ldr	r3, [pc, #8]	@ (800c680 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	240014cc 	.word	0x240014cc
 800c684:	0800ce48 	.word	0x0800ce48

0800c688 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	6039      	str	r1, [r7, #0]
 800c692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c694:	79fb      	ldrb	r3, [r7, #7]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d105      	bne.n	800c6a6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	4907      	ldr	r1, [pc, #28]	@ (800c6bc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c69e:	4808      	ldr	r0, [pc, #32]	@ (800c6c0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c6a0:	f7ff fdae 	bl	800c200 <USBD_GetString>
 800c6a4:	e004      	b.n	800c6b0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	4904      	ldr	r1, [pc, #16]	@ (800c6bc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c6aa:	4805      	ldr	r0, [pc, #20]	@ (800c6c0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c6ac:	f7ff fda8 	bl	800c200 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6b0:	4b02      	ldr	r3, [pc, #8]	@ (800c6bc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	240014cc 	.word	0x240014cc
 800c6c0:	0800ce54 	.word	0x0800ce54

0800c6c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c708 <Get_SerialNum+0x44>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6d0:	4b0e      	ldr	r3, [pc, #56]	@ (800c70c <Get_SerialNum+0x48>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800c710 <Get_SerialNum+0x4c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d009      	beq.n	800c6fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6ea:	2208      	movs	r2, #8
 800c6ec:	4909      	ldr	r1, [pc, #36]	@ (800c714 <Get_SerialNum+0x50>)
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 f814 	bl	800c71c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6f4:	2204      	movs	r2, #4
 800c6f6:	4908      	ldr	r1, [pc, #32]	@ (800c718 <Get_SerialNum+0x54>)
 800c6f8:	68b8      	ldr	r0, [r7, #8]
 800c6fa:	f000 f80f 	bl	800c71c <IntToUnicode>
  }
}
 800c6fe:	bf00      	nop
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	1ff1e800 	.word	0x1ff1e800
 800c70c:	1ff1e804 	.word	0x1ff1e804
 800c710:	1ff1e808 	.word	0x1ff1e808
 800c714:	240000ea 	.word	0x240000ea
 800c718:	240000fa 	.word	0x240000fa

0800c71c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	4613      	mov	r3, r2
 800c728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c72e:	2300      	movs	r3, #0
 800c730:	75fb      	strb	r3, [r7, #23]
 800c732:	e027      	b.n	800c784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	0f1b      	lsrs	r3, r3, #28
 800c738:	2b09      	cmp	r3, #9
 800c73a:	d80b      	bhi.n	800c754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	0f1b      	lsrs	r3, r3, #28
 800c740:	b2da      	uxtb	r2, r3
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	4619      	mov	r1, r3
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	440b      	add	r3, r1
 800c74c:	3230      	adds	r2, #48	@ 0x30
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	e00a      	b.n	800c76a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	0f1b      	lsrs	r3, r3, #28
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	4619      	mov	r1, r3
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	440b      	add	r3, r1
 800c764:	3237      	adds	r2, #55	@ 0x37
 800c766:	b2d2      	uxtb	r2, r2
 800c768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	011b      	lsls	r3, r3, #4
 800c76e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	3301      	adds	r3, #1
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	4413      	add	r3, r2
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	3301      	adds	r3, #1
 800c782:	75fb      	strb	r3, [r7, #23]
 800c784:	7dfa      	ldrb	r2, [r7, #23]
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d3d3      	bcc.n	800c734 <IntToUnicode+0x18>
  }
}
 800c78c:	bf00      	nop
 800c78e:	bf00      	nop
 800c790:	371c      	adds	r7, #28
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
	...

0800c79c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b0b2      	sub	sp, #200	@ 0xc8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c7a4:	f107 0310 	add.w	r3, r7, #16
 800c7a8:	22b8      	movs	r2, #184	@ 0xb8
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fb01 	bl	800cdb4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a1a      	ldr	r2, [pc, #104]	@ (800c820 <HAL_PCD_MspInit+0x84>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d12c      	bne.n	800c816 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c7bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c7c0:	f04f 0300 	mov.w	r3, #0
 800c7c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c7c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c7cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c7d0:	f107 0310 	add.w	r3, r7, #16
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7f9 fc03 	bl	8005fe0 <HAL_RCCEx_PeriphCLKConfig>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800c7e0:	f7f4 fae0 	bl	8000da4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c7e4:	f7f8 fcb2 	bl	800514c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c7e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c824 <HAL_PCD_MspInit+0x88>)
 800c7ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c7ee:	4a0d      	ldr	r2, [pc, #52]	@ (800c824 <HAL_PCD_MspInit+0x88>)
 800c7f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c7f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c824 <HAL_PCD_MspInit+0x88>)
 800c7fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c7fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800c806:	2200      	movs	r2, #0
 800c808:	2100      	movs	r1, #0
 800c80a:	204d      	movs	r0, #77	@ 0x4d
 800c80c:	f7f4 fe9d 	bl	800154a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c810:	204d      	movs	r0, #77	@ 0x4d
 800c812:	f7f4 feb4 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c816:	bf00      	nop
 800c818:	37c8      	adds	r7, #200	@ 0xc8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	40040000 	.word	0x40040000
 800c824:	58024400 	.word	0x58024400

0800c828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fe fb51 	bl	800aee6 <USBD_LL_SetupStage>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c85e:	78fa      	ldrb	r2, [r7, #3]
 800c860:	6879      	ldr	r1, [r7, #4]
 800c862:	4613      	mov	r3, r2
 800c864:	00db      	lsls	r3, r3, #3
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	440b      	add	r3, r1
 800c86c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	78fb      	ldrb	r3, [r7, #3]
 800c874:	4619      	mov	r1, r3
 800c876:	f7fe fb8b 	bl	800af90 <USBD_LL_DataOutStage>
}
 800c87a:	bf00      	nop
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b082      	sub	sp, #8
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	460b      	mov	r3, r1
 800c88c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c894:	78fa      	ldrb	r2, [r7, #3]
 800c896:	6879      	ldr	r1, [r7, #4]
 800c898:	4613      	mov	r3, r2
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	4413      	add	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	440b      	add	r3, r1
 800c8a2:	3320      	adds	r3, #32
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	78fb      	ldrb	r3, [r7, #3]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	f7fe fc24 	bl	800b0f6 <USBD_LL_DataInStage>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe fd5e 	bl	800b386 <USBD_LL_SOF>
}
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	79db      	ldrb	r3, [r3, #7]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d102      	bne.n	800c8ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	73fb      	strb	r3, [r7, #15]
 800c8ea:	e008      	b.n	800c8fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	79db      	ldrb	r3, [r3, #7]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d102      	bne.n	800c8fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	73fb      	strb	r3, [r7, #15]
 800c8f8:	e001      	b.n	800c8fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c8fa:	f7f4 fa53 	bl	8000da4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c904:	7bfa      	ldrb	r2, [r7, #15]
 800c906:	4611      	mov	r1, r2
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fe fcf8 	bl	800b2fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fca0 	bl	800b25a <USBD_LL_Reset>
}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe fcf3 	bl	800b31e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6812      	ldr	r2, [r2, #0]
 800c946:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	7adb      	ldrb	r3, [r3, #11]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d005      	beq.n	800c964 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c958:	4b04      	ldr	r3, [pc, #16]	@ (800c96c <HAL_PCD_SuspendCallback+0x48>)
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	4a03      	ldr	r2, [pc, #12]	@ (800c96c <HAL_PCD_SuspendCallback+0x48>)
 800c95e:	f043 0306 	orr.w	r3, r3, #6
 800c962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	e000ed00 	.word	0xe000ed00

0800c970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fe fce9 	bl	800b356 <USBD_LL_Resume>
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c99e:	78fa      	ldrb	r2, [r7, #3]
 800c9a0:	4611      	mov	r1, r2
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fd41 	bl	800b42a <USBD_LL_IsoOUTIncomplete>
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9c2:	78fa      	ldrb	r2, [r7, #3]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fcfd 	bl	800b3c6 <USBD_LL_IsoINIncomplete>
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fe fd53 	bl	800b48e <USBD_LL_DevConnected>
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fd50 	bl	800b4a4 <USBD_LL_DevDisconnected>
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d140      	bne.n	800ca9e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ca1c:	4a22      	ldr	r2, [pc, #136]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a20      	ldr	r2, [pc, #128]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca28:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ca2c:	4b1e      	ldr	r3, [pc, #120]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca2e:	4a1f      	ldr	r2, [pc, #124]	@ (800caac <USBD_LL_Init+0xa0>)
 800ca30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800ca32:	4b1d      	ldr	r3, [pc, #116]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca34:	2209      	movs	r2, #9
 800ca36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800ca38:	4b1b      	ldr	r3, [pc, #108]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ca3e:	4b1a      	ldr	r3, [pc, #104]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ca44:	4b18      	ldr	r3, [pc, #96]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca46:	2202      	movs	r2, #2
 800ca48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ca4a:	4b17      	ldr	r3, [pc, #92]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ca50:	4b15      	ldr	r3, [pc, #84]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ca56:	4b14      	ldr	r3, [pc, #80]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ca5c:	4b12      	ldr	r3, [pc, #72]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ca62:	4b11      	ldr	r3, [pc, #68]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ca68:	4b0f      	ldr	r3, [pc, #60]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ca6e:	480e      	ldr	r0, [pc, #56]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca70:	f7f7 f894 	bl	8003b9c <HAL_PCD_Init>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d001      	beq.n	800ca7e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ca7a:	f7f4 f993 	bl	8000da4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ca7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ca82:	4809      	ldr	r0, [pc, #36]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca84:	f7f8 fae7 	bl	8005056 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ca88:	2280      	movs	r2, #128	@ 0x80
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	4806      	ldr	r0, [pc, #24]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca8e:	f7f8 fa9b 	bl	8004fc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ca92:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800ca96:	2101      	movs	r1, #1
 800ca98:	4803      	ldr	r0, [pc, #12]	@ (800caa8 <USBD_LL_Init+0x9c>)
 800ca9a:	f7f8 fa95 	bl	8004fc8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	240016cc 	.word	0x240016cc
 800caac:	40040000 	.word	0x40040000

0800cab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7f7 f974 	bl	8003db4 <HAL_PCD_Start>
 800cacc:	4603      	mov	r3, r0
 800cace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f942 	bl	800cd5c <USBD_Get_USB_Status>
 800cad8:	4603      	mov	r3, r0
 800cada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	4608      	mov	r0, r1
 800caf0:	4611      	mov	r1, r2
 800caf2:	461a      	mov	r2, r3
 800caf4:	4603      	mov	r3, r0
 800caf6:	70fb      	strb	r3, [r7, #3]
 800caf8:	460b      	mov	r3, r1
 800cafa:	70bb      	strb	r3, [r7, #2]
 800cafc:	4613      	mov	r3, r2
 800cafe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb0e:	78bb      	ldrb	r3, [r7, #2]
 800cb10:	883a      	ldrh	r2, [r7, #0]
 800cb12:	78f9      	ldrb	r1, [r7, #3]
 800cb14:	f7f7 fe75 	bl	8004802 <HAL_PCD_EP_Open>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 f91c 	bl	800cd5c <USBD_Get_USB_Status>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb4c:	78fa      	ldrb	r2, [r7, #3]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f7 febe 	bl	80048d2 <HAL_PCD_EP_Close>
 800cb56:	4603      	mov	r3, r0
 800cb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 f8fd 	bl	800cd5c <USBD_Get_USB_Status>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f7 ff76 	bl	8004a80 <HAL_PCD_EP_SetStall>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 f8de 	bl	800cd5c <USBD_Get_USB_Status>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbc8:	78fa      	ldrb	r2, [r7, #3]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7f7 ffba 	bl	8004b46 <HAL_PCD_EP_ClrStall>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f8bf 	bl	800cd5c <USBD_Get_USB_Status>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	da0b      	bge.n	800cc20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc0e:	68f9      	ldr	r1, [r7, #12]
 800cc10:	4613      	mov	r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	4413      	add	r3, r2
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	440b      	add	r3, r1
 800cc1a:	3316      	adds	r3, #22
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	e00b      	b.n	800cc38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc20:	78fb      	ldrb	r3, [r7, #3]
 800cc22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	440b      	add	r3, r1
 800cc32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cc36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc5e:	78fa      	ldrb	r2, [r7, #3]
 800cc60:	4611      	mov	r1, r2
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f7 fda9 	bl	80047ba <HAL_PCD_SetAddress>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 f874 	bl	800cd5c <USBD_Get_USB_Status>
 800cc74:	4603      	mov	r3, r0
 800cc76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b086      	sub	sp, #24
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	60f8      	str	r0, [r7, #12]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
 800cc8e:	460b      	mov	r3, r1
 800cc90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cca0:	7af9      	ldrb	r1, [r7, #11]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	f7f7 feb1 	bl	8004a0c <HAL_PCD_EP_Transmit>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 f853 	bl	800cd5c <USBD_Get_USB_Status>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccba:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	607a      	str	r2, [r7, #4]
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cce2:	7af9      	ldrb	r1, [r7, #11]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	f7f7 fe3d 	bl	8004966 <HAL_PCD_EP_Receive>
 800ccec:	4603      	mov	r3, r0
 800ccee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f832 	bl	800cd5c <USBD_Get_USB_Status>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd18:	78fa      	ldrb	r2, [r7, #3]
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7f7 fe5d 	bl	80049dc <HAL_PCD_EP_GetRxCount>
 800cd22:	4603      	mov	r3, r0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd34:	4b03      	ldr	r3, [pc, #12]	@ (800cd44 <USBD_static_malloc+0x18>)
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	24001bb0 	.word	0x24001bb0

0800cd48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d817      	bhi.n	800cda0 <USBD_Get_USB_Status+0x44>
 800cd70:	a201      	add	r2, pc, #4	@ (adr r2, 800cd78 <USBD_Get_USB_Status+0x1c>)
 800cd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd76:	bf00      	nop
 800cd78:	0800cd89 	.word	0x0800cd89
 800cd7c:	0800cd8f 	.word	0x0800cd8f
 800cd80:	0800cd95 	.word	0x0800cd95
 800cd84:	0800cd9b 	.word	0x0800cd9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd8c:	e00b      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	73fb      	strb	r3, [r7, #15]
    break;
 800cd92:	e008      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd94:	2301      	movs	r3, #1
 800cd96:	73fb      	strb	r3, [r7, #15]
    break;
 800cd98:	e005      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd9e:	e002      	b.n	800cda6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cda0:	2303      	movs	r3, #3
 800cda2:	73fb      	strb	r3, [r7, #15]
    break;
 800cda4:	bf00      	nop
  }
  return usb_status;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <memset>:
 800cdb4:	4402      	add	r2, r0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d100      	bne.n	800cdbe <memset+0xa>
 800cdbc:	4770      	bx	lr
 800cdbe:	f803 1b01 	strb.w	r1, [r3], #1
 800cdc2:	e7f9      	b.n	800cdb8 <memset+0x4>

0800cdc4 <__libc_init_array>:
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	4d0d      	ldr	r5, [pc, #52]	@ (800cdfc <__libc_init_array+0x38>)
 800cdc8:	4c0d      	ldr	r4, [pc, #52]	@ (800ce00 <__libc_init_array+0x3c>)
 800cdca:	1b64      	subs	r4, r4, r5
 800cdcc:	10a4      	asrs	r4, r4, #2
 800cdce:	2600      	movs	r6, #0
 800cdd0:	42a6      	cmp	r6, r4
 800cdd2:	d109      	bne.n	800cde8 <__libc_init_array+0x24>
 800cdd4:	4d0b      	ldr	r5, [pc, #44]	@ (800ce04 <__libc_init_array+0x40>)
 800cdd6:	4c0c      	ldr	r4, [pc, #48]	@ (800ce08 <__libc_init_array+0x44>)
 800cdd8:	f000 f818 	bl	800ce0c <_init>
 800cddc:	1b64      	subs	r4, r4, r5
 800cdde:	10a4      	asrs	r4, r4, #2
 800cde0:	2600      	movs	r6, #0
 800cde2:	42a6      	cmp	r6, r4
 800cde4:	d105      	bne.n	800cdf2 <__libc_init_array+0x2e>
 800cde6:	bd70      	pop	{r4, r5, r6, pc}
 800cde8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdec:	4798      	blx	r3
 800cdee:	3601      	adds	r6, #1
 800cdf0:	e7ee      	b.n	800cdd0 <__libc_init_array+0xc>
 800cdf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf6:	4798      	blx	r3
 800cdf8:	3601      	adds	r6, #1
 800cdfa:	e7f2      	b.n	800cde2 <__libc_init_array+0x1e>
 800cdfc:	0800ce7c 	.word	0x0800ce7c
 800ce00:	0800ce7c 	.word	0x0800ce7c
 800ce04:	0800ce7c 	.word	0x0800ce7c
 800ce08:	0800ce80 	.word	0x0800ce80

0800ce0c <_init>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr

0800ce18 <_fini>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	bf00      	nop
 800ce1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1e:	bc08      	pop	{r3}
 800ce20:	469e      	mov	lr, r3
 800ce22:	4770      	bx	lr
