/*
 * ULP_strip_effects.c
 *
 *  Created on: Jun 30, 2024
 *      Author: micha
 */

#include "ULP_strip_effects.h"

// strip counter which points to number diode, max 21
uint8_t strip_startup_counter = 0;

void strip_startup_init()
{
	strip_startup_counter = 0;
}

// run and write effect to colour array and return 0 when startup end
uint8_t run_strip_startup_effect(uint8_t colour_array[][3], uint8_t strip_length)
{

	// first diode
	if (strip_startup_counter < strip_length)
	{
		// blue
		colour_array[strip_startup_counter][0] = 29;
		colour_array[strip_startup_counter][1] = 71;
		colour_array[strip_startup_counter][2] = 196;

		//red
		colour_array[strip_length - strip_startup_counter - 1][0] = 196;
		colour_array[strip_length - strip_startup_counter - 1][1] = 29;
		colour_array[strip_length - strip_startup_counter - 1][2] = 91;
	}

	// second diode
	if (strip_startup_counter - 1 >= 0 && strip_startup_counter - 1 < strip_length)
	{
		// blue
		colour_array[strip_startup_counter - 1][0] = 14;
		colour_array[strip_startup_counter - 1][1] = 35;
		colour_array[strip_startup_counter - 1][2] = 98;

		//red
		colour_array[strip_length - strip_startup_counter][0] = 98;
		colour_array[strip_length - strip_startup_counter][1] = 14;
		colour_array[strip_length - strip_startup_counter][2] = 45;
	}

	// third diode
	if (strip_startup_counter - 2 >= 0 && strip_startup_counter - 2 < strip_length)
	{
		// blue
		colour_array[strip_startup_counter - 2][0] = 7;
		colour_array[strip_startup_counter - 2][1] = 18;
		colour_array[strip_startup_counter - 2][2] = 49;

		//red
		colour_array[strip_length - strip_startup_counter + 1][0] = 49;
		colour_array[strip_length - strip_startup_counter + 1][1] = 7;
		colour_array[strip_length - strip_startup_counter + 1][2] = 23;
	}

	// fourth diode
	if (strip_startup_counter - 3 >= 0 && strip_startup_counter - 3 < strip_length)
	{
		// blue
		colour_array[strip_startup_counter - 3][0] = 0;
		colour_array[strip_startup_counter - 3][1] = 0;
		colour_array[strip_startup_counter - 3][2] = 0;

		//red
		colour_array[strip_length - strip_startup_counter + 2][0] = 0;
		colour_array[strip_length - strip_startup_counter + 2][1] = 0;
		colour_array[strip_length - strip_startup_counter + 2][2] = 0;
	}

	strip_startup_counter += 1;

	// end
	if (strip_startup_counter - 3 == strip_length+2)
		return 0;

	return 1;
}

uint8_t gradient_function(uint8_t a1, uint8_t a2, uint8_t x)
{
	// multiplication by 100 to avoid float calculations
	// a1 = 200 a2 = 0

	int16_t data = 0;
	if (a1 > a2)
	{
		data = a1;
		data = data * 100;
		data += (a1-a2) * (-x*100 / 20);
	}
	else
	{
		data = a2;
		data = data * 100;
		data += (a2-a1) * (-x*100 / 20);
	}

	return (uint8_t)(data / 100);
}

void get_gradient(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2, uint8_t b2, uint8_t colour_array[][3], uint8_t strip_length)
{
	for (uint8_t i = 0; i < strip_length; i++)
	{
		colour_array[i][0] = gradient_function(r1, r2, i);
		colour_array[i][1] = gradient_function(g1, g2, i);
		colour_array[i][2] = gradient_function(b1, b2, i);
	}
}

void move_pixel_right(uint8_t colour_array[][3], uint8_t strip_length)
{

}
